<div class="notebook">
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse2"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=#taillpn-htmlse1"> tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch1"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<h3 class="sectionHead">
<span class="titlemark"> 1.1 
</span>
<a id="x11-90001.1">
</a> Some Simple Examples 
</h3>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> There are only three basic constructs in Prolog: facts, rules, and queries. A collection of facts and rules is called a knowledge base (or a database) and Prolog programming is all about writing knowledge bases. That is, Prolog programs simply 
<span class="cmti-10"> are 
</span> knowledge bases, collections of facts and rules which describe some collection of relationships that we find interesting. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> So how do we 
<span class="cmti-10"> use 
</span> a Prolog program? By posing queries. That is, by asking questions about the information stored in the knowledge base. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Now this probably sounds rather strange. It’s certainly not obvious that it has much to do with programming at all. After all, isn’t programming all about telling a computer what to do? But as we shall see, the Prolog way of programming makes a lot of sense, at least for certain tasks; for example, it is useful in computational linguistics and Artificial Intelligence (AI). But instead of saying more about Prolog in general terms, let’s jump right in and start writing some simple knowledge bases; this is not just the best way of learning Prolog, it’s the only way. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent">
</p>
</div>
<div class="nb-cell html" name="htm1">
<h4 class="likesubsectionHead">
<a id="x11-100001.1">
</a> Knowledge Base 1 
</h4>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Knowledge Base 1 (KB1) is simply a collection of facts. Facts are used to state things that are 
<span class="cmti-10"> unconditionally 
</span> true of some situation of interest. For example, we can state that Mia, Jody, and Yolanda are women, that Jody plays air guitar, and that a party is taking place, using the following five facts: 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb1">
<a id="x11-10002r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  woman(mia). 
</span>
<br class="fancyvrb"/>
<a id="x11-10004r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  woman(jody). 
</span>
<br class="fancyvrb"/>
<a id="x11-10006r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  woman(yolanda). 
</span>
<br class="fancyvrb"/>
<a id="x11-10008r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  playsAirGuitar(jody). 
</span>
<br class="fancyvrb"/>
<a id="x11-10010r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  party. 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> This collection of facts is KB1. It is our first example of a Prolog program. Note that the names 
<span class="verb">
<span class="cmtt-10"> mia 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> jody 
</span>
</span> , and 
<span class="verb">
<span class="cmtt-10"> yolanda 
</span>
</span> , the properties 
<span class="verb">
<span class="cmtt-10"> woman 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> playsAirGuitar 
</span>
</span> , and the proposition 
<span class="verb">
<span class="cmtt-10"> party 
</span>
</span> have been written so that the first letter is in lower-case. This is important; we will see why a little later on. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> How can we use KB1? By posing queries. That is, by asking questions about the information KB1 contains. Here are some examples. We can ask Prolog whether Mia is a woman by posing the query: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb2">
<a id="x11-10012r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  woman(mia). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Prolog will answer 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb3">
<a id="x11-10014r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> for the obvious reason that this is one of the facts explicitly recorded in KB1. Incidentally, 
<span class="cmti-10"> we 
</span> don’t type in the 
<span class="verb">
<span class="cmtt-10"> ?- 
</span>
</span> . This symbol (or something like it, depending on the implementation of Prolog you are using) is the prompt symbol that the Prolog interpreter displays when it is waiting to evaluate a query. We just type in the actual query (for example 
<span class="verb">
<span class="cmtt-10"> woman(mia) 
</span>
</span> ) followed by 
<span class="verb">
<span class="cmtt-10"> . 
</span>
</span> (a full stop). The full stop is important. If you don’t type it, Prolog won’t start working on the query. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Similarly, we can ask whether Jody plays air guitar by posing the following query: 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb4">
<a id="x11-10016r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  playsAirGuitar(jody). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Prolog will again answer yes, because this is one of the facts in KB1. However, suppose we ask whether Mia plays air guitar: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb5">
<a id="x11-10018r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  playsAirGuitar(mia). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> We will get the answer 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb6">
<a id="x11-10020r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  no 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Why? Well, first of all, this is not a fact in KB1. Moreover, KB1 is extremely simple, and contains no other information (such as the 
<span class="cmti-10"> rules 
</span> we will learn about shortly) which might help Prolog try to infer (that is, deduce) whether Mia plays air guitar. So Prolog correctly concludes that 
<span class="verb">
<span class="cmtt-10"> playsAirGuitar(mia) 
</span>
</span> does 
<span class="cmti-10"> not 
</span> follow from KB1. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Here are two important examples. First, suppose we pose the query: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb7">
<a id="x11-10022r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  playsAirGuitar(vincent). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Again Prolog answers no. Why? Well, this query is about a person (Vincent) that it has no information about, so it (correctly) concludes that 
<span class="verb">
<span class="cmtt-10"> playsAirGuitar(vincent) 
</span>
</span> cannot be deduced from the information in KB1. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Similarly, suppose we pose the query: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb8">
<a id="x11-10024r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  tatooed(jody). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Again Prolog will answer no. Why? Well, this query is about a property (being tatooed) that it has no information about, so once again it (correctly) concludes that the query cannot be deduced from the information in KB1. (Actually, some Prolog implementations will respond to this query with an error message, telling you that the predicate or procedure 
<span class="verb">
<span class="cmtt-10"> tatooed 
</span>
</span> is not defined; we will soon introduce the notion of predicates.) 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Needless to say, we can also make queries concerning propositions. For example, if we pose the query 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb9">
<a id="x11-10026r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  party. 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> then Prolog will respond 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb10">
<a id="x11-10028r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> and if we pose the query 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb11">
<a id="x11-10030r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  rockConcert. 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> then Prolog will respond 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb12">
<a id="x11-10032r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  no 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> exactly as we would expect. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent">
</p>
</div>
<div class="nb-cell html" name="htm1">
<h4 class="likesubsectionHead">
<a id="x11-110001.1">
</a> Knowledge Base 2 
</h4>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Here is KB2, our second knowledge base: 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb13">
<a id="x11-11002r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  happy(yolanda). 
</span>
<br class="fancyvrb"/>
<a id="x11-11004r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  listens2Music(mia). 
</span>
<br class="fancyvrb"/>
<a id="x11-11006r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  listens2Music(yolanda):- 
</span>
<span class="cmtt-10">  happy(yolanda). 
</span>
<br class="fancyvrb"/>
<a id="x11-11008r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  playsAirGuitar(mia):- 
</span>
<span class="cmtt-10">  listens2Music(mia). 
</span>
<br class="fancyvrb"/>
<a id="x11-11010r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  playsAirGuitar(yolanda):- 
</span>
<span class="cmtt-10">  listens2Music(yolanda). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> There are two facts in KB2, 
<span class="verb">
<span class="cmtt-10"> listens2Music(mia) 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> happy(yolanda) 
</span>
</span> . The last three items it contains are rules. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Rules state information that is 
<span class="cmti-10"> conditionally 
</span> true of the situation of interest. For example, the first rule says that Yolanda listens to music 
<span class="cmti-10"> if 
</span> she is happy, and the last rule says that Yolanda plays air guitar 
<span class="cmti-10"> if 
</span> she listens to music. More generally, the 
<span class="verb">
<span class="cmtt-10"> :- 
</span>
</span> should be read as “if”, or “is implied by”. The part on the left hand side of the 
<span class="verb">
<span class="cmtt-10"> :- 
</span>
</span> is called the head of the rule, the part on the right hand side is called the body. So in general rules say: 
<span class="cmti-10"> if 
</span> the body of the rule is true, 
<span class="cmti-10"> then 
</span> the head of the rule is true too. And now for the key point: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="quote">
<!--l. 183-->
<p class="noindent">
<span class="cmti-10"> If a knowledge base contains a rule 
</span>
<span class="verb">
<span class="cmtt-10"> head 
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  body, 
</span>
</span>
<span class="cmti-10"> and Prolog knows 
</span>
<span class="cmti-10"> that 
</span>
<span class="verb">
<span class="cmtt-10"> body 
</span>
</span>
<span class="cmti-10"> follows from the information in the knowledge base, then 
</span>
<span class="cmti-10"> Prolog can infer 
</span>
<span class="verb">
<span class="cmtt-10"> head. 
</span>
</span>
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> This fundamental deduction step is called modus ponens. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Let’s consider an example. Suppose we ask whether Mia plays air guitar: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb14">
<a id="x11-11012r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  playsAirGuitar(mia). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Prolog will respond yes. Why? Well, although it can’t find 
<span class="verb">
<span class="cmtt-10"> playsAirGuitar(mia) 
</span>
</span> as a fact explicitly recorded in KB2, it can find the rule 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb15">
<a id="x11-11014r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  playsAirGuitar(mia):- 
</span>
<span class="cmtt-10">  listens2Music(mia). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Moreover, KB2 also contains the fact 
<span class="verb">
<span class="cmtt-10"> listens2Music(mia) 
</span>
</span> . Hence Prolog can use the rule of modus ponens to deduce that 
<span class="verb">
<span class="cmtt-10"> playsAirGuitar(mia) 
</span>
</span> . 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Our next example shows that Prolog can chain together uses of modus ponens. Suppose we ask: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb16">
<a id="x11-11016r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  playsAirGuitar(yolanda). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Prolog would respond yes. Why? Well, first of all, by using the fact 
<span class="verb">
<span class="cmtt-10"> happy(yolanda) 
</span>
</span> and the rule 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb17">
<a id="x11-11018r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  listens2Music(yolanda):- 
</span>
<span class="cmtt-10">  happy(yolanda). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Prolog can deduce the new fact 
<span class="verb">
<span class="cmtt-10"> listens2Music(yolanda) 
</span>
</span> . This new fact is not explicitly recorded in the knowledge base — it is only 
<span class="cmti-10"> implicitly 
</span> present (it is 
<span class="cmti-10"> inferred 
</span> knowledge). Nonetheless, Prolog can then use it just like an explicitly recorded fact. In particular, from this inferred fact and the rule 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb18">
<a id="x11-11020r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  playsAirGuitar(yolanda):- 
</span>
<span class="cmtt-10">  listens2Music(yolanda). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> it can deduce 
<span class="verb">
<span class="cmtt-10"> playsAirGuitar(yolanda) 
</span>
</span> , which is what we asked it. Summing up: any fact produced by an application of modus ponens can be used as input to further rules. By chaining together applications of modus ponens in this way, Prolog is able to retrieve information that logically follows from the rules and facts recorded in the knowledge base. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> The facts and rules contained in a knowledge base are called clauses. Thus KB2 contains five clauses, namely three rules and two facts. Another way of looking at KB2 is to say that it consists of three predicates (or procedures). The three predicates are: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb19">
<a id="x11-11022r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  listens2Music 
</span>
<br class="fancyvrb"/>
<a id="x11-11024r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  happy 
</span>
<br class="fancyvrb"/>
<a id="x11-11026r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  playsAirGuitar 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> The 
<span class="verb">
<span class="cmtt-10"> happy 
</span>
</span> predicate is defined using a single clause (a fact). The 
<span class="verb">
<span class="cmtt-10"> listens2Music 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> playsAirGuitar 
</span>
</span> predicates are each defined using two clauses (in one case, two rules, and in the other case, one rule and one fact). It is a good idea to think about Prolog programs in terms of the predicates they contain. In essence, the predicates are the concepts we find important, and the various clauses we write down concerning them are our attempts to pin down what they mean and how they are inter-related. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> One final remark. We can view a fact as a rule with an empty body. That is, we can think of facts as conditionals that do not have any antecedent conditions, or degenerate rules. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent">
</p>
</div>
<div class="nb-cell html" name="htm1">
<h4 class="likesubsectionHead">
<a id="x11-120001.1">
</a> Knowledge Base 3 
</h4>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> KB3, our third knowledge base, consists of five clauses: 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb20">
<a id="x11-12002r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  happy(vincent). 
</span>
<br class="fancyvrb"/>
<a id="x11-12004r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  listens2Music(butch). 
</span>
<br class="fancyvrb"/>
<a id="x11-12006r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  playsAirGuitar(vincent):- 
</span>
<br class="fancyvrb"/>
<a id="x11-12008r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  listens2Music(vincent), 
</span>
<br class="fancyvrb"/>
<a id="x11-12010r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  happy(vincent). 
</span>
<br class="fancyvrb"/>
<a id="x11-12012r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  playsAirGuitar(butch):- 
</span>
<br class="fancyvrb"/>
<a id="x11-12014r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  happy(butch). 
</span>
<br class="fancyvrb"/>
<a id="x11-12016r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  playsAirGuitar(butch):- 
</span>
<br class="fancyvrb"/>
<a id="x11-12018r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  listens2Music(butch). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> There are two facts, 
<span class="verb">
<span class="cmtt-10"> happy(vincent) 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> listens2Music(butch) 
</span>
</span> , and three rules. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> KB3 defines the same three predicates as KB2 (namely 
<span class="verb">
<span class="cmtt-10"> happy 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> listens2Music 
</span>
</span> , and 
<span class="verb">
<span class="cmtt-10"> playsAirGuitar 
</span>
</span> ) but it defines them differently. In particular, the three rules that define the 
<span class="verb">
<span class="cmtt-10"> playsAirGuitar 
</span>
</span> predicate introduce some new ideas. First, note that the rule 
<a id="dx11-12019">
</a>
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb21">
<a id="x11-12021r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  playsAirGuitar(vincent):- 
</span>
<br class="fancyvrb"/>
<a id="x11-12023r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  listens2Music(vincent), 
</span>
<br class="fancyvrb"/>
<a id="x11-12025r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  happy(vincent). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> has 
<span class="cmti-10"> two 
</span> items in its body, or (to use the standard terminology) two goals. So, what exactly does this rule mean? The most important thing to note is the comma 
<span class="verb">
<span class="cmtt-10"> , 
</span>
</span> that separates the goal 
<span class="verb">
<span class="cmtt-10"> listens2Music(vincent) 
</span>
</span> and the goal 
<span class="verb">
<span class="cmtt-10"> happy(vincent) 
</span>
</span> in the rule’s body. This is the way logical conjunction is expressed in Prolog (that is, the comma means 
<span class="cmti-10"> and 
</span> ). So this rule says: “Vincent plays air guitar if he listens to music 
<span class="cmti-10"> and 
</span> he is happy”. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Thus, if we posed the query 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb22">
<a id="x11-12027r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  playsAirGuitar(vincent). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Prolog would answer no. This is because while KB3 contains 
<span class="verb">
<span class="cmtt-10"> happy(vincent) 
</span>
</span> , it does 
<span class="cmti-10"> not 
</span> explicitly contain the information 
<span class="verb">
<span class="cmtt-10"> listens2Music(vincent) 
</span>
</span> , and this fact cannot be deduced either. So KB3 only fulfils one of the two preconditions needed to establish 
<span class="verb">
<span class="cmtt-10"> playsAirGuitar(vincent) 
</span>
</span> , and our query fails. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Incidentally, the spacing used in this rule is irrelevant. For example, we could have written it as 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb23">
<a id="x11-12029r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  playsAirGuitar(vincent):- 
</span>
<span class="cmtt-10">  happy(vincent), 
</span>
<br class="fancyvrb"/>
<a id="x11-12031r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  listens2Music(vincent). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> and it would have meant exactly the same thing. Prolog offers us a lot of freedom in the way we set out knowledge bases, and we can take advantage of this to keep our code readable. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Next, note that KB3 contains two rules with 
<span class="cmti-10"> exactly 
</span> the same head, namely: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb24">
<a id="x11-12033r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  playsAirGuitar(butch):- 
</span>
<br class="fancyvrb"/>
<a id="x11-12035r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  happy(butch). 
</span>
<br class="fancyvrb"/>
<a id="x11-12037r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  playsAirGuitar(butch):- 
</span>
<br class="fancyvrb"/>
<a id="x11-12039r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  listens2Music(butch). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> This is a way of stating that Butch plays air guitar 
<span class="cmti-10"> either 
</span> if he listens to music, 
<span class="cmti-10"> or 
</span> if he is happy. That is, listing multiple rules with the same head is a way of expressing logical disjunction (that is, it is a way of saying 
<span class="cmti-10"> or 
</span> ). So if we posed the query 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb25">
<a id="x11-12041r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  playsAirGuitar(butch). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Prolog would answer yes. For although the first of these rules will not help (KB3 does not allow Prolog to conclude that 
<span class="verb">
<span class="cmtt-10"> happy(butch) 
</span>
</span> ), KB3 
<span class="cmti-10"> does 
</span> contain 
<span class="verb">
<span class="cmtt-10"> listens2Music(butch) 
</span>
</span> and this means Prolog can apply modus ponens using the rule 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb26">
<a id="x11-12043r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  playsAirGuitar(butch):- 
</span>
<br class="fancyvrb"/>
<a id="x11-12045r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  listens2Music(butch). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> to conclude that 
<span class="verb">
<span class="cmtt-10"> playsAirGuitar(butch) 
</span>
</span> . 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> There is another way of expressing disjunction in Prolog. We could replace the pair of rules given above by the single rule 
<a id="dx11-12046">
</a>
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb27">
<a id="x11-12048r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  playsAirGuitar(butch):- 
</span>
<br class="fancyvrb"/>
<a id="x11-12050r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  happy(butch); 
</span>
<br class="fancyvrb"/>
<a id="x11-12052r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  listens2Music(butch). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> That is, the semicolon 
<span class="verb">
<span class="cmtt-10"> ; 
</span>
</span> is the Prolog symbol for 
<span class="cmti-10"> or 
</span> , so this single rule means exactly the same thing as the previous pair of rules. Is it better to use multiple rules or the semicolon? That depends. On the one hand, extensive use of semicolon can make Prolog code hard to read. On the other hand, the semicolon is more efficient as Prolog only has to deal with one rule. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> It should now be clear that Prolog has something to do with logic: after all, the 
<span class="verb">
<span class="cmtt-10"> :- 
</span>
</span> means implication, the 
<span class="verb">
<span class="cmtt-10"> , 
</span>
</span> means conjunction, and the 
<span class="verb">
<span class="cmtt-10"> ; 
</span>
</span> means disjunction. (What about negation? That is a whole other story. We’ll be discussing it in Chapter  
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch10"> 10 
<!--tex4ht:ref: CHAPTER10 -->
</a> .) Moreover, we have seen that a standard logical proof rule (modus ponens) plays an important role in Prolog programming. So we are already beginning to understand why “Prolog” is short for “Programming with logic”. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent">
</p>
</div>
<div class="nb-cell html" name="htm1">
<h4 class="likesubsectionHead">
<a id="x11-130001.1">
</a> Knowledge Base 4 
</h4>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Here is KB4, our fourth knowledge base: 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb28">
<a id="x11-13002r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  woman(mia). 
</span>
<br class="fancyvrb"/>
<a id="x11-13004r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  woman(jody). 
</span>
<br class="fancyvrb"/>
<a id="x11-13006r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  woman(yolanda). 
</span>
<br class="fancyvrb"/>
<a id="x11-13008r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x11-13010r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  loves(vincent,mia). 
</span>
<br class="fancyvrb"/>
<a id="x11-13012r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  loves(marsellus,mia). 
</span>
<br class="fancyvrb"/>
<a id="x11-13014r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  loves(pumpkin,honey_bunny). 
</span>
<br class="fancyvrb"/>
<a id="x11-13016r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  loves(honey_bunny,pumpkin). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Now, this is a pretty boring knowledge base. There are no rules, only a collection of facts. Ok, we are seeing a relation that has two names as arguments for the first time (namely the 
<span class="verb">
<span class="cmtt-10"> loves 
</span>
</span> relation), but, let’s face it, that’s a rather predictable idea. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> No, the novelty this time lies not in the knowledge base, it lies in the queries we are going to pose. In particular, 
<span class="cmti-10"> for the first time we’re going to make use of 
</span>
<span class="cmti-10"> variables 
</span> . Here’s an example: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb29">
<a id="x11-13018r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  woman(X). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> The 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> is a variable (in fact, any word beginning with an upper-case letter is a Prolog variable, which is why we had to be careful to use lower-case initial letters in our earlier examples). Now a variable isn’t a name, rather it’s a 
<span class="cmti-10"> placeholder 
</span> for information. That is, this query asks Prolog: tell me which of the individuals you know about is a woman. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Prolog answers this query by working its way through KB4, from top to bottom, trying to unify (or match) the expression 
<span class="verb">
<span class="cmtt-10"> woman(X) 
</span>
</span> with the information KB4 contains. Now the first item in the knowledge base is 
<span class="verb">
<span class="cmtt-10"> woman(mia) 
</span>
</span> . So, Prolog unifies 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> with 
<span class="verb">
<span class="cmtt-10"> mia 
</span>
</span> , thus making the query agree perfectly with this first item. (Incidentally, there’s a lot of different terminology for this process: we can also say that Prolog instantiates 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> to 
<span class="verb">
<span class="cmtt-10"> mia 
</span>
</span> , or that it binds 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> to 
<span class="verb">
<span class="cmtt-10"> mia 
</span>
</span> .) Prolog then reports back to us as follows: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb30">
<a id="x11-13020r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  mia 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> That is, it not only says that there is information about at least one woman in KB4, it actually tells us who she is. It didn’t just say yes, it actually gave us the variable binding (or variable instantiation) that led to success. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> But that’s not the end of the story. The whole point of variables is that they can stand for, or unify with, different things. And there is information about other women in the knowledge base. We can access this information by typing a semicolon: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb31">
<a id="x11-13022r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  mia 
</span>
<span class="cmtt-10">  ; 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Remember that 
<span class="verb">
<span class="cmtt-10"> ; 
</span>
</span> means 
<span class="cmti-10"> or 
</span> , so this query means: 
<span class="cmti-10"> are there any alternatives 
</span> ? So Prolog begins working through the knowledge base again (it remembers where it got up to last time and starts from there) and sees that if it unifies 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> with 
<span class="verb">
<span class="cmtt-10"> jody 
</span>
</span> , then the query agrees perfectly with the second entry in the knowledge base. So it responds: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb32">
<a id="x11-13024r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  mia 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x11-13026r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  jody 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> It’s telling us that there is information about a second woman in KB4, and (once again) it actually gives us the value that led to success. And of course, if we press 
<span class="verb">
<span class="cmtt-10"> ; 
</span>
</span> a second time, Prolog returns the answer 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb33">
<a id="x11-13028r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  mia 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x11-13030r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  jody 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x11-13032r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  yolanda 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> But what happens if we press 
<span class="verb">
<span class="cmtt-10"> ; 
</span>
</span> a 
<span class="cmti-10"> third 
</span> time? Prolog responds no. No other unifications are possible. There are no other facts starting with the symbol 
<span class="verb">
<span class="cmtt-10"> woman 
</span>
</span> . The last four entries in the knowledge base concern the 
<span class="verb">
<span class="cmtt-10"> love 
</span>
</span> relation, and there is no way that such entries can be unified with a query of the form 
<span class="verb">
<span class="cmtt-10"> woman(X) 
</span>
</span> . 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Let’s try a more complicated query, namely 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb34">
<a id="x11-13034r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  loves(marsellus,X), 
</span>
<span class="cmtt-10">  woman(X). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Now, remember that 
<span class="verb">
<span class="cmtt-10"> , 
</span>
</span> means 
<span class="cmti-10"> and 
</span> , so this query says: 
<span class="cmti-10"> is there any individual 
</span>
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span>
<span class="cmti-10"> such that 
</span>
<span class="cmti-10"> Marsellus loves 
</span>
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span>
<span class="cmti-10"> and 
</span>
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span>
<span class="cmti-10"> is a woman 
</span> ? If you look at the knowledge base you’ll see that there is: Mia is a woman (fact 1) and Marsellus loves Mia (fact 5). And in fact, Prolog is capable of working this out. That is, it can search through the knowledge base and work out that if it unifies 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> with Mia, then both conjuncts of the query are satisfied (we’ll learn in the following chapter how Prolog does this). So Prolog returns the answer 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb35">
<a id="x11-13036r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  mia 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> The business of unifying variables with information in the knowledge base is the heart of Prolog. As we’ll learn, there are many interesting ideas in Prolog — but when you get right down to it, it’s Prolog’s ability to perform unification and return the values of the variable bindings to us that is crucial. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent">
</p>
</div>
<div class="nb-cell html" name="htm1">
<h4 class="likesubsectionHead">
<a id="x11-140001.1">
</a> Knowledge Base 5 
</h4>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Well, we’ve introduced variables, but so far we’ve only used them in queries. But variables not only 
<span class="cmti-10"> can 
</span> be used in knowledge bases, it’s only when we start to do so that we can write truly interesting programs. Here’s a simple example, the knowledge base KB5: 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb36">
<a id="x11-14002r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  loves(vincent,mia). 
</span>
<br class="fancyvrb"/>
<a id="x11-14004r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  loves(marsellus,mia). 
</span>
<br class="fancyvrb"/>
<a id="x11-14006r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  loves(pumpkin,honey_bunny). 
</span>
<br class="fancyvrb"/>
<a id="x11-14008r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  loves(honey_bunny,pumpkin). 
</span>
<br class="fancyvrb"/>
<a id="x11-14010r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x11-14012r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  jealous(X,Y):- 
</span>
<span class="cmtt-10">  loves(X,Z), 
</span>
<span class="cmtt-10">  loves(Y,Z). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> KB5 contains four facts about the 
<span class="verb">
<span class="cmtt-10"> loves 
</span>
</span> relation and one rule. (Incidentally, the blank line between the facts and the rule has no meaning: it’s simply there to increase the readability. As we said earlier, Prolog gives us a great deal of freedom in the way we format knowledge bases.) But this rule is by far the most interesting one we have seen so far: it contains three variables (note that 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> Y 
</span>
</span> , and 
<span class="verb">
<span class="cmtt-10"> Z 
</span>
</span> are all upper-case letters). What does it say? 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> In effect, it is defining a concept of jealousy. It says that an individual 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> will be jealous of an individual 
<span class="verb">
<span class="cmtt-10"> Y 
</span>
</span> if there is some individual 
<span class="verb">
<span class="cmtt-10"> Z 
</span>
</span> that 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> loves, and 
<span class="verb">
<span class="cmtt-10"> Y 
</span>
</span> loves that same individual 
<span class="verb">
<span class="cmtt-10"> Z 
</span>
</span> too. (Ok, so jealousy isn’t as straightforward as this in the real world.) The key thing to note is that this is a 
<span class="cmti-10"> general 
</span> statement: it is not stated in terms of 
<span class="verb">
<span class="cmtt-10"> mia 
</span>
</span> , or 
<span class="verb">
<span class="cmtt-10"> pumpkin 
</span>
</span> , or anyone in particular — it’s a conditional statement about 
<span class="cmti-10"> everybody 
</span> in our little world. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Suppose we pose the query: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb37">
<a id="x11-14014r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  jealous(marsellus,W). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> This query asks: can you find an individual 
<span class="verb">
<span class="cmtt-10"> W 
</span>
</span> such that Marsellus is jealous of 
<span class="verb">
<span class="cmtt-10"> W 
</span>
</span> ? Vincent is such an individual. If you check the definition of jealousy, you’ll see that Marsellus must be jealous of Vincent, because they both love the same woman, namely Mia. So Prolog will return the value 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb38">
<a id="x11-14016r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  W 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  vincent 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Now some questions for 
<span class="cmti-10"> you 
</span> . First, are there any other jealous people in KB5? Furthermore, suppose we wanted Prolog to tell us about all the jealous people: what query would we pose? Do any of the answers surprise you? Do any seem silly? 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse2"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse1"> front 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch1"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent">
<a id="taillpn-htmlse1">
</a>
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse3"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse1"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse1"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=#taillpn-htmlse2"> tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch1"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<h3 class="sectionHead">
<span class="titlemark"> 1.2 
</span>
<a id="x12-150001.2">
</a> Prolog Syntax 
</h3>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Now that we’ve got some idea of what Prolog does, it’s time to go back to the beginning and work through the details more carefully. Let’s start by asking a very basic question: we’ve seen all kinds of expressions (for example 
<span class="verb">
<span class="cmtt-10"> jody 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> playsAirGuitar(mia) 
</span>
</span> , and 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> ) in our Prolog programs, but these have just been examples. It’s time for precision: exactly what are facts, rules, and queries built out of? 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> The answer is terms, and there are four kinds of term in Prolog: atoms, numbers, variables, and complex terms (or structures). Atoms and numbers are lumped together under the heading constants, and constants and variables together make up the simple terms of Prolog. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Let’s take a closer look. To make things crystal clear, let’s first be precise about the basic characters (that is, symbols) at our disposal. The 
<span class="cmti-10"> upper-case letters 
</span> are 
<span class="verb">
<span class="cmtt-10"> A 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> B 
</span>
</span> ,…, 
<span class="verb">
<span class="cmtt-10"> Z 
</span>
</span> ; the 
<span class="cmti-10"> lower-case letters 
</span> are 
<span class="verb">
<span class="cmtt-10"> a 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> b 
</span>
</span> ,…, 
<span class="verb">
<span class="cmtt-10"> z 
</span>
</span> ; the 
<span class="cmti-10"> digits 
</span> are 
<span class="verb">
<span class="cmtt-10"> 0 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> 1 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> 2 
</span>
</span> ,…, 
<span class="verb">
<span class="cmtt-10"> 9 
</span>
</span> . In addition we have the 
<span class="verb">
<span class="cmtt-10"> _ 
</span>
</span> symbol, which is called underscore, and some 
<span class="cmti-10"> special characters 
</span> , which include characters such as 
<span class="verb">
<span class="cmtt-10"> + 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> - 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> * 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> / 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> &lt; 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> &gt; 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> = 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> : 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> . 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> &amp; 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> ~ 
</span>
</span> . The blank 
<span class="cmti-10"> space 
</span> is also a character, but a rather unusual one, being invisible. A string is an unbroken sequence of characters. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent">
</p>
</div>
<div class="nb-cell html" name="htm1">
<h4 class="likesubsectionHead">
<a id="x12-160001.2">
</a> Atoms 
</h4>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> An atom is either: 
</p>
</div>

<div class="nb-cell html" name="htm1">
<ol class="enumerate1">
<li class="enumerate" id="x12-16002x1"> A string of characters made up of upper-case letters, lower-case letters, digits, and the underscore character, that begins with a lower-case letter. Here are some examples: 
<span class="verb">
<span class="cmtt-10"> butch 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> big_kahuna_burger 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> listens2Music 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> playsAirGuitar 
</span>
</span> . 
</li>
<li class="enumerate" id="x12-16004x2"> An arbitrary sequence of characters enclosed in single quotes. For example ’ 
<span class="verb">
<span class="cmtt-10"> Vincent 
</span>
</span> ’, ’ 
<span class="verb">
<span class="cmtt-10"> The 
</span>
<span class="cmtt-10">  Gimp 
</span>
</span> ’, ’ 
<span class="verb">
<span class="cmtt-10"> Five_Dollar_Shake 
</span>
</span> ’, ’ 
<span class="verb">
<span class="cmtt-10"> &amp;^%&amp;#@$ 
</span>
<span class="cmtt-10">  &amp;* 
</span>
</span> ’, and ’ 
<span class="verb">
<span class="cmtt-10">   
</span>
</span> ’. The sequence of characters between the single quotes is called the atom name. Note that we are allowed to use spaces in such atoms; in fact, a common reason for using single quotes is so we can do precisely that. 
</li>
<li class="enumerate" id="x12-16006x3"> A string of special characters. Here are some examples: 
<span class="verb">
<span class="cmtt-10"> @= 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> ====&gt; 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> ; 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> :- 
</span>
</span> are all atoms. As we have seen, some of these atoms, such as 
<span class="verb">
<span class="cmtt-10"> ; 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> :- 
</span>
</span> have a pre-defined meaning. 
</li>
</ol>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent">
</p>
</div>
<div class="nb-cell html" name="htm1">
<h4 class="likesubsectionHead">
<a id="x12-170001.2">
</a> Numbers 
</h4>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Real numbers aren’t particularly important in typical Prolog applications. So although most Prolog implementations do support floating point numbers or floats (that is, representations of real numbers such as 1657.3087 or 
<span class="cmmi-10"> π 
</span> ) we say little about them in this book. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> But integers (that is: …,-2, -1, 0, 1, 2, 3,…) are useful for such tasks as counting the elements of a list, and we’ll discuss how to manipulate them in Chapter  
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch5"> 5 
<!--tex4ht:ref: CHAPTER5 -->
</a> . Their Prolog syntax is the obvious one: 
<span class="verb">
<span class="cmtt-10"> 23 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> 1001 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> 0 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> -365 
</span>
</span> , and so on. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent">
</p>
</div>
<div class="nb-cell html" name="htm1">
<h4 class="likesubsectionHead">
<a id="x12-180001.2">
</a> Variables 
</h4>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> A variable is a string of upper-case letters, lower-case letters, digits and underscore characters that starts 
<span class="cmti-10"> either 
</span> with an upper-case letter 
<span class="cmti-10"> or 
</span> with an underscore. For example, 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> Y 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> Variable 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> _tag 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> X_526 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> List 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> List24 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> _head 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> Tail 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> _input 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> Output 
</span>
</span> are all Prolog variables. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> The variable 
<span class="verb">
<span class="cmtt-10"> _ 
</span>
</span> (that is, a single underscore character) is rather special. It’s called the 
<span class="cmti-10"> anonymous variable 
</span> , and we discuss it in Chapter  
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch4"> 4 
<!--tex4ht:ref: CHAPTER4 -->
</a> . 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent">
</p>
</div>
<div class="nb-cell html" name="htm1">
<h4 class="likesubsectionHead">
<a id="x12-190001.2">
</a> Complex terms 
</h4>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Constants, numbers, and variables are the building blocks: now we need to know how to fit them together to make complex terms. Recall that complex terms are often called structures. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Complex terms are build out of a functor followed by a sequence of arguments. The arguments are put in ordinary parentheses, separated by commas, and placed after the functor. Note that the functor has to be directly followed by the parenthesis; you can’t have a space between the functor and the parenthesis enclosing the arguments. The functor 
<span class="cmti-10"> must 
</span> be an atom. That is, variables 
<span class="cmti-10"> cannot 
</span> be used as functors. On the other hand, arguments can be any kind of term. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Now, we’ve already seen lots of examples of complex terms when we looked at the knowledge bases KB1 to KB5. For example, 
<span class="verb">
<span class="cmtt-10"> playsAirGuitar(jody) 
</span>
</span> is a complex term: its functor is 
<span class="verb">
<span class="cmtt-10"> playsAirGuitar 
</span>
</span> and its argument is 
<span class="verb">
<span class="cmtt-10"> jody 
</span>
</span> . Other examples are 
<span class="verb">
<span class="cmtt-10"> loves(vincent,mia) 
</span>
</span> and, to give an example containing a variable, 
<span class="verb">
<span class="cmtt-10"> jealous(marsellus,W) 
</span>
</span> . 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> But the definition allows for more complex terms than this. In fact, it allows us to keep nesting complex terms inside complex terms indefinitely (that is, it is allows recursive structure). For example 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb39">
<a id="x12-19002r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  hide(X,father(father(father(butch)))) 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> is a perfectly acceptable complex term. Its functor is 
<span class="verb">
<span class="cmtt-10"> hide 
</span>
</span> , and it has two arguments: the variable 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> , and the complex term 
<span class="verb">
<span class="cmtt-10"> father(father(father(butch))) 
</span>
</span> . This complex term has 
<span class="verb">
<span class="cmtt-10"> father 
</span>
</span> as its functor, and another complex term, namely 
<span class="verb">
<span class="cmtt-10"> father(father(butch)) 
</span>
</span> , as its sole argument. And the argument of this complex term, namely 
<span class="verb">
<span class="cmtt-10"> father(butch) 
</span>
</span> , is also complex. But then the nesting bottoms out, for the argument here is the constant 
<span class="verb">
<span class="cmtt-10"> butch 
</span>
</span> . 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> As we shall see, such nested (or recursively structured) terms enable us to represent many problems naturally. In fact the interplay between recursive term structure and variable unification is the source of much of Prolog’s power. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> The number of arguments that a complex term has is called its arity. For example, 
<span class="verb">
<span class="cmtt-10"> woman(mia) 
</span>
</span> is a complex term of arity 1, and 
<span class="verb">
<span class="cmtt-10"> loves(vincent,mia) 
</span>
</span> is a complex term of arity 2. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Arity is important to Prolog. Prolog would be quite happy for us to define two predicates with the same functor but with a different number of arguments. For example, we are free to define a knowledge base that defines a two-place predicate 
<span class="verb">
<span class="cmtt-10"> love 
</span>
</span> (this might contain such facts as 
<span class="verb">
<span class="cmtt-10"> love(vincent,mia) 
</span>
</span> ), and also a three-place 
<span class="verb">
<span class="cmtt-10"> love 
</span>
</span> predicate (which might contain such facts as 
<span class="verb">
<span class="cmtt-10"> love(vincent,marsellus,mia) 
</span>
</span> ). However, if we did this, Prolog would treat the two-place 
<span class="verb">
<span class="cmtt-10"> love 
</span>
</span> and the three-place 
<span class="verb">
<span class="cmtt-10"> love 
</span>
</span> as different predicates. Later in the book (for example, when we introduce accumulators in Chapter 5) we shall see that it can be useful to define two predicates with the same functor but different arity. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> When we need to talk about predicates and how we intend to use them (for example, in documentation) it is usual to use a suffix 
<span class="verb">
<span class="cmtt-10"> / 
</span>
</span> followed by a number to indicate the predicate’s arity. To return to KB2, instead of saying that it defines predicates 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb40">
<a id="x12-19004r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  listens2Music 
</span>
<br class="fancyvrb"/>
<a id="x12-19006r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  happy 
</span>
<br class="fancyvrb"/>
<a id="x12-19008r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  playsAirGuitar 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> we should really say that it defines predicates 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb41">
<a id="x12-19010r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  listens2Music/1 
</span>
<br class="fancyvrb"/>
<a id="x12-19012r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  happy/1 
</span>
<br class="fancyvrb"/>
<a id="x12-19014r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  playsAirGuitar/1 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> And Prolog can’t get confused about a knowledge base containing the two different love predicates, for it regards the 
<span class="verb">
<span class="cmtt-10"> love/2 
</span>
</span> predicate and the 
<span class="verb">
<span class="cmtt-10"> love/3 
</span>
</span> predicate as distinct. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse3"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse1"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse1"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse2"> front 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch1"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent">
<a id="taillpn-htmlse2">
</a>
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse4"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse2"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse2"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=#taillpn-htmlse3"> tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch1"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<h3 class="sectionHead">
<span class="titlemark"> 1.3 
</span>
<a id="x13-200001.3">
</a> <strong>Exercise</strong>s 
</h3>
</div>
<div class="nb-cell html" name="htm1">
<div class="newtheorem">
<!--l. 712-->
<p class="noindent">
<span class="head">
<span class="cmbx-10"> <strong>Exercise</strong>
</span>
<span class="cmbx-10">  1.1 
</span>
</span>
<a id="x13-200011">
</a>
<span class="cmti-10"> Which of the following sequences of characters are atoms, which 
</span>
<span class="cmti-10"> are variables, and which are neither? 
</span>
</p>
<!--l. 715-->
<p class="indent">
</p>
<ol class="enumerate1">
<li class="enumerate" id="x13-20003x1">
<span class="verb">
<span class="cmtt-10"> vINCENT 
</span>
</span>
</li>
<li class="enumerate" id="x13-20005x2">
<span class="verb">
<span class="cmtt-10"> Footmassage 
</span>
</span>
</li>
<li class="enumerate" id="x13-20007x3">
<span class="verb">
<span class="cmtt-10"> variable23 
</span>
</span>
</li>
<li class="enumerate" id="x13-20009x4">
<span class="verb">
<span class="cmtt-10"> Variable2000 
</span>
</span>
</li>
<li class="enumerate" id="x13-20011x5">
<span class="verb">
<span class="cmtt-10"> big_kahuna_burger 
</span>
</span>
</li>
<li class="enumerate" id="x13-20013x6">
<span class="verb">
<span class="cmtt-10"> ’big 
</span>
<span class="cmtt-10">  kahuna 
</span>
<span class="cmtt-10">  burger’ 
</span>
</span>
</li>
<li class="enumerate" id="x13-20015x7">
<span class="verb">
<span class="cmtt-10"> big 
</span>
<span class="cmtt-10">  kahuna 
</span>
<span class="cmtt-10">  burger 
</span>
</span>
</li>
<li class="enumerate" id="x13-20017x8">
<span class="verb">
<span class="cmtt-10"> ’Jules’ 
</span>
</span>
</li>
<li class="enumerate" id="x13-20019x9">
<span class="verb">
<span class="cmtt-10"> _Jules 
</span>
</span>
</li>
<li class="enumerate" id="x13-20021x10">
<span class="verb">
<span class="cmtt-10"> ’_Jules’ 
</span>
</span>
</li>
</ol>
</div>
</div>
<div class="nb-cell html" name="htm1">
<div class="newtheorem">
<!--l. 729-->
<p class="noindent">
<span class="head">
<span class="cmbx-10"> <strong>Exercise</strong>
</span>
<span class="cmbx-10">  1.2 
</span>
</span>
<a id="x13-200222">
</a>
<span class="cmti-10"> Which of the following sequences of characters are atoms, which 
</span>
<span class="cmti-10"> are variables, which are complex terms, and which are not terms at all? Give 
</span>
<span class="cmti-10"> the functor and arity of each complex term. 
</span>
</p>
<!--l. 734-->
<p class="indent">
</p>
<ol class="enumerate1">
<li class="enumerate" id="x13-20024x1">
<span class="verb">
<span class="cmtt-10"> loves(Vincent,mia) 
</span>
</span>
</li>
<li class="enumerate" id="x13-20026x2">
<span class="verb">
<span class="cmtt-10"> ’loves(Vincent,mia)’ 
</span>
</span>
</li>
<li class="enumerate" id="x13-20028x3">
<span class="verb">
<span class="cmtt-10"> Butch(boxer) 
</span>
</span>
</li>
<li class="enumerate" id="x13-20030x4">
<span class="verb">
<span class="cmtt-10"> boxer(Butch) 
</span>
</span>
</li>
<li class="enumerate" id="x13-20032x5">
<span class="verb">
<span class="cmtt-10"> and(big(burger),kahuna(burger)) 
</span>
</span>
</li>
<li class="enumerate" id="x13-20034x6">
<span class="verb">
<span class="cmtt-10"> and(big(X),kahuna(X)) 
</span>
</span>
</li>
<li class="enumerate" id="x13-20036x7">
<span class="verb">
<span class="cmtt-10"> _and(big(X),kahuna(X)) 
</span>
</span>
</li>
<li class="enumerate" id="x13-20038x8">
<span class="verb">
<span class="cmtt-10"> (Butch 
</span>
<span class="cmtt-10">  kills 
</span>
<span class="cmtt-10">  Vincent) 
</span>
</span>
</li>
<li class="enumerate" id="x13-20040x9">
<span class="verb">
<span class="cmtt-10"> kills(Butch 
</span>
<span class="cmtt-10">  Vincent) 
</span>
</span>
</li>
<li class="enumerate" id="x13-20042x10">
<span class="verb">
<span class="cmtt-10"> kills(Butch,Vincent 
</span>
</span>
</li>
</ol>
</div>
</div>
<div class="nb-cell html" name="htm1">
<div class="newtheorem">
<!--l. 748-->
<p class="noindent">
<span class="head">
<span class="cmbx-10"> <strong>Exercise</strong>
</span>
<span class="cmbx-10">  1.3 
</span>
</span>
<a id="x13-200433">
</a>
<span class="cmti-10"> How many facts, rules, clauses, and predicates are there in the 
</span>
<span class="cmti-10"> following knowledge base? What are the heads of the rules, and what are the 
</span>
<span class="cmti-10"> goals they contain? 
</span>
</p>
<!--l. 752-->
<p class="indent">
</p>
<div class="fancyvrb" id="fancyvrb42">
<a id="x13-20045r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  woman(vincent). 
</span>
<br class="fancyvrb"/>
<a id="x13-20047r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  woman(mia). 
</span>
<br class="fancyvrb"/>
<a id="x13-20049r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  man(jules). 
</span>
<br class="fancyvrb"/>
<a id="x13-20051r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  person(X):- 
</span>
<span class="cmtt-10">  man(X); 
</span>
<span class="cmtt-10">  woman(X). 
</span>
<br class="fancyvrb"/>
<a id="x13-20053r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  loves(X,Y):- 
</span>
<span class="cmtt-10">  father(X,Y). 
</span>
<br class="fancyvrb"/>
<a id="x13-20055r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  father(Y,Z):- 
</span>
<span class="cmtt-10">  man(Y), 
</span>
<span class="cmtt-10">  son(Z,Y). 
</span>
<br class="fancyvrb"/>
<a id="x13-20057r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  father(Y,Z):- 
</span>
<span class="cmtt-10">  man(Y), 
</span>
<span class="cmtt-10">  daughter(Z,Y). 
</span>
</div>
</div>
</div>
<div class="nb-cell html" name="htm1">
<div class="newtheorem">
<!--l. 763-->
<p class="noindent">
<span class="head">
<span class="cmbx-10"> <strong>Exercise</strong>
</span>
<span class="cmbx-10">  1.4 
</span>
</span>
<a id="x13-200584">
</a>
<span class="cmti-10"> Represent the following in Prolog: 
</span>
</p>
<!--l. 765-->
<p class="indent">
</p>
<ol class="enumerate1">
<li class="enumerate" id="x13-20060x1">
<span class="cmti-10"> Butch is a killer. 
</span>
</li>
<li class="enumerate" id="x13-20062x2">
<span class="cmti-10"> Mia and Marsellus are married. 
</span>
</li>
<li class="enumerate" id="x13-20064x3">
<span class="cmti-10"> Zed is dead. 
</span>
</li>
<li class="enumerate" id="x13-20066x4">
<span class="cmti-10"> Marsellus kills everyone who gives Mia a footmassage. 
</span>
</li>
<li class="enumerate" id="x13-20068x5">
<span class="cmti-10"> Mia loves everyone who is a good dancer. 
</span>
</li>
<li class="enumerate" id="x13-20070x6">
<span class="cmti-10"> Jules eats anything that is nutritious or tasty. 
</span>
</li>
</ol>
</div>
</div>
<div class="nb-cell html" name="htm1">
<div class="newtheorem">
<!--l. 775-->
<p class="noindent">
<span class="head">
<span class="cmbx-10"> <strong>Exercise</strong>
</span>
<span class="cmbx-10">  1.5 
</span>
</span>
<a id="x13-200715">
</a>
<span class="cmti-10"> Suppose we are working with the following knowledge base: 
</span>
</p>
<!--l. 777-->
<p class="indent">
</p>
<div class="fancyvrb" id="fancyvrb43">
<a id="x13-20073r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  wizard(ron). 
</span>
<br class="fancyvrb"/>
<a id="x13-20075r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  hasWand(harry). 
</span>
<br class="fancyvrb"/>
<a id="x13-20077r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  quidditchPlayer(harry). 
</span>
<br class="fancyvrb"/>
<a id="x13-20079r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  wizard(X):- 
</span>
<span class="cmtt-10">  hasBroom(X), 
</span>
<span class="cmtt-10">  hasWand(X). 
</span>
<br class="fancyvrb"/>
<a id="x13-20081r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  hasBroom(X):- 
</span>
<span class="cmtt-10">  quidditchPlayer(X). 
</span>
</div>
<!--l. 786-->
<p class="indent">
<span class="cmti-10"> How does Prolog respond to the following queries? 
</span>
</p>
<ol class="enumerate1">
<li class="enumerate" id="x13-20083x1">
<span class="verb">
<span class="cmtt-10"> wizard(ron). 
</span>
</span>
</li>
<li class="enumerate" id="x13-20085x2">
<span class="verb">
<span class="cmtt-10"> witch(ron). 
</span>
</span>
</li>
<li class="enumerate" id="x13-20087x3">
<span class="verb">
<span class="cmtt-10"> wizard(hermione). 
</span>
</span>
</li>
<li class="enumerate" id="x13-20089x4">
<span class="verb">
<span class="cmtt-10"> witch(hermione). 
</span>
</span>
</li>
<li class="enumerate" id="x13-20091x5">
<span class="verb">
<span class="cmtt-10"> wizard(harry). 
</span>
</span>
</li>
<li class="enumerate" id="x13-20093x6">
<span class="verb">
<span class="cmtt-10"> wizard(Y). 
</span>
</span>
</li>
<li class="enumerate" id="x13-20095x7">
<span class="verb">
<span class="cmtt-10"> witch(Y). 
</span>
</span>
</li>
</ol>
</div>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse4"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse2"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse2"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse3"> front 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch1"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent">
<a id="taillpn-htmlse3">
</a>
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse3"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse3"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=#taillpn-htmlse4"> tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch1"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<h3 class="sectionHead">
<span class="titlemark"> 1.4 
</span>
<a id="x14-210001.4">
</a> Practical Session 
</h3>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Don’t be fooled by the fact that the description of the practical sessions is shorter than the text you have just read; the practical part is definitely the most important. Yes, you need to read the text and do the exercises, but that’s not enough to become a Prolog programmer. To really master the language you need to sit down in front of a computer and play with Prolog — a lot! 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> The goal of the first practical session is for you to become familiar with the basics of how to create and run simple Prolog programs. Now, because there are many different implementations of Prolog, and different operating systems you can run them under, we can’t be too specific here. Rather, what we’ll do is describe in very general terms what is involved in running Prolog, list the practical skills you need to master, and suggest some things for you to do. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> The simplest way to run a Prolog program is as follows. You have a file with your Prolog program in it (for example, you may have a file 
<span class="verb">
<span class="cmtt-10"> kb2.pl 
</span>
</span> which contains the knowledge base KB2). You then start Prolog. Prolog will display its prompt, something like 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb44">
<a id="x14-21002r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> which indicates that it is ready to accept a query. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Now, at this stage, Prolog knows absolutely nothing about KB2 (or indeed anything else). To see this, type in the command 
<span class="verb">
<span class="cmtt-10"> listing 
</span>
</span> , 
<a id="dx14-21003">
</a> followed by a full stop, and hit return. That is, type 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb45">
<a id="x14-21005r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  listing. 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> and press the return key. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Now, the listing command is a special built-in Prolog predicate that instructs Prolog to display the contents of the current knowledge base. But we haven’t yet told Prolog about any knowledge bases, so it will just say 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb46">
<a id="x14-21007r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> This is a correct answer: as yet Prolog knows nothing — so it correctly displays all this nothing and says 
<span class="verb">
<span class="cmtt-10"> yes 
</span>
</span> . Actually, with more sophisticated Prolog implementations you may get a little more (for example, the names of libraries that have been loaded; libraries are discussed in Chapter  
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch12"> 12 
<!--tex4ht:ref: CHAPTER12 -->
</a> ) but, one way or another, you will receive what is essentially an “I know nothing about any knowledge bases!” answer. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> So let’s tell Prolog about KB2. Assuming that you’ve stored KB2 in the file 
<span class="verb">
<span class="cmtt-10"> kb2.pl 
</span>
</span> , and that this file is in the directory where you’re running Prolog, all you have to type is 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb47">
<a id="x14-21009r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  [kb2]. 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> This tells Prolog to consult the file 
<span class="verb">
<span class="cmtt-10"> kb2.pl 
</span>
</span> , and load the contents as its new knowledge base. Assuming that 
<span class="verb">
<span class="cmtt-10"> kb2.pl 
</span>
</span> contains no typos, Prolog will read it in, maybe print out a message saying that it is consulting this file, and then answer: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb48">
<a id="x14-21011r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Incidentally, it is common to store Prolog code in files with a 
<span class="verb">
<span class="cmtt-10"> .pl 
</span>
</span> suffix. It’s an indication of what the file contains (namely Prolog code) and with some Prolog implementations you don’t actually have to type in the 
<span class="verb">
<span class="cmtt-10"> .pl 
</span>
</span> suffix when you consult a file. Nice — but there is a drawback. Files containing Perl scripts usually have a 
<span class="verb">
<span class="cmtt-10"> .pl 
</span>
</span> suffix too, and nowadays there are a lot of Perl scripts in use, so this can cause confusion. C’est la vie. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> If the above doesn’t work, that is, if typing 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb49">
<a id="x14-21013r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  [kb2]. 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> produces an error message saying that the file 
<span class="verb">
<span class="cmtt-10"> kb2 
</span>
</span> does not exist, then you probably haven’t started Prolog from the directory where 
<span class="verb">
<span class="cmtt-10"> kb2.pl 
</span>
</span> is stored. In that case, you can either stop Prolog (by typing 
<span class="verb">
<span class="cmtt-10"> halt. 
</span>
</span> after the prompt), change to the directory where 
<span class="verb">
<span class="cmtt-10"> kb2.pl 
</span>
</span> is stored, and start Prolog again. Or you can tell Prolog exactly where to look for 
<span class="verb">
<span class="cmtt-10"> kb2.pl 
</span>
</span> . To do this, instead of writing only 
<span class="verb">
<span class="cmtt-10"> kb2 
</span>
</span> between the square brackets, you give Prolog the whole path enclosed in single quotes. For example, you type something like 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb50">
<a id="x14-21015r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  [’home/kris/Prolog/kb2.pl’]. 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> or 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb51">
<a id="x14-21017r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  [’c:/Documents 
</span>
<span class="cmtt-10">  and 
</span>
<span class="cmtt-10">  Settings/Kris/Prolog/kb2.pl’]. 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Ok, so Prolog should now know about all the KB2 predicates. And we can check whether it does by using the 
<span class="verb">
<span class="cmtt-10"> listing 
</span>
</span> command again: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb52">
<a id="x14-21019r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  listing. 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> If you do this, Prolog will list (something like) the following on the screen: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb53">
<a id="x14-21021r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  listens2Music(mia). 
</span>
<br class="fancyvrb"/>
<a id="x14-21023r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  happy(yolanda). 
</span>
<br class="fancyvrb"/>
<a id="x14-21025r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  playsAirGuitar(mia):- 
</span>
<br class="fancyvrb"/>
<a id="x14-21027r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  listens2Music(mia). 
</span>
<br class="fancyvrb"/>
<a id="x14-21029r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  playsAirGuitar(yolanda):- 
</span>
<br class="fancyvrb"/>
<a id="x14-21031r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  listens2Music(yolanda). 
</span>
<br class="fancyvrb"/>
<a id="x14-21033r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  listens2Music(yolanda):- 
</span>
<br class="fancyvrb"/>
<a id="x14-21035r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  happy(yolanda). 
</span>
<br class="fancyvrb"/>
<a id="x14-21037r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x14-21039r10">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> That is, it will list the facts and rules that make up KB2, and then say 
<span class="verb">
<span class="cmtt-10"> yes 
</span>
</span> . Once again, you may get a little more than this, such as the locations of various libraries that have been loaded. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Incidentally, 
<span class="verb">
<span class="cmtt-10"> listing 
</span>
</span> can be used in other ways. For example, typing 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb54">
<a id="x14-21041r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  listing(playsAirGuitar). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> simply lists all the information in the knowledge base about the 
<span class="verb">
<span class="cmtt-10"> playsAirGuitar 
</span>
</span> predicate. So in this case Prolog will display 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb55">
<a id="x14-21043r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  playsAirGuitar(mia):- 
</span>
<br class="fancyvrb"/>
<a id="x14-21045r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  listens2Music(mia). 
</span>
<br class="fancyvrb"/>
<a id="x14-21047r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  playsAirGuitar(yolanda):- 
</span>
<br class="fancyvrb"/>
<a id="x14-21049r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  listens2Music(yolanda). 
</span>
<br class="fancyvrb"/>
<a id="x14-21051r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x14-21053r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Well — now you’re ready to go. KB2 is loaded and Prolog is running, so you can (and should!) start making exactly the sort of inquiries we discussed in the text. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> But let’s back up a little, and summarise a few of the practical skills you will need to master to get this far: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<ul class="itemize1">
<li class="itemize"> You will need to know some basic facts about the operating system you are using, such as the directory structure it uses. After all, you will need to know how to save the files containing programs where you want them. 
</li>
<li class="itemize"> You will need to know how to use some sort of text editor, in order to write and modify programs. Some Prolog implementations come with built-in text editors, but if you already know a text editor (such as Emacs) you can use this to write your Prolog code. Just make sure that you save your files as simple text files (for example, if you are working under Windows, don’t save them as Word documents). 
</li>
<li class="itemize"> You may want to take example Prolog programs from the internet. So make sure you know how to use a browser to find what you want, and to store the code where you want it. 
</li>
<li class="itemize"> You need to know how to start your version of Prolog, and how to consult files with it. 
</li>
</ul>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> The sooner you pick up these skills, the better. With them out of the way (which shouldn’t take long) you can start concentrating on mastering Prolog (which will take longer). 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> But assuming you have mastered these skills, what next? Quite simply, 
<span class="cmti-10"> play with 
</span>
<span class="cmti-10"> Prolog! 
</span> Consult the various knowledge bases discussed in the text, and check that the queries discussed really do work the way we said they did. In particular, take a look at KB5 and make sure you understand why you get those peculiar jealousy relations. Try posing new queries. Experiment with the 
<span class="verb">
<span class="cmtt-10"> listing 
</span>
</span> predicate (it’s a useful tool). Type in the knowledge base used in <strong>Exercise</strong>  
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse3"> 1.5 
<!--tex4ht:ref: L1.EX5 -->
</a> , and check whether your answers are correct. Best of all, think of some simple situation that interests you, and create a brand-new knowledge base from scratch. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse3"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse3"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse4"> front 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch1"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent">
<a id="taillpn-htmlse4">
</a>
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse6"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=#taillpn-htmlse5"> tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch2"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<h3 class="sectionHead">
<span class="titlemark"> 2.1 
</span>
<a id="x16-230002.1">
</a> Unification 
</h3>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> When working with knowledge base KB4 in the previous chapter, we briefly mentioned the idea of unification. We said, for example, that Prolog unifies 
<span class="verb">
<span class="cmtt-10"> woman(X) 
</span>
</span> with 
<span class="verb">
<span class="cmtt-10"> woman(mia) 
</span>
</span> , thereby instantiating the variable 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> to 
<span class="verb">
<span class="cmtt-10"> mia 
</span>
</span> . It’s now time to take a closer look at unification, for it is one of the most fundamental ideas in Prolog. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Recall that there are three types of term: 
</p>
</div>

<div class="nb-cell html" name="htm1">
<ol class="enumerate1">
<li class="enumerate" id="x16-23002x1"> Constants. These can either be atoms (such as 
<span class="verb">
<span class="cmtt-10"> vincent 
</span>
</span> ) or numbers (such as 
<span class="verb">
<span class="cmtt-10"> 24 
</span>
</span> ). 
</li>
<li class="enumerate" id="x16-23004x2"> Variables. (Such as 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> Z3 
</span>
</span> , and 
<span class="verb">
<span class="cmtt-10"> List 
</span>
</span> .) 
</li>
<li class="enumerate" id="x16-23006x3"> Complex terms. These have the form: 
<br class="newline"/>
<span class="verb">
<span class="cmtt-10"> functor(term_1,...,term_n) 
</span>
</span> . 
</li>
</ol>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> We are going to work our way towards a definition of when Prolog will unify two terms. Our starting point will be the following working definition. It gives the basic intuition, but is a little light on detail: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="center">
<!--l. 48-->
<p class="noindent">
</p>
<!--l. 52-->
<p class="noindent">
<span class="cmti-10"> Two terms unify if they are the same term or if they contain variables 
</span>
<span class="cmti-10"> that can be uniformly instantiated with terms in such a way that the 
</span>
<span class="cmti-10"> resulting terms are equal. 
</span>
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> This means, for example, that the terms 
<span class="verb">
<span class="cmtt-10"> mia 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> mia 
</span>
</span> unify, because they are the same atom. Similarly, the terms 
<span class="verb">
<span class="cmtt-10"> 42 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> 42 
</span>
</span> unify, because they are the same number, the terms 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> unify, because they are the same variable, and the terms 
<span class="verb">
<span class="cmtt-10"> woman(mia) 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> woman(mia) 
</span>
</span> unify, because they are the same complex term. The terms 
<span class="verb">
<span class="cmtt-10"> woman(mia) 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> woman(vincent) 
</span>
</span> , however, do not unify, as they are not the same (and neither of them contains a variable that could be instantiated to make them the same). 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Now, what about the terms 
<span class="verb">
<span class="cmtt-10"> mia 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> ? They are not the same. However, the variable 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> can be instantiated to 
<span class="verb">
<span class="cmtt-10"> mia 
</span>
</span> which makes them equal. So, by the second part of our working definition, 
<span class="verb">
<span class="cmtt-10"> mia 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> unify. Similarly, the terms 
<span class="verb">
<span class="cmtt-10"> woman(X) 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> woman(mia) 
</span>
</span> unify, because they can be made equal by instantiating 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> to 
<span class="verb">
<span class="cmtt-10"> mia 
</span>
</span> . How about 
<span class="verb">
<span class="cmtt-10"> loves(vincent,X) 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> loves(X,mia) 
</span>
</span> ? No. It is impossible to find an instantiation of 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> that makes the two terms equal. Do you see why? Instantiating 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> to 
<span class="verb">
<span class="cmtt-10"> vincent 
</span>
</span> would give us the terms 
<span class="verb">
<span class="cmtt-10"> loves(vincent,vincent) 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> loves(vincent,mia) 
</span>
</span> , which are obviously not equal. However, instantiating 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> to mia, would yield the terms 
<span class="verb">
<span class="cmtt-10"> loves(vincent,mia) 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> loves(mia,mia) 
</span>
</span> , which aren’t equal either. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Usually we are not only interested in the fact that two terms unify, we also want to know how the variables have to be instantiated to make them equal. And Prolog gives us this information. When Prolog unifies two terms it performs all the necessary instantiations, so that the terms really are equal afterwards. This functionality, together with the fact that we are allowed to build complex terms (that is, recursively structured terms) makes unification a powerful programming mechanism. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> The basic intuitions should now be clear. Here’s the definition which makes them precise. It tells us not only which terms Prolog will unify, but also what it will do to the variables to achieve this. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<ol class="enumerate1">
<li class="enumerate" id="x16-23008x1">
<span class="cmti-10"> If 
</span>
<span class="verb">
<span class="cmtt-10"> term1 
</span>
</span>
<span class="cmti-10"> and 
</span>
<span class="verb">
<span class="cmtt-10"> term2 
</span>
</span>
<span class="cmti-10"> are constants, then 
</span>
<span class="verb">
<span class="cmtt-10"> term1 
</span>
</span>
<span class="cmti-10"> and 
</span>
<span class="verb">
<span class="cmtt-10"> term2 
</span>
</span>
<span class="cmti-10"> unify if and 
</span>
<span class="cmti-10"> only if they are the same atom, or the same number. 
</span>
</li>
<li class="enumerate" id="x16-23010x2">
<span class="cmti-10"> If 
</span>
<span class="verb">
<span class="cmtt-10"> term1 
</span>
</span>
<span class="cmti-10"> is a variable and 
</span>
<span class="verb">
<span class="cmtt-10"> term2 
</span>
</span>
<span class="cmti-10"> is any type of term, then 
</span>
<span class="verb">
<span class="cmtt-10"> term1 
</span>
</span>
<span class="cmti-10"> and 
</span>
<span class="verb">
<span class="cmtt-10"> term2 
</span>
</span>
<span class="cmti-10"> unify, and 
</span>
<span class="verb">
<span class="cmtt-10"> term1 
</span>
</span>
<span class="cmti-10"> is instantiated to 
</span>
<span class="verb">
<span class="cmtt-10"> term2 
</span>
</span> . 
<span class="cmti-10"> Similarly, if 
</span>
<span class="verb">
<span class="cmtt-10"> term2 
</span>
</span>
<span class="cmti-10"> is a 
</span>
<span class="cmti-10"> variable and 
</span>
<span class="verb">
<span class="cmtt-10"> term1 
</span>
</span>
<span class="cmti-10"> is any type of term, then 
</span>
<span class="verb">
<span class="cmtt-10"> term1 
</span>
</span>
<span class="cmti-10"> and 
</span>
<span class="verb">
<span class="cmtt-10"> term2 
</span>
</span>
<span class="cmti-10"> unify, and 
</span>
<span class="verb">
<span class="cmtt-10"> term2 
</span>
</span>
<span class="cmti-10"> is instantiated to 
</span>
<span class="verb">
<span class="cmtt-10"> term1 
</span>
</span> . 
<span class="cmti-10"> (So if they are both variables, they’re both 
</span>
<span class="cmti-10"> instantiated to each other, and we say that they share values.) 
</span>
</li>
<li class="enumerate" id="x16-23012x3">
<span class="cmti-10"> If 
</span>
<span class="verb">
<span class="cmtt-10"> term1 
</span>
</span>
<span class="cmti-10"> and 
</span>
<span class="verb">
<span class="cmtt-10"> term2 
</span>
</span>
<span class="cmti-10"> are complex terms, then they unify if and only 
</span>
<span class="cmti-10"> if: 
</span>
<ol class="enumerate2">
<li class="enumerate" id="x16-23014x1">
<span class="cmti-10"> They have the same functor and arity, and 
</span>
</li>
<li class="enumerate" id="x16-23016x2">
<span class="cmti-10"> all their corresponding arguments unify, and 
</span>
</li>
<li class="enumerate" id="x16-23018x3">
<span class="cmti-10"> the variable instantiations are compatible. (For example, it is not 
</span>
<span class="cmti-10"> possible to instantiate variable 
</span>
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span>
<span class="cmti-10"> to 
</span>
<span class="verb">
<span class="cmtt-10"> mia 
</span>
</span>
<span class="cmti-10"> when unifying one pair of 
</span>
<span class="cmti-10"> arguments, and to instantiate 
</span>
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span>
<span class="cmti-10"> to 
</span>
<span class="verb">
<span class="cmtt-10"> vincent 
</span>
</span>
<span class="cmti-10"> when unifying another 
</span>
<span class="cmti-10"> pair of arguments 
</span> .) 
</li>
</ol>
</li>
<li class="enumerate" id="x16-23020x4">
<span class="cmti-10"> Two terms unify if and only if it follows from the previous three clauses that 
</span>
<span class="cmti-10"> they unify. 
</span>
</li>
</ol>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Let’s have a look at the form of this definition. The first clause tells us when two constants unify. The second clause tells us when two terms, one of which is a variable, unify (such terms will always unify; variables unify with 
<span class="cmti-10"> anything 
</span> ). Just as importantly, this clause also tells what instantiations we have to perform to make the two terms the same. Finally, the third clause tells us when two complex terms unify. Note the structure of this definition. Its first three clauses mirror perfectly the (recursive) structure of terms. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> The fourth clause is also important: it says that the first three clauses tell us all we need to know about the unification of two terms. If two terms can’t be shown to unify using clauses 1–3, then they 
<span class="cmti-10"> don’t 
</span> unify. For example, 
<span class="verb">
<span class="cmtt-10"> batman 
</span>
</span> does not unify with 
<span class="verb">
<span class="cmtt-10"> daughter(ink) 
</span>
</span> . Why not? Well, the first term is a constant, and the second is a complex term. But none of the first three clauses tell us how to unify two such terms, hence (by clause 4) they don’t unify. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent">
</p>
</div>
<div class="nb-cell html" name="htm1">
<h4 class="likesubsectionHead">
<a id="x16-240002.1">
</a> Examples 
</h4>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> To make sure we’ve fully understood this definition, let’s work through several examples. In these examples we’ll make use of an important built-in predicate, the 
<span class="verb">
<span class="cmtt-10"> =/2 
</span>
</span> predicate (recall that writing 
<a id="dx16-24001">
</a>
<span class="verb">
<span class="cmtt-10"> /2 
</span>
</span> at the end indicates that this predicate takes two arguments). 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> The 
<span class="verb">
<span class="cmtt-10"> =/2 
</span>
</span> predicate tests whether its two arguments unify. For example, if we pose the query 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb56">
<a id="x16-24003r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  =(mia,mia). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Prolog will respond yes, and if we pose the query 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb57">
<a id="x16-24005r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  =(mia,vincent). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Prolog will respond no. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> But we usually wouldn’t pose these queries in quite this way. Let’s face it, the notation 
<span class="verb">
<span class="cmtt-10"> =(mia,mia) 
</span>
</span> is rather unnatural. It would be nicer if we could use infix notation (that is, if we could put the 
<span class="verb">
<span class="cmtt-10"> =/2 
</span>
</span> functor between its arguments) and write things like: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb58">
<a id="x16-24007r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  mia 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  mia. 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> In fact, Prolog lets us do this, so in the examples that follow we’ll use infix notation. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Let’s return to our first example: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb59">
<a id="x16-24009r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  mia 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  mia. 
</span>
<br class="fancyvrb"/>
<a id="x16-24011r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Why does Prolog say yes? This may seem like a silly question: surely it’s obvious that the terms unify! That’s true, but how does this follow from the definition given above? It is important to learn to think systematically about unification (it is utterly fundamental to Prolog), and thinking systematically means relating the examples to the definition of unification given above. So let’s think this example through. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> The definition has three clauses. Now, clause 2 is for when one argument is a variable, and clause 3 is for when both arguments are complex terms, so these are of no use here. However clause 1 
<span class="cmti-10"> is 
</span> relevant to our example. This tells us that two constants unify if and only if they are exactly the same object. As 
<span class="verb">
<span class="cmtt-10"> mia 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> mia 
</span>
</span> are the same atom, unification succeeds. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> A similar argument explains the following responses: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb60">
<a id="x16-24013r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  2 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  2. 
</span>
<br class="fancyvrb"/>
<a id="x16-24015r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x16-24017r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x16-24019r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  mia 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  vincent. 
</span>
<br class="fancyvrb"/>
<a id="x16-24021r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  no 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Once again, clause 1 is relevant here (after all, 
<span class="verb">
<span class="cmtt-10"> 2 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> mia 
</span>
</span> , and 
<span class="verb">
<span class="cmtt-10"> vincent 
</span>
</span> are all constants). And as 
<span class="verb">
<span class="cmtt-10"> 2 
</span>
</span> is the same number as 
<span class="verb">
<span class="cmtt-10"> 2 
</span>
</span> , and as 
<span class="verb">
<span class="cmtt-10"> mia 
</span>
</span> is 
<span class="cmti-10"> not 
</span> the same atom as 
<span class="verb">
<span class="cmtt-10"> vincent 
</span>
</span> , Prolog responds yes to the first query and no to the second. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> However clause 1 does hold one small surprise for us. Consider the following query: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb61">
<a id="x16-24023r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  ’mia’ 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  mia. 
</span>
<br class="fancyvrb"/>
<a id="x16-24025r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> What’s going on here? Why do these two terms unify? Well, as far as Prolog is concerned, 
<span class="verb">
<span class="cmtt-10"> ’mia’ 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> mia 
</span>
</span> are the same atom. In fact, for Prolog, any atom of the form 
<span class="verb">
<span class="cmtt-10"> ’symbols’ 
</span>
</span> is considered the same entity as the atom of the form 
<span class="verb">
<span class="cmtt-10"> symbols 
</span>
</span> . This can be a useful feature in certain kinds of programs, so don’t forget it. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> On the other hand, to the query 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb62">
<a id="x16-24027r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  ’2’ 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  2. 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Prolog will respond no. And if you think about the definitions given in Chapter  
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch1"> 1 
<!--tex4ht:ref: CHAPTER1 -->
</a> , you will see that this has to be the way things work. After all, 
<span class="verb">
<span class="cmtt-10"> 2 
</span>
</span> is a number, but 
<span class="verb">
<span class="cmtt-10"> ’2’ 
</span>
</span> is an atom. They simply cannot be the same. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Let’s try an example with a variable: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb63">
<a id="x16-24029r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  mia 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  X. 
</span>
<br class="fancyvrb"/>
<a id="x16-24031r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x16-24033r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  mia 
</span>
<br class="fancyvrb"/>
<a id="x16-24035r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Again, this in an easy example: clearly the variable 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> can be unified with the constant 
<span class="verb">
<span class="cmtt-10"> mia 
</span>
</span> , and Prolog does so, and tells us that it has made this unification. Fine, but how does this follow from our definition? 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> The relevant clause here is clause 2. This tells us what happens when at least one of the arguments is a variable. In our example it is the second term which is the variable. The definition tells us unification is possible, and also says that the variable is instantiated to the first argument, namely 
<span class="verb">
<span class="cmtt-10"> mia 
</span>
</span> . And this, of course, is exactly what Prolog does. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Now for an important example: what happens with the following query? 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb64">
<a id="x16-24037r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  Y. 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Well, depending on your Prolog implementation, you may just get back the output 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb65">
<a id="x16-24039r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  Y. 
</span>
<br class="fancyvrb"/>
<a id="x16-24041r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Prolog is simply agreeing that the two terms unify (after all, variables unify with anything, so they certainly unify with each other) and making a note that from now on, 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> Y 
</span>
</span> denote the same object, that is, share values. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> On the other hand, you may get the following output: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb66">
<a id="x16-24043r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  _5071 
</span>
<br class="fancyvrb"/>
<a id="x16-24045r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Y 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  _5071 
</span>
<br class="fancyvrb"/>
<a id="x16-24047r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> What’s going on here? Essentially the same thing. Note that 
<span class="verb">
<span class="cmtt-10"> _5071 
</span>
</span> is a variable (recall from Chapter  
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch1"> 1 
<!--tex4ht:ref: CHAPTER1 -->
</a> that strings of letters and numbers that start with the underscore character are variables). Now look at clause 2 of the definition of unification. This tells us that when two variables are unified, they share values. So Prolog has created a new variable (namely 
<span class="verb">
<span class="cmtt-10"> _5071 
</span>
</span> ) and from now on both 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> Y 
</span>
</span> share the value of this variable. In effect, Prolog is creating a common variable name for the two original variables. Needless to say, there’s nothing magic about the number 
<span class="verb">
<span class="cmtt-10"> 5071 
</span>
</span> . Prolog just needs to generate a brand new variable name, and using numbers is a handy way to do this. It might just as well generate 
<span class="verb">
<span class="cmtt-10"> _5075 
</span>
</span> , or 
<span class="verb">
<span class="cmtt-10"> _6189 
</span>
</span> , or whatever. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Here is another example involving only atoms and variables. How do you think will Prolog respond? 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb67">
<a id="x16-24049r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  mia, 
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  vincent. 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Prolog will respond no. This query involves two goals, 
<span class="verb">
<span class="cmtt-10"> X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  mia 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  vincent 
</span>
</span> . Taken separately, Prolog would succeed at both of them, instantiating 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> to 
<span class="verb">
<span class="cmtt-10"> mia 
</span>
</span> in the first case and to 
<span class="verb">
<span class="cmtt-10"> vincent 
</span>
</span> in the second. And that’s exactly the problem here: once Prolog has worked through the first goal, 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> is instantiated to (and therefore equal to) 
<span class="verb">
<span class="cmtt-10"> mia 
</span>
</span> , so that it simply can’t unify with 
<span class="verb">
<span class="cmtt-10"> vincent 
</span>
</span> anymore. Hence the second goal fails. An 
<span class="cmti-10"> instantiated 
</span> variable isn’t really a variable anymore: it has become what it was instantiated with. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Now let’s look at an example involving complex terms: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb68">
<a id="x16-24051r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  k(s(g),Y) 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  k(X,t(k)). 
</span>
<br class="fancyvrb"/>
<a id="x16-24053r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x16-24055r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  s(g) 
</span>
<br class="fancyvrb"/>
<a id="x16-24057r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Y 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  t(k) 
</span>
<br class="fancyvrb"/>
<a id="x16-24059r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Clearly the two complex terms unify if the stated variable instantiations are carried out. But how does this follow from the definition? Well, first of all, clause 3 has to be used here because we are trying to unify two complex terms. So the first thing we need to do is check that both complex terms have the same functor and arity. And they do. Clause 3 also tells us that we have to unify the corresponding arguments in each complex term. So do the first arguments, 
<span class="verb">
<span class="cmtt-10"> s(g) 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> , unify? By clause 2, yes, and we instantiate 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> to 
<span class="verb">
<span class="cmtt-10"> s(g) 
</span>
</span> . So do the second arguments, 
<span class="verb">
<span class="cmtt-10"> Y 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> t(k) 
</span>
</span> , unify? Again by clause 2, yes, and we instantiate 
<span class="verb">
<span class="cmtt-10"> Y 
</span>
</span> to 
<span class="verb">
<span class="cmtt-10"> t(k) 
</span>
</span> . 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Here’s another example with complex terms: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb69">
<a id="x16-24061r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  k(s(g), 
</span>
<span class="cmtt-10">  t(k)) 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  k(X,t(Y)). 
</span>
<br class="fancyvrb"/>
<a id="x16-24063r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x16-24065r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  s(g) 
</span>
<br class="fancyvrb"/>
<a id="x16-24067r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Y 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  k 
</span>
<br class="fancyvrb"/>
<a id="x16-24069r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> It should be clear that the two terms unify if these instantiations are carried out. But can you explain, step by step, how this relates to the definition? 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Here is a last example: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb70">
<a id="x16-24071r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  loves(X,X) 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  loves(marcellus,mia). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Do these terms unify? No, they don’t. It’s true that they are both complex terms and have the same functor and arity, but clause 3 also demands that all corresponding arguments have to unify, and that the variable instantiations have to be compatible. This is not the case here. Unifying the first arguments would instantiate 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> with 
<span class="verb">
<span class="cmtt-10"> marcellus 
</span>
</span> . Unifying the second arguments would instantiate 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> with 
<span class="verb">
<span class="cmtt-10"> mia 
</span>
</span> . Either way, we’re blocked. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent">
</p>
</div>
<div class="nb-cell html" name="htm1">
<h4 class="likesubsectionHead">
<a id="x16-250002.1">
</a> The occurs check 
</h4>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Unification is a well-known concept, used in several branches of computer science. It has been thoroughly studied, and many unification algorithms are known. But Prolog does 
<span class="cmti-10"> not 
</span> use a standard unification algorithm when it performs its version of unification. Instead it takes a shortcut. You need to know about this shortcut. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Consider the following query: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb71">
<a id="x16-25002r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  father(X) 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  X. 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Do these terms unify or not? A standard unification algorithm would say: “No, they don’t”. Why is that? Well, pick any term and instantiate 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> to the term you picked. For example, if you instantiate 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> to 
<span class="verb">
<span class="cmtt-10"> father(father(butch)) 
</span>
</span> , the left hand side becomes 
<span class="verb">
<span class="cmtt-10"> father(father(father(butch))) 
</span>
</span> , and the right hand side becomes 
<span class="verb">
<span class="cmtt-10"> father(father(butch)) 
</span>
</span> . Obviously these don’t unify. Moreover, it makes no difference what term you instantiate 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> to. No matter what you choose, the two terms cannot possibly be made the same, for the term on the left will always be one symbol longer than the term on the right (the functor 
<span class="verb">
<span class="cmtt-10"> father 
</span>
</span> on the left will always give it that one extra level). A standard unification algorithm will spot this (we’ll see why shortly when we discuss the occurs check), halt, and tell us no. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> The recursive definition of Prolog unification given earlier won’t do this. Because the left hand term is the variable 
<span class="cmtt-10"> X 
</span> , by clause 2 it decides that the terms 
<span class="cmti-10"> do 
</span> unify, and (in accordance with clause 2) instantiates 
<span class="cmtt-10"> X 
</span> to the right hand side, namely 
<span class="cmtt-10"> father(X) 
</span> . But there’s an 
<span class="cmtt-10"> X 
</span> in this term, and 
<span class="cmtt-10"> X 
</span> has been instantiated to 
<span class="cmtt-10"> father(X) 
</span> , so Prolog realises that 
<span class="cmtt-10"> father(X) 
</span> is really 
<span class="cmtt-10"> father(father(X)) 
</span> . But there’s an 
<span class="cmtt-10"> X 
</span> here too, and 
<span class="cmtt-10"> X 
</span> has been instantiated to 
<span class="cmtt-10"> father(X) 
</span> , so Prolog realises that 
<span class="cmtt-10"> father(father(X)) 
</span> is really 
<span class="cmtt-10"> father(father(father(X))) 
</span> , and so on. Having instantiated 
<span class="cmtt-10"> X 
</span> to 
<span class="cmtt-10"> father(X) 
</span> , Prolog is committed to carrying out an unending sequence of expansions. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> At least, that’s the theory. What happens in practice? Well, with older Prolog implementations, what we’ve just described is exactly what happens. You would get a message like: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb72">
<a id="x16-25004r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Not 
</span>
<span class="cmtt-10">  enough 
</span>
<span class="cmtt-10">  memory 
</span>
<span class="cmtt-10">  to 
</span>
<span class="cmtt-10">  complete 
</span>
<span class="cmtt-10">  query! 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> and a long string of symbols like: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb73">
<a id="x16-25006r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  father(father(father(father(father(father 
</span>
<br class="fancyvrb"/>
<a id="x16-25008r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  (father(father(father(father(father(father 
</span>
<br class="fancyvrb"/>
<a id="x16-25010r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  (father(father(father(father(father(father 
</span>
<br class="fancyvrb"/>
<a id="x16-25012r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  (father(father(father(father(father(father 
</span>
<br class="fancyvrb"/>
<a id="x16-25014r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  (father(father(father(father(father(father 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Prolog is desperately 
<span class="cmti-10"> trying 
</span> to come back with the correctly instantiated terms, but it can’t halt, because the instantiation process is unbounded. From an abstract mathematical perspective, what Prolog is trying to do is sensible. Intuitively, the only way the two terms could be made to unify would be if 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> was instantiated to a term containing an infinitely long string of 
<span class="verb">
<span class="cmtt-10"> father 
</span>
</span> functors, so that the effect of the extra 
<span class="verb">
<span class="cmtt-10"> father 
</span>
</span> functor on the left hand side was cancelled out. But the terms we compute with are 
<span class="cmti-10"> finite 
</span> entities. Infinite terms are an interesting mathematical abstraction, but they’re not something we can work with. No matter how hard Prolog tries, it can never build one. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Now, it’s annoying to have Prolog running out of memory like this, and sophisticated Prolog implementations have found ways of coping more gracefully. Try posing the query 
<span class="verb">
<span class="cmtt-10"> father(X) 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  X 
</span>
</span> to SWI Prolog or SICStus Prolog. The answer will be something like: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb74">
<a id="x16-25016r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  father(father(father(father(...)))))))) 
</span>
<br class="fancyvrb"/>
<a id="x16-25018r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> That is, these implementations insist that unification 
<span class="cmti-10"> is 
</span> possible, but they 
<span class="cmti-10"> don’t 
</span> fall into the trap of actually trying to instantiate a finite term for 
<span class="cmtt-10"> X 
</span> as the naive implementations do. Instead, they detect that there is a potential problem, halt, declare that unification is possible, and print out a finite representation of an infinite term, like the 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb75">
<a id="x16-25020r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  father(father(father(father(...)))))))) 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> in the previous query. Can you compute with these finite representations of infinite terms? That depends on the implementation. In some systems you cannot do much with them. For example, posing the query 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb76">
<a id="x16-25022r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  father(X), 
</span>
<span class="cmtt-10">  Y 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  father(Y), 
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  Y. 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> would result in a crash (note that the 
<span class="cmtt-10"> X = Y 
</span> demands that we unify two finite representations of infinite terms). Nonetheless, in some modern systems unification works robustly with such representations (for example, both SWI and Sicstus can handle the previous example) so you can actually use them in your programs. However, why you might want to use such representations, and what such representations actually are, are topics that lie beyond the scope of this book. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> In short, there are actually 
<span class="cmti-10"> three 
</span> different responses to the question “does 
<span class="cmtt-10"> father(X) 
</span> unify with 
<span class="cmtt-10"> X 
</span> ”. There is the answer given by the standard unification algorithm (which is to say no), the response of older Prolog implementations (which is to run amok until they use up the available memory), and the answer given by sophisticated Prolog implementations (which is to say yes, and return a finite representation of an infinite term). In short, there is no ‘right’ answer to this question. What is important is that you understand the difference between standard unification and Prolog unification, and know how the Prolog implementation that 
<span class="cmtt-10"> you 
</span> work with handles such examples. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Now, in the practical session at the end of the chapter we ask you to try out such examples with your Prolog interpreter. Here we want to say a little more about the difference between Prolog unification and standard unification. Given the very different ways they handle this example, it may seem that standard unification algorithms and the Prolog approach to unification are inherently different. Actually, they’re not. There is one simple difference between the two algorithms that accounts for their different behaviour when faced with the task of unifying terms like 
<span class="cmtt-10"> X 
</span> and 
<span class="cmtt-10"> father(X) 
</span> . A standard algorithm, when given two terms to unify, first carries out what is known as the occurs check. This means that if it is asked to unify a variable with a term, it first checks whether the variable occurs in the term. If it does, the standard algorithm declares that unification is impossible, for clearly it is the presence of the variable 
<span class="cmtt-10"> X 
</span> in 
<span class="cmtt-10"> father(X) 
</span> which leads to the problems discussed earlier. Only if the variable does not occur in the term do standard algorithms attempt to carry out the unification. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> To put it another way, standard unification algorithms are 
<span class="cmti-10"> pessimistic 
</span> . They first carry out the occurs check, and only when they are sure that the situation is safe they do go ahead and actually try to unify the terms. So a standard unification algorithm will never get locked into a situation where it is endlessly trying to instantiate variables, or having to appeal to infinite terms. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Prolog, on the other hand, is 
<span class="cmti-10"> optimistic 
</span> . It assumes that you are not going to give it anything dangerous. So it takes a shortcut: it omits the occurs check. As soon as you give it two terms, it rushes ahead and tries to unify them. As Prolog is a programming language, this is an intelligent strategy. Unification is one of the fundamental processes that makes Prolog work, so it needs to be carried out as fast as possible. Carrying out an occurs check every time unification is called for would slow it down considerably. Pessimism is safe, but optimism is a lot faster! Prolog can only run into problems if you, the programmer, ask it to do something like unify 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> with 
<span class="verb">
<span class="cmtt-10"> father(X) 
</span>
</span> . And it is unlikely you will ever (intentionally) ask it to do anything like that when writing a real program. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> One final remark. Prolog comes with a built-in predicate that carries out standard unification (that is, unification with the occurs check). The predicate is 
<a id="dx16-25023">
</a>
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb77">
<a id="x16-25025r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  unify_with_occurs_check/2. 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> So if we posed the query 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb78">
<a id="x16-25027r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  unify_with_occurs_check(father(X),X). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> we would get the response no. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent">
</p>
</div>
<div class="nb-cell html" name="htm1">
<h4 class="likesubsectionHead">
<a id="x16-260002.1">
</a> Programming with unification 
</h4>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> As we’ve said, unification is a fundamental operation in Prolog. It plays a key role in Prolog proof search (as we shall soon learn), and this alone makes it vital. However, as you get to know Prolog better, it will become clear that unification is interesting and important in its own right. Indeed, sometimes you can write useful programs simply by using complex terms to define interesting concepts. Unification can then be used to pull out the information you want. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Here’s a simple example of this, due to Ivan Bratko. 
<span class="footnote-mark">
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-html17">
<sup class="textsuperscript"> 1 
</sup>
</a>
</span>
<a id="x16-26001f1">
</a> The following two line knowledge base defines two predicates, namely 
<span class="verb">
<span class="cmtt-10"> vertical/1 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> horizontal/1 
</span>
</span> , which specify what it means for a line to be vertical or horizontal respectively: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb79">
<a id="x16-26003r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  vertical(line(point(X,Y),point(X,Z))). 
</span>
<br class="fancyvrb"/>
<a id="x16-26005r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x16-26007r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  horizontal(line(point(X,Y),point(Z,Y))). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Now, at first glance this knowledge base may seem too simple to be interesting: it contains just two facts, and no rules. But wait a minute: the two facts are expressed using complex terms which again have complex terms as arguments. Indeed, there are three levels of terms nested inside terms. Moreover, the deepest level arguments are all variables, so the concepts are being defined in a general way. Maybe it’s not quite as simple as it seems. Let’s take a closer look. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Right down at the bottom level, we have a complex term with functor 
<span class="verb">
<span class="cmtt-10"> point 
</span>
</span> and two arguments. Its two arguments are intended to be instantiated to numbers: 
<span class="verb">
<span class="cmtt-10"> point(X,Y) 
</span>
</span> represents the Cartesian coordinates of a point. That is, the 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> indicates the horizontal distance the point is from some fixed point, while the 
<span class="verb">
<span class="cmtt-10"> Y 
</span>
</span> indicates the vertical distance from that same fixed point. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Now, once we’ve specified two distinct points, we’ve specified a line, namely the line between them. So the two complex terms representing points are bundled together as the two arguments of another complex term with the functor 
<span class="verb">
<span class="cmtt-10"> line 
</span>
</span> . In effect, we represent a line by a complex term which has two arguments which are complex terms themselves and represent points. We’re using Prolog’s ability to build complex terms to work our way up a hierarchy of concepts. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Being vertical, and being horizontal, are properties of lines. The predicates 
<span class="verb">
<span class="cmtt-10"> vertical 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> horizontal 
</span>
</span> therefore both take one argument which represents a line. The definition of 
<span class="verb">
<span class="cmtt-10"> vertical/1 
</span>
</span> simply says: a line that goes between two points that have the same x-coordinate is vertical. Note how we capture the effect of “the same x-coordinate” in Prolog: we simply make use of the same variable 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> as the first argument of the two complex terms representing the points. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Similarly, the definition of 
<span class="verb">
<span class="cmtt-10"> horizontal/1 
</span>
</span> simply says: a line that goes between two points that have the same y-coordinate is horizontal. To capture the effect of “the same y-coordinate”, we use the same variable 
<span class="verb">
<span class="cmtt-10"> Y 
</span>
</span> as the second argument of the two complex terms representing the points. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> What can we do with this knowledge base? Let’s look at some examples: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb80">
<a id="x16-26009r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  vertical(line(point(1,1),point(1,3))). 
</span>
<br class="fancyvrb"/>
<a id="x16-26011r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> This should be clear: the query unifies with the definition of 
<span class="verb">
<span class="cmtt-10"> vertical/1 
</span>
</span> in our little knowledge base (and in particular, the representations of the two points have the same first argument) so Prolog says yes. Similarly we have: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb81">
<a id="x16-26013r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  vertical(line(point(1,1),point(3,2))). 
</span>
<br class="fancyvrb"/>
<a id="x16-26015r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  no 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> This query does not unify with the definition of 
<span class="verb">
<span class="cmtt-10"> vertical/1 
</span>
</span> (the representations of the two points have different first arguments) so Prolog says no. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> But we can also ask more general questions: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb82">
<a id="x16-26017r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  horizontal(line(point(1,1),point(2,Y))). 
</span>
<br class="fancyvrb"/>
<a id="x16-26019r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x16-26021r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Y 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  1 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x16-26023r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x16-26025r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  no 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Here our query is: if we want a horizontal line between a point at (1,1), and point whose x-coordinate is 2, what should the y-coordinate of that second point be? Prolog correctly tells us that the y-coordinate should be 1. If we then ask Prolog for a second possibility (note the 
<span class="verb">
<span class="cmtt-10"> ; 
</span>
</span> ) it tells us that no other possibilities exist. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Now consider the following: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb83">
<a id="x16-26027r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  horizontal(line(point(2,3),P)). 
</span>
<br class="fancyvrb"/>
<a id="x16-26029r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x16-26031r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  P 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  point(_1972,3) 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x16-26033r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x16-26035r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  no 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> This query is: if we want a horizontal line between a point at (2,3), and some other point, what other points are permissible? The answer is: any point whose y-coordinate is 3. Note that the 
<span class="verb">
<span class="cmtt-10"> _1972 
</span>
</span> in the first argument of the answer is a variable, which is Prolog’s way of telling us that any x-coordinate at all will do. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> A general remark: the answer given to our last query, namely 
<span class="verb">
<span class="cmtt-10"> point(_1972,3) 
</span>
</span> , is 
<span class="cmti-10"> structured 
</span> . That is, the answer is a complex term, representing a sophisticated concept (namely “any point whose y-coordinate is 3”). This structure was built using unification and nothing else: no logical inference (and in particular, no use of modus ponens) was used to produce it. Building structure by unification turns out to be a powerful idea in Prolog programming, far more powerful than this rather simple example might suggest. Moreover, when a program is written that makes heavy use of unification, it is likely to be extremely efficient. We will study a beautiful example in Chapter  
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch7"> 7 
<!--tex4ht:ref: CHAPTER7 -->
</a> when we discuss difference lists, which are used to implement Prolog’s built-in grammar system, Definite Clause Grammars. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> This style of programming is particularly useful in applications where the important concepts have a natural hierarchical structure (as they did in the simple knowledge base above), for we can then use complex terms to represent this structure, and unification to access it. This way of working plays an important role in computational linguistics, for example, because information about language has a natural hierarchical structure (think of the way sentences can be analysed into noun phrases and verb phrases, and noun phrases analysed into determiners and nouns, and so on). 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse6"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse5"> front 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch2"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent">
<a id="taillpn-htmlse5">
</a>
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse7"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse5"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse5"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=#taillpn-htmlse6"> tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch2"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<h3 class="sectionHead">
<span class="titlemark"> 2.2 
</span>
<a id="x18-270002.2">
</a> Proof Search 
</h3>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Now that we know about unification, we are in a position to learn how Prolog actually searches a knowledge base to see if a query is satisfied. That is, we are ready to learn about proof search. We will introduce the basic ideas involved by working through a simple example. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Suppose we are working with the following knowledge base 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb84">
<a id="x18-27002r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  f(a). 
</span>
<br class="fancyvrb"/>
<a id="x18-27004r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  f(b). 
</span>
<br class="fancyvrb"/>
<a id="x18-27006r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x18-27008r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  g(a). 
</span>
<br class="fancyvrb"/>
<a id="x18-27010r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  g(b). 
</span>
<br class="fancyvrb"/>
<a id="x18-27012r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x18-27014r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  h(b). 
</span>
<br class="fancyvrb"/>
<a id="x18-27016r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x18-27018r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  k(X) 
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  f(X), 
</span>
<span class="cmtt-10">  g(X), 
</span>
<span class="cmtt-10">  h(X). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Suppose we then pose the query 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb85">
<a id="x18-27020r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  k(Y). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> It is probably clear that there is only one answer to this query, namely 
<span class="verb">
<span class="cmtt-10"> k(b) 
</span>
</span> , but how exactly does Prolog work this out? Let’s see. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Prolog reads the knowledge base, and tries to unify 
<span class="verb">
<span class="cmtt-10"> k(Y) 
</span>
</span> with either a fact, or the head of a rule. It searches the knowledge base top to bottom, and carries out the unification, if it can, at the first place possible. Here there is only one possibility: it must unify 
<span class="verb">
<span class="cmtt-10"> k(Y) 
</span>
</span> to the head of the rule 
<span class="verb">
<span class="cmtt-10"> k(X) 
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  f(X), 
</span>
<span class="cmtt-10">  g(X), 
</span>
<span class="cmtt-10">  h(X) 
</span>
</span> . 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> When Prolog unifies the variable in a query to a variable in a fact or rule, it generates a brand new variable (say 
<span class="verb">
<span class="cmtt-10"> _G34 
</span>
</span> ) to represent the shared variables. So the original query now reads: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb86">
<a id="x18-27022r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  k(_G34) 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> and Prolog knows that 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb87">
<a id="x18-27024r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  k(_G34) 
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  f(_G34), 
</span>
<span class="cmtt-10">  g(_G34), 
</span>
<span class="cmtt-10">  h(_G34). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> So what do we now have? The original query says: “I want to find an individual that has property 
<span class="verb">
<span class="cmtt-10"> k 
</span>
</span> ”. The rule says, “an individual has property 
<span class="verb">
<span class="cmtt-10"> k 
</span>
</span> if it has properties 
<span class="verb">
<span class="cmtt-10"> f 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> g 
</span>
</span> , and 
<span class="verb">
<span class="cmtt-10"> h 
</span>
</span> ”. So if Prolog can find an individual with properties 
<span class="verb">
<span class="cmtt-10"> f 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> g 
</span>
</span> , and 
<span class="verb">
<span class="cmtt-10"> h 
</span>
</span> , it will have satisfied the original query. So Prolog replaces the original query with the following list of goals: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb88">
<a id="x18-27026r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  f(_G34), 
</span>
<span class="cmtt-10">  g(_G34), 
</span>
<span class="cmtt-10">  h(_G34). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Our discussion of the querying process so far can be made more elegant and succinct if we think graphically. Consider the following diagram: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="center">
<!--l. 723-->
<p class="noindent">
</p>
<!--l. 724-->
<p class="noindent">
<img alt="*Pic not found*" src="html/chap2-pspic1.ps.png"/>
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Everything in a box is either a query or a goal. In particular, our original goal was to prove 
<span class="verb">
<span class="cmtt-10"> k(Y) 
</span>
</span> , thus this is shown in the top box. When we unified 
<span class="verb">
<span class="cmtt-10"> k(Y) 
</span>
</span> with the head of the rule in the knowledge base, 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span>
<span class="verb">
<span class="cmtt-10"> Y 
</span>
</span> , and the new internal variable 
<span class="verb">
<span class="cmtt-10"> _G34 
</span>
</span> were made to share values, and we were left with the goals 
<span class="verb">
<span class="cmtt-10"> f(_G34),g(_G34),h(_G34) 
</span>
</span> , just as shown. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Now, whenever it has a list of goals, Prolog tries to satisfy them one by one, working through the list in a left to right direction. The leftmost goal is 
<span class="verb">
<span class="cmtt-10"> f(_G34) 
</span>
</span> , which reads: “I want an individual with property 
<span class="verb">
<span class="cmtt-10"> f 
</span>
</span> ”. Can this goal be satisfied? Prolog tries to do so by searching through the knowledge base from top to bottom. The first item it finds that unifies with this goal is the fact 
<span class="verb">
<span class="cmtt-10"> f(a) 
</span>
</span> . This satisfies the goal 
<span class="verb">
<span class="cmtt-10"> f(_G34) 
</span>
</span> and we are left with two more goals. Now, when we unify 
<span class="verb">
<span class="cmtt-10"> f(_G34) 
</span>
</span> to 
<span class="verb">
<span class="cmtt-10"> f(a) 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> _G34 
</span>
</span> is instantiated to 
<span class="verb">
<span class="cmtt-10"> a 
</span>
</span> , and this instantiation applies to all occurrences of 
<span class="verb">
<span class="cmtt-10"> _G34 
</span>
</span> in the list of goals. So the list now looks like this: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb89">
<a id="x18-27028r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  g(a),h(a) 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> and our graphical representation of the proof search now looks like this: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="center">
<!--l. 750-->
<p class="noindent">
</p>
<!--l. 751-->
<p class="noindent">
<img alt="*Pic not found*" src="html/chap2-pspic2.ps.png"/>
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> But the fact 
<span class="verb">
<span class="cmtt-10"> g(a) 
</span>
</span> is in the knowledge base, so the first goal we have to prove is satisfied too. So the goal list becomes 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb90">
<a id="x18-27030r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  h(a) 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> and the graphical representation is now 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="center">
<!--l. 763-->
<p class="noindent">
</p>
<!--l. 764-->
<p class="noindent">
<img alt="*Pic not found*" src="html/chap2-pspic3.ps.png"/>
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> But there is no way to satisfy 
<span class="verb">
<span class="cmtt-10"> h(a) 
</span>
</span> , the last remaining goal. The only information about 
<span class="verb">
<span class="cmtt-10"> h 
</span>
</span> we have in the knowledge base is 
<span class="verb">
<span class="cmtt-10"> h(b) 
</span>
</span> , and this won’t unify with 
<span class="verb">
<span class="cmtt-10"> h(a) 
</span>
</span> . 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> So what happens next? Well, Prolog decides it has made a mistake, and checks whether it has missed any possible ways of unifying a goal with a fact or the head of a rule in the knowledge base. It does this by going back up the path shown in the graphical representation, looking for alternatives. Now, there is nothing else in the knowledge base that unifies with 
<span class="verb">
<span class="cmtt-10"> g(a) 
</span>
</span> , but there 
<span class="cmti-10"> is 
</span> another way of unifying 
<span class="verb">
<span class="cmtt-10"> f(_G34) 
</span>
</span> . Points in the search where there are several alternative ways of unifying a goal against the knowledge base are called choice points. Prolog keeps track of choice points it has encountered, so that if it makes a wrong choice it can retreat to the previous choice point and try something else instead. This process is called backtracking, and it is fundamental to proof search in Prolog. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> So let’s carry on with our example. Prolog backtracks to the last choice point. This is the point in the graphical representation where the list of goals was: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb91">
<a id="x18-27032r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  f(_G34),g(_G34),h(_G34). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Prolog must now redo this work. First it must try to re-satisfy the first goal by searching further in the knowledge base. It can do this: it sees that it can unify the first goal with information in the knowledge base by unifying 
<span class="verb">
<span class="cmtt-10"> f(_G34) 
</span>
</span> with 
<span class="verb">
<span class="cmtt-10"> f(b) 
</span>
</span> . This satisfies the goal 
<span class="verb">
<span class="cmtt-10"> f(_G34) 
</span>
</span> and instantiates 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> to 
<span class="verb">
<span class="cmtt-10"> b 
</span>
</span> , so that the remaining goal list is 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb92">
<a id="x18-27034r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  g(b),h(b). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> But 
<span class="verb">
<span class="cmtt-10"> g(b) 
</span>
</span> is a fact in the knowledge base, so this is satisfied too, leaving the goal list: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb93">
<a id="x18-27036r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  h(b). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Moreover, this fact too is in the knowledge base, so this goal is also satisfied. So Prolog now has an empty list of goals. This means that it has now proved everything required to establish the original goal (that is, 
<span class="verb">
<span class="cmtt-10"> k(Y) 
</span>
</span> ). So the original query 
<span class="cmti-10"> is 
</span> satisfiable, and moreover, Prolog has also discovered what it has to do to satisfy it (namely instantiate 
<span class="verb">
<span class="cmtt-10"> Y 
</span>
</span> to 
<span class="verb">
<span class="cmtt-10"> b 
</span>
</span> ). 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> It is interesting to consider what happens if we then ask for another solution by typing: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb94">
<a id="x18-27038r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ; 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> This forces Prolog to backtrack to the last choice point, to try and find another possibility. However, there are no other choice points, as there are no other possibilities for unifying 
<span class="verb">
<span class="cmtt-10"> h(b) 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> g(b) 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> f(_G34) 
</span>
</span> , or 
<span class="verb">
<span class="cmtt-10"> k(Y) 
</span>
</span> with clauses in the knowledge base, so Prolog would respond no. On the other hand, if there had been other rules involving 
<span class="verb">
<span class="cmtt-10"> k 
</span>
</span> , Prolog would have gone off and tried to use them in exactly the way we have described: that is, by searching top to bottom in the knowledge base, left to right in goal lists, and backtracking to the previous choice point whenever it fails. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Let’s take a look at the graphical representation of the entire search process. Some general remarks are called for, for such representations are an important way of thinking about proof search in Prolog. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="center">
<!--l. 833-->
<p class="noindent">
</p>
<!--l. 834-->
<p class="noindent">
<img alt="*Pic not found*" src="html/chap2-pspic4.ps.png"/>
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> This diagram has the form of a tree; in fact it is our first example of what is known as a search tree. The nodes of such trees say which goals have to be satisfied at the various steps of the proof search, and the edges keep track of the variable instantiations that are made when the current goal (that is, the first one in the list of goals) is unified to a fact or to the head of a rule in the knowledge base. Leaf nodes which still contain unsatisfied goals are points where Prolog failed (either because it made a wrong decision somewhere along the path, or because no solution exists). Leaf nodes with an empty goal list correspond to a possible solution. The edges along the path from the root node to a successful leaf node tell you the variable instantiations that need to be made to satisfy the original query. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Let’s have a look at another example. Suppose that we are working with the following knowledge base: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb95">
<a id="x18-27040r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  loves(vincent,mia). 
</span>
<br class="fancyvrb"/>
<a id="x18-27042r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  loves(marcellus,mia). 
</span>
<br class="fancyvrb"/>
<a id="x18-27044r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x18-27046r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  jealous(A,B):- 
</span>
<span class="cmtt-10">  loves(A,C), 
</span>
<span class="cmtt-10">  loves(B,C). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Now we pose the query 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb96">
<a id="x18-27048r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  jealous(X,Y). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> The search tree for the query looks like this: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="center">
<!--l. 866-->
<p class="noindent">
</p>
<!--l. 867-->
<p class="noindent">
<img alt="*Pic not found*" src="html/chap2-pspic5.ps.png"/>
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> There is only one possible way of unifying 
<span class="verb">
<span class="cmtt-10"> jealous(X,Y) 
</span>
</span> against the knowledge base, namely by using the rule 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb97">
<a id="x18-27050r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  jealous(A,B):- 
</span>
<span class="cmtt-10">  loves(A,C), 
</span>
<span class="cmtt-10">  loves(B,C). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> So the new goals that have to be satisfied are: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb98">
<a id="x18-27052r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  loves(_G5,_G6),loves(_G7,_G6) 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Now we have to unify 
<span class="verb">
<span class="cmtt-10"> loves(_G5,_G6) 
</span>
</span> against the knowledge base. There are two ways of doing this (it can either be unified with the first fact or with the second fact) and this is why the path branches at this point. In both cases the goal 
<span class="verb">
<span class="cmtt-10"> loves(_G7,mia) 
</span>
</span> remains, and this can also be satisfied by using either of two facts. All in all there are four leaf nodes with an empty goal list, which means that there are four ways of satisfying the original query. The variable instantiations for each solution can be read off the path from the root to the leaf node. So the four solutions are: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<ol class="enumerate1">
<li class="enumerate" id="x18-27054x1">
<span class="verb">
<span class="cmtt-10"> X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  _G5 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  vincent 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> Y 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  _G7 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  vincent 
</span>
</span>
</li>
<li class="enumerate" id="x18-27056x2">
<span class="verb">
<span class="cmtt-10"> X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  _G5 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  vincent 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> Y 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  _G7 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  marcellus 
</span>
</span>
</li>
<li class="enumerate" id="x18-27058x3">
<span class="verb">
<span class="cmtt-10"> X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  _G5 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  marcellus 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> Y 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  _G7 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  vincent 
</span>
</span>
</li>
<li class="enumerate" id="x18-27060x4">
<span class="verb">
<span class="cmtt-10"> X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  _G5 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  marcellus 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> Y 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  _G7 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  marcellus 
</span>
</span>
</li>
</ol>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Work through this example carefully, and make sure you understand it. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse7"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse5"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse5"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse6"> front 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch2"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent">
<a id="taillpn-htmlse6">
</a>
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse8"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse6"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse6"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=#taillpn-htmlse7"> tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch2"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<h3 class="sectionHead">
<span class="titlemark"> 2.3 
</span>
<a id="x19-280002.3">
</a> <strong>Exercise</strong>s 
</h3>
</div>
<div class="nb-cell html" name="htm1">
<div class="newtheorem">
<!--l. 904-->
<p class="noindent">
<span class="head">
<span class="cmbx-10"> <strong>Exercise</strong>
</span>
<span class="cmbx-10">  2.1 
</span>
</span>
<a id="x19-280011">
</a>
<span class="cmti-10"> Which of the following pairs of terms unify? Where relevant, give the 
</span>
<span class="cmti-10"> variable instantiations that lead to successful unification. 
</span>
</p>
<ol class="enumerate1">
<li class="enumerate" id="x19-28003x1">
<span class="verb">
<span class="cmtt-10"> bread 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  bread 
</span>
</span>
</li>
<li class="enumerate" id="x19-28005x2">
<span class="verb">
<span class="cmtt-10"> ’Bread’ 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  bread 
</span>
</span>
</li>
<li class="enumerate" id="x19-28007x3">
<span class="verb">
<span class="cmtt-10"> ’bread’ 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  bread 
</span>
</span>
</li>
<li class="enumerate" id="x19-28009x4">
<span class="verb">
<span class="cmtt-10"> Bread 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  bread 
</span>
</span>
</li>
<li class="enumerate" id="x19-28011x5">
<span class="verb">
<span class="cmtt-10"> bread 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  sausage 
</span>
</span>
</li>
<li class="enumerate" id="x19-28013x6">
<span class="verb">
<span class="cmtt-10"> food(bread) 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  bread 
</span>
</span>
</li>
<li class="enumerate" id="x19-28015x7">
<span class="verb">
<span class="cmtt-10"> food(bread) 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  X 
</span>
</span>
</li>
<li class="enumerate" id="x19-28017x8">
<span class="verb">
<span class="cmtt-10"> food(X) 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  food(bread) 
</span>
</span>
</li>
<li class="enumerate" id="x19-28019x9">
<span class="verb">
<span class="cmtt-10"> food(bread,X) 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  food(Y,sausage) 
</span>
</span>
</li>
<li class="enumerate" id="x19-28021x10">
<span class="verb">
<span class="cmtt-10"> food(bread,X,beer) 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  food(Y,sausage,X) 
</span>
</span>
</li>
<li class="enumerate" id="x19-28023x11">
<span class="verb">
<span class="cmtt-10"> food(bread,X,beer) 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  food(Y,kahuna_burger) 
</span>
</span>
</li>
<li class="enumerate" id="x19-28025x12">
<span class="verb">
<span class="cmtt-10"> food(X) 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  X 
</span>
</span>
</li>
<li class="enumerate" id="x19-28027x13">
<span class="verb">
<span class="cmtt-10"> meal(food(bread),drink(beer)) 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  meal(X,Y) 
</span>
</span>
</li>
<li class="enumerate" id="x19-28029x14">
<span class="verb">
<span class="cmtt-10"> meal(food(bread),X) 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  meal(X,drink(beer)) 
</span>
</span>
</li>
</ol>
</div>
</div>
<div class="nb-cell html" name="htm1">
<div class="newtheorem">
<!--l. 925-->
<p class="noindent">
<span class="head">
<span class="cmbx-10"> <strong>Exercise</strong>
</span>
<span class="cmbx-10">  2.2 
</span>
</span>
<a id="x19-280302">
</a>
<span class="cmti-10"> We are working with the following knowledge base: 
</span>
</p>
<div class="fancyvrb" id="fancyvrb99">
<a id="x19-28032r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  house_elf(dobby). 
</span>
<br class="fancyvrb"/>
<a id="x19-28034r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  witch(hermione). 
</span>
<br class="fancyvrb"/>
<a id="x19-28036r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  witch(’McGonagall’). 
</span>
<br class="fancyvrb"/>
<a id="x19-28038r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  witch(rita_skeeter). 
</span>
<br class="fancyvrb"/>
<a id="x19-28040r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  magic(X):- 
</span>
<span class="cmtt-10">  house_elf(X). 
</span>
<br class="fancyvrb"/>
<a id="x19-28042r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  magic(X):- 
</span>
<span class="cmtt-10">  wizard(X). 
</span>
<br class="fancyvrb"/>
<a id="x19-28044r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  magic(X):- 
</span>
<span class="cmtt-10">  witch(X). 
</span>
</div>
<!--l. 937-->
<p class="indent">
<span class="cmti-10"> Which of the following queries are satisfied? Where relevant, give all the variable 
</span>
<span class="cmti-10"> instantiations that lead to success. 
</span>
</p>
<ol class="enumerate1">
<li class="enumerate" id="x19-28046x1">
<span class="verb">
<span class="cmtt-10"> ?- 
</span>
<span class="cmtt-10">  magic(house_elf). 
</span>
</span>
</li>
<li class="enumerate" id="x19-28048x2">
<span class="verb">
<span class="cmtt-10"> ?- 
</span>
<span class="cmtt-10">  wizard(harry). 
</span>
</span>
</li>
<li class="enumerate" id="x19-28050x3">
<span class="verb">
<span class="cmtt-10"> ?- 
</span>
<span class="cmtt-10">  magic(wizard). 
</span>
</span>
</li>
<li class="enumerate" id="x19-28052x4">
<span class="verb">
<span class="cmtt-10"> ?- 
</span>
<span class="cmtt-10">  magic(’McGonagall’). 
</span>
</span>
</li>
<li class="enumerate" id="x19-28054x5">
<span class="verb">
<span class="cmtt-10"> ?- 
</span>
<span class="cmtt-10">  magic(Hermione). 
</span>
</span>
</li>
</ol>
<!--l. 946-->
<p class="noindent">
<span class="cmti-10"> Draw the search tree for the query 
</span>
<span class="verb">
<span class="cmtt-10"> magic(Hermione) 
</span>
</span>
<span class="cmti-10"> . 
</span>
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<div class="newtheorem">
<!--l. 950-->
<p class="noindent">
<span class="head">
<span class="cmbx-10"> <strong>Exercise</strong>
</span>
<span class="cmbx-10">  2.3 
</span>
</span>
<a id="x19-280553">
</a>
<span class="cmti-10"> Here is a tiny lexicon (that is, information about individual 
</span>
<span class="cmti-10"> words) and a mini grammar consisting of one syntactic rule (which defines 
</span>
<span class="cmti-10"> a sentence to be an entity consisting of five words in the following order: a 
</span>
<span class="cmti-10"> determiner, a noun, a verb, a determiner, a noun). 
</span>
</p>
<!--l. 956-->
<p class="indent">
</p>
<div class="fancyvrb" id="fancyvrb100">
<a id="x19-28057r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  word(determiner,a). 
</span>
<br class="fancyvrb"/>
<a id="x19-28059r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  word(determiner,every). 
</span>
<br class="fancyvrb"/>
<a id="x19-28061r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  word(noun,criminal). 
</span>
<br class="fancyvrb"/>
<a id="x19-28063r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  word(noun,’big 
</span>
<span class="cmtt-10">  kahuna 
</span>
<span class="cmtt-10">  burger’). 
</span>
<br class="fancyvrb"/>
<a id="x19-28065r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  word(verb,eats). 
</span>
<br class="fancyvrb"/>
<a id="x19-28067r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  word(verb,likes). 
</span>
<br class="fancyvrb"/>
<a id="x19-28069r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x19-28071r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  sentence(Word1,Word2,Word3,Word4,Word5):- 
</span>
<br class="fancyvrb"/>
<a id="x19-28073r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  word(determiner,Word1), 
</span>
<br class="fancyvrb"/>
<a id="x19-28075r10">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  word(noun,Word2), 
</span>
<br class="fancyvrb"/>
<a id="x19-28077r11">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  word(verb,Word3), 
</span>
<br class="fancyvrb"/>
<a id="x19-28079r12">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  word(determiner,Word4), 
</span>
<br class="fancyvrb"/>
<a id="x19-28081r13">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  word(noun,Word5). 
</span>
</div>
<!--l. 971-->
<p class="noindent">
<span class="cmti-10"> What query do you have to pose in order to find out which sentences the grammar can 
</span>
<span class="cmti-10"> generate? List all sentences that this grammar can generate in the order that Prolog 
</span>
<span class="cmti-10"> will generate them in. 
</span>
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<div class="newtheorem">
<!--l. 978-->
<p class="noindent">
<span class="head">
<span class="cmbx-10"> <strong>Exercise</strong>
</span>
<span class="cmbx-10">  2.4 
</span>
</span>
<a id="x19-280824">
</a>
<span class="cmti-10"> Here are six Italian words: 
</span>
</p>
<!--l. 980-->
<p class="indent"> astante 
<span class="cmti-10"> , 
</span> astoria 
<span class="cmti-10"> , 
</span> baratto 
<span class="cmti-10"> , 
</span> cobalto 
<span class="cmti-10"> , 
</span> pistola 
<span class="cmti-10"> , 
</span> statale 
<span class="cmti-10"> . 
</span>
</p>
<!--l. 983-->
<p class="noindent">
<span class="cmti-10"> They are to be arranged, crossword puzzle fashion, in the following grid: 
</span>
</p>
<div class="center">
<!--l. 988-->
<p class="noindent">
</p>
<!--l. 989-->
<p class="noindent">
<img alt="*Pic not found*" src="html/crosswd2.eps.png"/>
</p>
</div>
<!--l. 993-->
<p class="indent">
<span class="cmti-10"> The following knowledge base represents a lexicon containing these words: 
</span>
</p>
<div class="fancyvrb" id="fancyvrb101">
<a id="x19-28084r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  word(astante, 
</span>
<span class="cmtt-10">  a,s,t,a,n,t,e). 
</span>
<br class="fancyvrb"/>
<a id="x19-28086r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  word(astoria, 
</span>
<span class="cmtt-10">  a,s,t,o,r,i,a). 
</span>
<br class="fancyvrb"/>
<a id="x19-28088r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  word(baratto, 
</span>
<span class="cmtt-10">  b,a,r,a,t,t,o). 
</span>
<br class="fancyvrb"/>
<a id="x19-28090r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  word(cobalto, 
</span>
<span class="cmtt-10">  c,o,b,a,l,t,o). 
</span>
<br class="fancyvrb"/>
<a id="x19-28092r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  word(pistola, 
</span>
<span class="cmtt-10">  p,i,s,t,o,l,a). 
</span>
<br class="fancyvrb"/>
<a id="x19-28094r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  word(statale, 
</span>
<span class="cmtt-10">  s,t,a,t,a,l,e). 
</span>
</div>
<!--l. 1003-->
<p class="noindent">
<span class="cmti-10"> Write a predicate 
</span>
<span class="verb">
<span class="cmtt-10"> crossword/6 
</span>
</span>
<span class="cmti-10"> that tells us how to fill in the grid. The first three 
</span>
<span class="cmti-10"> arguments should be the vertical words from left to right, and the last three arguments 
</span>
<span class="cmti-10"> the horizontal words from top to bottom. 
</span>
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse8"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse6"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse6"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse7"> front 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch2"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent">
<a id="taillpn-htmlse7">
</a>
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse7"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse7"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=#taillpn-htmlse8"> tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch2"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<h3 class="sectionHead">
<span class="titlemark"> 2.4 
</span>
<a id="x20-290002.4">
</a> Practical Session 
</h3>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> By this stage, you should have had your first taste of running Prolog programs. The purpose of the second practical session is to suggest two sets of keyboard exercises which will help you get familiar with the way Prolog works. The first set has to do with unification, the second with proof search. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> First of all, start up your Prolog interpreter. That is, get a screen displaying the usual “I’m ready to start” prompt, which probably looks something like: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb102">
<a id="x20-29002r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Verify your answers to <strong>Exercise</strong> 2.1, the unification examples. You don’t need to consult any knowledge bases, simply ask Prolog directly whether it is possible to unify the terms by using the built-in 
<span class="verb">
<span class="cmtt-10"> =/2 
</span>
</span> predicate. For example, to test whether 
<span class="verb">
<span class="cmtt-10"> food(bread,X) 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> food(Y,sausage) 
</span>
</span> unify, just type in 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb103">
<a id="x20-29004r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  food(bread,X) 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  food(Y,sausage). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> and hit return. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> You should also look at what happens when your Prolog implementation attempts to unify terms that can’t be unified because it doesn’t carry out an occurs check. For example, see what happens when you give it the following query: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb104">
<a id="x20-29006r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  g(X,Y) 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  Y. 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> If it handles such examples, try the trickier one mentioned in the text: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb105">
<a id="x20-29008r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  f(X), 
</span>
<span class="cmtt-10">  Y 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  f(Y), 
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  Y. 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Once you’ve experimented with that, it’s time to move on to something new. There is another built-in Prolog predicate for answering queries about unification, namely 
<span class="verb">
<span class="cmtt-10"> \=/2 
</span>
</span> (that is: the 2-place predicate 
<span class="verb">
<span class="cmtt-10"> \= 
</span>
</span> ). 
<a id="dx20-29009">
</a> This works in the opposite way to the 
<span class="verb">
<span class="cmtt-10"> =/2 
</span>
</span> predicate: it succeeds when its two arguments do 
<span class="cmti-10"> not 
</span> unify. For example, the terms 
<span class="verb">
<span class="cmtt-10"> a 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> b 
</span>
</span> do not unify, which explains the following dialogue: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb106">
<a id="x20-29011r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  a 
</span>
<span class="cmtt-10">  \= 
</span>
<span class="cmtt-10">  b. 
</span>
<br class="fancyvrb"/>
<a id="x20-29013r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Make sure you understand how 
<span class="verb">
<span class="cmtt-10"> \=/2 
</span>
</span> works by trying it out on (at least) the following examples. But do this actively, not passively. That is, after you type in an example, pause, and try to work out for yourself what Prolog is going to respond. Only then hit return to see if you are right. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<ol class="enumerate1">
<li class="enumerate" id="x20-29015x1">
<span class="verb">
<span class="cmtt-10"> a 
</span>
<span class="cmtt-10">  \= 
</span>
<span class="cmtt-10">  a 
</span>
</span>
</li>
<li class="enumerate" id="x20-29017x2">
<span class="verb">
<span class="cmtt-10"> ’a’ 
</span>
<span class="cmtt-10">  \= 
</span>
<span class="cmtt-10">  a 
</span>
</span>
</li>
<li class="enumerate" id="x20-29019x3">
<span class="verb">
<span class="cmtt-10"> A 
</span>
<span class="cmtt-10">  \= 
</span>
<span class="cmtt-10">  a 
</span>
</span>
</li>
<li class="enumerate" id="x20-29021x4">
<span class="verb">
<span class="cmtt-10"> f(a) 
</span>
<span class="cmtt-10">  \= 
</span>
<span class="cmtt-10">  a 
</span>
</span>
</li>
<li class="enumerate" id="x20-29023x5">
<span class="verb">
<span class="cmtt-10"> f(a) 
</span>
<span class="cmtt-10">  \= 
</span>
<span class="cmtt-10">  A 
</span>
</span>
</li>
<li class="enumerate" id="x20-29025x6">
<span class="verb">
<span class="cmtt-10"> f(A) 
</span>
<span class="cmtt-10">  \= 
</span>
<span class="cmtt-10">  f(a) 
</span>
</span>
</li>
<li class="enumerate" id="x20-29027x7">
<span class="verb">
<span class="cmtt-10"> g(a,B,c) 
</span>
<span class="cmtt-10">  \= 
</span>
<span class="cmtt-10">  g(A,b,C) 
</span>
</span>
</li>
<li class="enumerate" id="x20-29029x8">
<span class="verb">
<span class="cmtt-10"> g(a,b,c) 
</span>
<span class="cmtt-10">  \= 
</span>
<span class="cmtt-10">  g(A,C) 
</span>
</span>
</li>
<li class="enumerate" id="x20-29031x9">
<span class="verb">
<span class="cmtt-10"> f(X) 
</span>
<span class="cmtt-10">  \= 
</span>
<span class="cmtt-10">  X 
</span>
</span>
</li>
</ol>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Thus the 
<span class="verb">
<span class="cmtt-10"> \=/2 
</span>
</span> predicate is (essentially) the negation of the 
<span class="verb">
<span class="cmtt-10"> =/2 
</span>
</span> predicate: a query involving one of these predicates will be satisfied when the corresponding query involving the other is not, and vice versa. This is the first example we have seen of a Prolog mechanism for handling negation. We discuss Prolog negation (and its peculiarities) in Chapter  
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch10"> 10 
<!--tex4ht:ref: CHAPTER10 -->
</a> . 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> It’s time to move on and introduce one of the most helpful tools in Prolog: 
<span class="verb">
<span class="cmtt-10"> trace 
</span>
</span> . 
<a id="dx20-29032">
</a> This is a built-in Prolog predicate that changes the way Prolog runs: it forces Prolog to evaluate queries one step at a time, indicating what it is doing at each step. Prolog waits for you to press return before it moves to the next step, so that you can see exactly what is going on. It was really designed to be used as a debugging tool, but it’s also helpful when you’re learning Prolog: stepping through programs using 
<span class="verb">
<span class="cmtt-10"> trace 
</span>
</span> is an 
<span class="cmti-10"> excellent 
</span> way of learning how Prolog proof search works. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Let’s look at an example. In the text, we looked at the proof search involved when we made the query 
<span class="verb">
<span class="cmtt-10"> k(Y) 
</span>
</span> to the following knowledge base: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb107">
<a id="x20-29034r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  f(a). 
</span>
<br class="fancyvrb"/>
<a id="x20-29036r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  f(b). 
</span>
<br class="fancyvrb"/>
<a id="x20-29038r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x20-29040r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  g(a). 
</span>
<br class="fancyvrb"/>
<a id="x20-29042r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  g(b). 
</span>
<br class="fancyvrb"/>
<a id="x20-29044r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x20-29046r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  h(b). 
</span>
<br class="fancyvrb"/>
<a id="x20-29048r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x20-29050r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  k(X):- 
</span>
<span class="cmtt-10">  f(X), 
</span>
<span class="cmtt-10">  g(X), 
</span>
<span class="cmtt-10">  h(X). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Suppose this knowledge base is in file 
<span class="verb">
<span class="cmtt-10"> proof.pl 
</span>
</span> . We first consult it: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb108">
<a id="x20-29052r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  [proof]. 
</span>
<br class="fancyvrb"/>
<a id="x20-29054r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> We then type 
<span class="verb">
<span class="cmtt-10"> trace 
</span>
</span> , followed by a full stop, and hit return: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb109">
<a id="x20-29056r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  trace. 
</span>
<br class="fancyvrb"/>
<a id="x20-29058r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Prolog is now in trace mode, and will evaluate all queries step by step. For example, if we pose the query 
<span class="verb">
<span class="cmtt-10"> k(X) 
</span>
</span> , and then hit return every time Prolog comes back with a 
<span class="verb">
<span class="cmtt-10"> ? 
</span>
</span> , we obtain (something like) the following: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb110">
<a id="x20-29060r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  [trace] 
</span>
<span class="cmtt-10">  2 
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  k(X). 
</span>
<br class="fancyvrb"/>
<a id="x20-29062r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Call: 
</span>
<span class="cmtt-10">  (6) 
</span>
<span class="cmtt-10">  k(_G34) 
</span>
<span class="cmtt-10">  ? 
</span>
<br class="fancyvrb"/>
<a id="x20-29064r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Call: 
</span>
<span class="cmtt-10">  (7) 
</span>
<span class="cmtt-10">  f(_G34) 
</span>
<span class="cmtt-10">  ? 
</span>
<br class="fancyvrb"/>
<a id="x20-29066r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Exit: 
</span>
<span class="cmtt-10">  (7) 
</span>
<span class="cmtt-10">  f(a) 
</span>
<span class="cmtt-10">  ? 
</span>
<br class="fancyvrb"/>
<a id="x20-29068r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Call: 
</span>
<span class="cmtt-10">  (7) 
</span>
<span class="cmtt-10">  g(a) 
</span>
<span class="cmtt-10">  ? 
</span>
<br class="fancyvrb"/>
<a id="x20-29070r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Exit: 
</span>
<span class="cmtt-10">  (7) 
</span>
<span class="cmtt-10">  g(a) 
</span>
<span class="cmtt-10">  ? 
</span>
<br class="fancyvrb"/>
<a id="x20-29072r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Call: 
</span>
<span class="cmtt-10">  (7) 
</span>
<span class="cmtt-10">  h(a) 
</span>
<span class="cmtt-10">  ? 
</span>
<br class="fancyvrb"/>
<a id="x20-29074r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Fail: 
</span>
<span class="cmtt-10">  (7) 
</span>
<span class="cmtt-10">  h(a) 
</span>
<span class="cmtt-10">  ? 
</span>
<br class="fancyvrb"/>
<a id="x20-29076r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Fail: 
</span>
<span class="cmtt-10">  (7) 
</span>
<span class="cmtt-10">  g(a) 
</span>
<span class="cmtt-10">  ? 
</span>
<br class="fancyvrb"/>
<a id="x20-29078r10">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Redo: 
</span>
<span class="cmtt-10">  (7) 
</span>
<span class="cmtt-10">  f(_G34) 
</span>
<span class="cmtt-10">  ? 
</span>
<br class="fancyvrb"/>
<a id="x20-29080r11">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Exit: 
</span>
<span class="cmtt-10">  (7) 
</span>
<span class="cmtt-10">  f(b) 
</span>
<span class="cmtt-10">  ? 
</span>
<br class="fancyvrb"/>
<a id="x20-29082r12">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Call: 
</span>
<span class="cmtt-10">  (7) 
</span>
<span class="cmtt-10">  g(b) 
</span>
<span class="cmtt-10">  ? 
</span>
<br class="fancyvrb"/>
<a id="x20-29084r13">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Exit: 
</span>
<span class="cmtt-10">  (7) 
</span>
<span class="cmtt-10">  g(b) 
</span>
<span class="cmtt-10">  ? 
</span>
<br class="fancyvrb"/>
<a id="x20-29086r14">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Call: 
</span>
<span class="cmtt-10">  (7) 
</span>
<span class="cmtt-10">  h(b) 
</span>
<span class="cmtt-10">  ? 
</span>
<br class="fancyvrb"/>
<a id="x20-29088r15">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Exit: 
</span>
<span class="cmtt-10">  (7) 
</span>
<span class="cmtt-10">  h(b) 
</span>
<span class="cmtt-10">  ? 
</span>
<br class="fancyvrb"/>
<a id="x20-29090r16">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Exit: 
</span>
<span class="cmtt-10">  (6) 
</span>
<span class="cmtt-10">  k(b) 
</span>
<span class="cmtt-10">  ? 
</span>
<br class="fancyvrb"/>
<a id="x20-29092r17">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x20-29094r18">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  b 
</span>
<br class="fancyvrb"/>
<a id="x20-29096r19">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Study this carefully. That is, try doing the same thing yourself, and relate this output to the discussion of the example in the text, and in particular, to the nodes in the search tree. To get you started, we’ll remark that the third line is where the variable in the query is (wrongly) instantiated to 
<span class="verb">
<span class="cmtt-10"> a 
</span>
</span> . The first line marked 
<span class="verb">
<span class="cmtt-10"> fail 
</span>
</span> is where Prolog realises it’s taken the wrong path and starts to backtrack, and the line marked 
<span class="verb">
<span class="cmtt-10"> redo 
</span>
</span> is where it tries alternatives for the goal 
<span class="verb">
<span class="cmtt-10"> f(_G34) 
</span>
</span> . 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> While learning Prolog, use trace, and use it heavily. It’s a great way to learn. Oh yes: you also need to know how to turn trace off. Simply type notrace 
<a id="dx20-29097">
</a> (followed by a full stop) and hit return: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb111">
<a id="x20-29099r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  notrace. 
</span>
<br class="fancyvrb"/>
<a id="x20-29101r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse7"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse7"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse8"> front 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch2"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent">
<a id="taillpn-htmlse8">
</a>
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse10"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=#taillpn-htmlse9"> tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch3"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<h3 class="sectionHead">
<span class="titlemark"> 3.1 
</span>
<a id="x22-310003.1">
</a> Recursive Definitions 
</h3>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Predicates can be defined recursively. Roughly speaking, a predicate is recursively defined if one or more rules in its definition refers to itself. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent">
</p>
</div>
<div class="nb-cell html" name="htm1">
<h4 class="likesubsectionHead">
<a id="x22-320003.1">
</a> Example 1: Eating 
</h4>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Consider the following knowledge base: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb112">
<a id="x22-32002r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  is_digesting(X,Y) 
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  just_ate(X,Y). 
</span>
<br class="fancyvrb"/>
<a id="x22-32004r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  is_digesting(X,Y) 
</span>
<span class="cmtt-10">  :- 
</span>
<br class="fancyvrb"/>
<a id="x22-32006r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  just_ate(X,Z), 
</span>
<br class="fancyvrb"/>
<a id="x22-32008r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  is_digesting(Z,Y). 
</span>
<br class="fancyvrb"/>
<a id="x22-32010r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x22-32012r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  just_ate(mosquito,blood(john)). 
</span>
<br class="fancyvrb"/>
<a id="x22-32014r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  just_ate(frog,mosquito). 
</span>
<br class="fancyvrb"/>
<a id="x22-32016r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  just_ate(stork,frog). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> At first glance this seems pretty ordinary: it’s just a knowledge base containing three facts and two rules. But the definition of the 
<span class="verb">
<span class="cmtt-10"> is_digesting/2 
</span>
</span> predicate is recursive. Note that 
<span class="verb">
<span class="cmtt-10"> is_digesting/2 
</span>
</span> is (at least partially) defined in terms of itself, for the 
<span class="verb">
<span class="cmtt-10"> is_digesting/2 
</span>
</span> functor occurs in both the head and body of the second rule. Crucially, however, there is an ‘escape’ from this circularity. This is provided by the 
<span class="verb">
<span class="cmtt-10"> just_ate/2 
</span>
</span> predicate, which occurs in the first rule. (Significantly, the body of the first rule makes no mention of 
<span class="verb">
<span class="cmtt-10"> is_digesting/2 
</span>
</span> .) Let’s now consider both the declarative and procedural meanings of this definition. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> The word “declarative” is used to talk about the logical meaning of Prolog knowledge bases. That is, the declarative meaning of a Prolog knowledge base is simply “what it says”, or “what it means, if we read it as a collection of logical statements”. And the declarative meaning of this recursive definition is fairly straightforward. The first clause (the escape clause, the one that is not recursive, or as we shall usually call it, the base clause), simply says that: 
<span class="cmti-10"> if 
</span>
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> has just eaten 
<span class="verb">
<span class="cmtt-10"> Y 
</span>
</span> , 
<span class="cmti-10"> then 
</span>
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> is now digesting 
<span class="verb">
<span class="cmtt-10"> Y 
</span>
</span> . This is obviously a sensible definition. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> So what about the second clause, the recursive clause? This says that: 
<span class="cmti-10"> if 
</span>
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> has just eaten 
<span class="verb">
<span class="cmtt-10"> Z 
</span>
</span>
<span class="cmti-10"> and 
</span>
<span class="verb">
<span class="cmtt-10"> Z 
</span>
</span> is digesting 
<span class="verb">
<span class="cmtt-10"> Y 
</span>
</span> , 
<span class="cmti-10"> then 
</span>
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> is digesting 
<span class="verb">
<span class="cmtt-10"> Y 
</span>
</span> , too. Again, this is obviously a sensible definition. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> So now we know what this recursive definition says, but what happens when we pose a query that actually needs to use this definition? That is, what does this definition actually do? To use the normal Prolog terminology, what is its procedural meaning? 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> This is also reasonably straightforward. The base rule is like all the earlier rules we’ve seen. That is, if we ask whether 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> is digesting 
<span class="verb">
<span class="cmtt-10"> Y 
</span>
</span> , Prolog can use this rule to ask instead the question: has 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> just eaten 
<span class="verb">
<span class="cmtt-10"> Y 
</span>
</span> ? 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> What about the recursive clause? This gives Prolog another strategy for determining whether 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> is digesting 
<span class="verb">
<span class="cmtt-10"> Y 
</span>
</span> : 
<span class="cmti-10"> it can try to find some 
</span>
<span class="verb">
<span class="cmtt-10"> Z 
</span>
</span>
<span class="cmti-10"> such that 
</span>
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span>
<span class="cmti-10"> has just 
</span>
<span class="cmti-10"> eaten 
</span>
<span class="verb">
<span class="cmtt-10"> Z 
</span>
</span> , and 
<span class="verb">
<span class="cmtt-10"> Z 
</span>
</span>
<span class="cmti-10"> is digesting 
</span>
<span class="verb">
<span class="cmtt-10"> Y 
</span>
</span> . That is, this rule lets Prolog break the task apart into two subtasks. Hopefully, doing so will eventually lead to simple problems which can be solved by simply looking up the answers in the knowledge base. The following picture sums up the situation: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="center">
<!--l. 94-->
<p class="noindent">
</p>
<!--l. 95-->
<p class="noindent">
<img alt="*Pic not found*" src="html/chap3-pspic3.ps.png"/>
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Let’s see how this works. If we pose the query: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb113">
<a id="x22-32018r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  is_digesting(stork,mosquito). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> then Prolog goes to work as follows. First, it tries to make use of the first rule listed concerning 
<span class="verb">
<span class="cmtt-10"> is_digesting 
</span>
</span> ; that is, the base rule. This tells it that 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> is digesting 
<span class="verb">
<span class="cmtt-10"> Y 
</span>
</span> if 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> just ate 
<span class="verb">
<span class="cmtt-10"> Y 
</span>
</span> , By unifying 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> with 
<span class="verb">
<span class="cmtt-10"> stork 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> Y 
</span>
</span> with 
<span class="verb">
<span class="cmtt-10"> mosquito 
</span>
</span> it obtains the following goal: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb114">
<a id="x22-32020r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  just_ate(stork,mosquito). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> But the knowledge base doesn’t contain the information that the stork just ate the mosquito, so this attempt fails. So Prolog next tries to make use of the second rule. By unifying 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> with 
<span class="verb">
<span class="cmtt-10"> stork 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> Y 
</span>
</span> with 
<span class="verb">
<span class="cmtt-10"> mosquito 
</span>
</span> it obtains the following goals: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb115">
<a id="x22-32022r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  just_ate(stork,Z), 
</span>
<br class="fancyvrb"/>
<a id="x22-32024r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  is_digesting(Z,mosquito). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> That is, to show 
<span class="verb">
<span class="cmtt-10"> is_digesting(stork,mosquito) 
</span>
</span> , Prolog needs to find a value for 
<span class="verb">
<span class="cmtt-10"> Z 
</span>
</span> such that, firstly, 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb116">
<a id="x22-32026r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  just_ate(stork,Z). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> and secondly, 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb117">
<a id="x22-32028r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  is_digesting(Z,mosquito). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> And there 
<span class="cmti-10"> is 
</span> such a value for 
<span class="verb">
<span class="cmtt-10"> Z 
</span>
</span> , namely 
<span class="verb">
<span class="cmtt-10"> frog 
</span>
</span> . It is immediate that 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb118">
<a id="x22-32030r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  just_ate(stork,frog). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> will succeed, for this fact is listed in the knowledge base. And deducing 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb119">
<a id="x22-32032r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  is_digesting(frog,mosquito). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> is almost as simple, for the first clause of 
<span class="verb">
<span class="cmtt-10"> is_digesting/2 
</span>
</span> reduces this goal to deducing 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb120">
<a id="x22-32034r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  just_ate(frog,mosquito). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> and this is a fact listed in the knowledge base. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Well, that’s our first example of a recursive rule definition. We’re going to learn a lot more about them, but one very practical remark should be made right away. Hopefully it’s clear that when you write a recursive predicate, it should always have at least two clauses: a base clause (the clause that stops the recursion at some point), and one that contains the recursion. If you don’t do this, Prolog can spiral off into an unending sequence of useless computations. For example, here’s an extremely simple example of a recursive rule definition: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb121">
<a id="x22-32036r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  p 
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  p. 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> That’s it. Nothing else. It’s beautiful in its simplicity. And from a declarative perspective it’s an extremely sensible (if rather boring) definition: it says “if property p holds, then property p holds”. You can’t argue with that. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> But from a procedural perspective, this is a wildly dangerous rule. In fact, we have here the ultimate in dangerous recursive rules: exactly the same thing on both sides, and no base clause to let us escape. For consider what happens when we pose the following query: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb122">
<a id="x22-32038r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  p. 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Prolog asks itself: “How do I prove 
<span class="verb">
<span class="cmtt-10"> p 
</span>
</span> ?” and it realises, “Hey, I’ve got a rule for that! To prove 
<span class="verb">
<span class="cmtt-10"> p 
</span>
</span> I just need to prove 
<span class="verb">
<span class="cmtt-10"> p 
</span>
</span> !”. So it asks itself (again): “How do I prove 
<span class="verb">
<span class="cmtt-10"> p 
</span>
</span> ?” and it realises, “Hey, I’ve got a rule for that! To prove 
<span class="verb">
<span class="cmtt-10"> p 
</span>
</span> I just need to prove 
<span class="verb">
<span class="cmtt-10"> p 
</span>
</span> !”. So it asks itself (yet again): “How do I prove 
<span class="verb">
<span class="cmtt-10"> p 
</span>
</span> ?” and it realises, “Hey, I’ve got a rule for that! To prove 
<span class="verb">
<span class="cmtt-10"> p 
</span>
</span> I just need to prove 
<span class="verb">
<span class="cmtt-10"> p 
</span>
</span> !” and so on and so forth. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> If you make this query, Prolog won’t answer you: it will head off, looping desperately away in an unending search. That is, it won’t terminate, and you’ll have to interrupt it. Of course, if you use 
<span class="verb">
<span class="cmtt-10"> trace 
</span>
</span> , you can step through one step at a time, until you get sick of watching Prolog loop. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent">
</p>
</div>
<div class="nb-cell html" name="htm1">
<h4 class="likesubsectionHead">
<a id="x22-330003.1">
</a> Example 2: Descendant 
</h4>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Now that we know something about 
<span class="cmti-10"> what 
</span> recursion in Prolog involves, it is time to ask 
<span class="cmti-10"> why 
</span> it is so important. Actually, this is a question that can be answered on a number of levels, but for now, let’s keep things fairly practical. So: when it comes to writing useful Prolog programs, are recursive definitions really so important? And if so, why? 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Let’s consider an example. Suppose we have a knowledge base recording facts about the child relation: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb123">
<a id="x22-33002r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  child(bridget,caroline). 
</span>
<br class="fancyvrb"/>
<a id="x22-33004r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  child(caroline,donna). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> That is, Caroline is a child of Bridget, and Donna is a child of Caroline. Now suppose we wished to define the descendant relation; that is, the relation of being a child of, or a child of a child of, or a child of a child of a child of, and so on. Here’s a first attempt to do this. We could add the following two 
<span class="cmti-10"> non 
</span> -recursive rules to the knowledge base: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb124">
<a id="x22-33006r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  descend(X,Y) 
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  child(X,Y). 
</span>
<br class="fancyvrb"/>
<a id="x22-33008r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x22-33010r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  descend(X,Y) 
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  child(X,Z), 
</span>
<br class="fancyvrb"/>
<a id="x22-33012r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  child(Z,Y). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Now, fairly obviously these definitions work up to a point, but they are clearly limited: they only define the concept of descendant-of for two generations or less. That’s ok for the above knowledge base, but suppose we get some more information about the child-of relation and we expand our list of child-of facts to this: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb125">
<a id="x22-33014r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  child(anne,bridget). 
</span>
<br class="fancyvrb"/>
<a id="x22-33016r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  child(bridget,caroline). 
</span>
<br class="fancyvrb"/>
<a id="x22-33018r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  child(caroline,donna). 
</span>
<br class="fancyvrb"/>
<a id="x22-33020r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  child(donna,emily). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Now our two rules are inadequate. For example, if we pose the queries 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb126">
<a id="x22-33022r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  descend(anne,donna). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> or 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb127">
<a id="x22-33024r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  descend(bridget,emily). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> we get the answer no, which is 
<span class="cmti-10"> not 
</span> what we want. Sure, we could ‘fix’ this by adding the following two rules: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb128">
<a id="x22-33026r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  descend(X,Y) 
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  child(X,Z_1), 
</span>
<br class="fancyvrb"/>
<a id="x22-33028r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  child(Z_1,Z_2), 
</span>
<br class="fancyvrb"/>
<a id="x22-33030r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  child(Z_2,Y). 
</span>
<br class="fancyvrb"/>
<a id="x22-33032r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x22-33034r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  descend(X,Y) 
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  child(X,Z_1), 
</span>
<br class="fancyvrb"/>
<a id="x22-33036r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  child(Z_1,Z_2), 
</span>
<br class="fancyvrb"/>
<a id="x22-33038r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  child(Z_2,Z_3), 
</span>
<br class="fancyvrb"/>
<a id="x22-33040r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  child(Z_3,Y). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> But, let’s face it, this is clumsy and hard to read. Moreover, if we add further child-of facts, we could easily find ourselves having to add more and more rules as our list of child-of facts grow, rules like: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb129">
<a id="x22-33042r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  descend(X,Y) 
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  child(X,Z_1), 
</span>
<br class="fancyvrb"/>
<a id="x22-33044r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  child(Z_1,Z_2), 
</span>
<br class="fancyvrb"/>
<a id="x22-33046r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  child(Z_2,Z_3), 
</span>
<br class="fancyvrb"/>
<a id="x22-33048r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  . 
</span>
<br class="fancyvrb"/>
<a id="x22-33050r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  . 
</span>
<br class="fancyvrb"/>
<a id="x22-33052r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  . 
</span>
<br class="fancyvrb"/>
<a id="x22-33054r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  child(Z_17,Z_18). 
</span>
<br class="fancyvrb"/>
<a id="x22-33056r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  child(Z_18,Z_19). 
</span>
<br class="fancyvrb"/>
<a id="x22-33058r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  child(Z_19,Y). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> This is not a particularly pleasant (or sensible) way to go! 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> But we don’t need to do this at all. We can avoid having to use ever longer rules entirely. The following recursive predicate definition fixes everything exactly the way we want: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb130">
<a id="x22-33060r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  descend(X,Y) 
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  child(X,Y). 
</span>
<br class="fancyvrb"/>
<a id="x22-33062r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x22-33064r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  descend(X,Y) 
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  child(X,Z), 
</span>
<br class="fancyvrb"/>
<a id="x22-33066r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  descend(Z,Y). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> What does this say? The declarative meaning of the base clause is: 
<span class="cmti-10"> if 
</span>
<span class="verb">
<span class="cmtt-10"> Y 
</span>
</span> is a child of 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> , 
<span class="cmti-10"> then 
</span>
<span class="verb">
<span class="cmtt-10"> Y 
</span>
</span> is a descendant of 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> . Obviously sensible. So what about the recursive clause? Its declarative meaning is: 
<span class="cmti-10"> if 
</span>
<span class="verb">
<span class="cmtt-10"> Z 
</span>
</span> is a child of 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> , 
<span class="cmti-10"> and 
</span>
<span class="verb">
<span class="cmtt-10"> Y 
</span>
</span> is a descendant of 
<span class="verb">
<span class="cmtt-10"> Z 
</span>
</span> , 
<span class="cmti-10"> then 
</span>
<span class="verb">
<span class="cmtt-10"> Y 
</span>
</span> is a descendant of 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> . Again, this is obviously true. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> So let’s now look at the procedural meaning of this recursive predicate, by stepping through an example. What happens when we pose the query: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb131">
<a id="x22-33068r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  descend(anne,donna) 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Prolog first tries the first rule. The variable 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> in the head of the rule is unified with 
<span class="verb">
<span class="cmtt-10"> anne 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> Y 
</span>
</span> with 
<span class="verb">
<span class="cmtt-10"> donna 
</span>
</span> and the next goal Prolog tries to prove is 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb132">
<a id="x22-33070r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  child(anne,donna) 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> This attempt fails, however, since the knowledge base neither contains the fact 
<span class="verb">
<span class="cmtt-10"> child(anne,donna) 
</span>
</span> nor any rules that would allow to infer it. So Prolog backtracks and looks for an alternative way of proving 
<span class="verb">
<span class="cmtt-10"> descend(anne,donna) 
</span>
</span> . It finds the second rule in the knowledge base and now has the following subgoals: 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb133">
<a id="x22-33072r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  child(anne,_633), 
</span>
<br class="fancyvrb"/>
<a id="x22-33074r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  descend(_633,donna). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Prolog takes the first subgoal and tries to unify it with something in the knowledge base. It finds the fact 
<span class="verb">
<span class="cmtt-10"> child(anne,bridget) 
</span>
</span> and the variable 
<span class="verb">
<span class="cmtt-10"> _633 
</span>
</span> gets instantiated to 
<span class="verb">
<span class="cmtt-10"> bridget 
</span>
</span> . Now that the first subgoal is satisfied, Prolog moves to the second subgoal. It has to prove 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb134">
<a id="x22-33076r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  descend(bridget,donna) 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> This is the first recursive call of the predicate 
<span class="verb">
<span class="cmtt-10"> descend/2 
</span>
</span> . As before, Prolog starts with the first rule, but fails, because the goal 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb135">
<a id="x22-33078r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  child(bridget,donna) 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> cannot be proved. Backtracking, Prolog finds that there is a second possibility to be checked for 
<span class="verb">
<span class="cmtt-10"> descend(bridget,donna) 
</span>
</span> , namely the second rule, which again gives Prolog two new subgoals: 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb136">
<a id="x22-33080r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  child(bridget,_1785), 
</span>
<br class="fancyvrb"/>
<a id="x22-33082r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  descend(_1785,donna). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> The first one can be unified with the fact 
<span class="verb">
<span class="cmtt-10"> child(bridget,caroline) 
</span>
</span> of the knowledge base, so that the variable 
<span class="verb">
<span class="cmtt-10"> _1785 
</span>
</span> is instantiated with 
<span class="verb">
<span class="cmtt-10"> caroline 
</span>
</span> . Next Prolog tries to prove 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb137">
<a id="x22-33084r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  descend(caroline,donna). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> This is the second recursive call of predicate 
<span class="verb">
<span class="cmtt-10"> descend/2 
</span>
</span> . As before, it tries the first rule first, obtaining the following new goal: 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb138">
<a id="x22-33086r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  child(caroline,donna) 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> This time Prolog succeeds, since 
<span class="verb">
<span class="cmtt-10"> child(caroline,donna) 
</span>
</span> is a fact in the database. Prolog has found a proof for the goal 
<span class="verb">
<span class="cmtt-10"> descend(caroline,donna) 
</span>
</span> (the second recursive call). But this means that 
<span class="verb">
<span class="cmtt-10"> descend(bridget,donna) 
</span>
</span> (the first recursive call) is also true, which means that our original query 
<span class="verb">
<span class="cmtt-10"> descend(anne,donna) 
</span>
</span> is true as well. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Here is the search tree for the query 
<span class="verb">
<span class="cmtt-10"> descend(anne,donna) 
</span>
</span> . Make sure that you understand how it relates to the discussion in the text; that is, how Prolog traverses this search tree when trying to prove this query. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="center">
<!--l. 372-->
<p class="noindent">
</p>
<!--l. 373-->
<p class="noindent">
<img alt="*Pic not found*" src="html/chap3-pspic1.ps.png"/>
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> It should be obvious from this example that no matter how many generations of children we add, we will always be able to work out the descendant relation. That is, the recursive definition is both general and compact: it contains 
<span class="cmti-10"> all 
</span> the information in the non-recursive rules, and much more besides. The non-recursive rules only defined the descendant concept up to some fixed number of generations: we would need to write down infinitely many non-recursive rules if we wanted to capture this concept fully, and of course that’s impossible. But, in effect, that’s what the recursive rule does for us: it bundles up the information needed to cope with arbitrary numbers of generations into just three lines of code. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Recursive rules are really important. They enable to pack an enormous amount of information into a compact form and to define predicates in a natural way. Most of the work you will do as a Prolog programmer will involve writing recursive rules. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent">
</p>
</div>
<div class="nb-cell html" name="htm1">
<h4 class="likesubsectionHead">
<a id="x22-340003.1">
</a> Example 3: Successor 
</h4>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> In the previous chapter we remarked that building structure through unification is a key idea in Prolog programming. Now that we know about recursion, we can give more interesting illustrations of this. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Nowadays, when human beings write numerals, they usually use 
<span class="cmti-10"> decimal 
</span> notation (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, and so on) but as you probably know, there are many other notations. For example, because computer hardware is generally based on digital circuits, computers usually use 
<span class="cmti-10"> binary 
</span> notation to represent numerals (0, 1, 10, 11, 100, 101, 110, 111, 1000, and so on), for the 0 can be implemented as a switch being off, the 1 as a switch being on. Other cultures use different systems. For example, the ancient Babylonians used a base 60 system, while the ancient Romans used a rather ad-hoc system (I, II, III, IV, V, VI, VII, VIII, IX, X). This last example shows that notational issues can be important. If you don’t believe this, try figuring out a systematic way of doing long-division in Roman notation. As you’ll discover, it’s a frustrating task. Apparently the Romans had a group of professionals (analogs of modern accountants) who specialised in this. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Well, here’s yet another way of writing numerals, which is sometimes used in mathematical logic. It makes use of just four symbols: 0, 
<span class="cmti-10"> succ 
</span> , and the left and right parentheses. This style of numeral is defined by the following inductive definition: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<ol class="enumerate1">
<li class="enumerate" id="x22-34002x1"> 0 is a numeral. 
</li>
<li class="enumerate" id="x22-34004x2"> If 
<span class="cmti-10"> X 
</span> is a numeral, then so is 
<span class="cmti-10"> succ(X) 
</span> . 
</li>
</ol>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> As is probably clear, 
<span class="cmti-10"> succ 
</span> can be read as short for 
<span class="cmti-10"> successor 
</span> . That is, 
<span class="cmti-10"> succ(X) 
</span> represents the number obtained by adding one to the number represented by 
<span class="cmti-10"> X 
</span> . So this is a very simple notation: it simply says that 0 is a numeral, and that all other numerals are built by stacking 
<span class="cmti-10"> succ 
</span> symbols in front. (In fact, it’s used in mathematical logic because of this simplicity. Although it wouldn’t be pleasant to do household accounts in this notation, it is a very easy notation to prove things 
<span class="cmti-10"> about 
</span> .) 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Now, by this stage it should be clear that we can turn this definition into a Prolog program. The following knowledge base does this: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb139">
<a id="x22-34006r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  numeral(0). 
</span>
<br class="fancyvrb"/>
<a id="x22-34008r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x22-34010r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  numeral(succ(X)) 
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  numeral(X). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> So if we pose queries like 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb140">
<a id="x22-34012r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  numeral(succ(succ(succ(0)))). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> we get the answer yes. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> But we can do some more interesting things. Consider what happens when we pose the following query: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb141">
<a id="x22-34014r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  numeral(X). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> That is, we’re saying “Ok, show me some numerals”. Then we can have the following dialogue with Prolog: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb142">
<a id="x22-34016r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  0 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x22-34018r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x22-34020r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  succ(0) 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x22-34022r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x22-34024r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  succ(succ(0)) 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x22-34026r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x22-34028r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  succ(succ(succ(0))) 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x22-34030r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x22-34032r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  succ(succ(succ(succ(0)))) 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x22-34034r10">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x22-34036r11">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  succ(succ(succ(succ(succ(0))))) 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x22-34038r12">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x22-34040r13">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  succ(succ(succ(succ(succ(succ(0)))))) 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x22-34042r14">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x22-34044r15">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  succ(succ(succ(succ(succ(succ(succ(0))))))) 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x22-34046r16">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x22-34048r17">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  succ(succ(succ(succ(succ(succ(succ(succ(0)))))))) 
</span>
<br class="fancyvrb"/>
<a id="x22-34050r18">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Yes, Prolog is counting: but what’s really important is 
<span class="cmti-10"> how 
</span> it’s doing this. Quite simply, it’s backtracking through the recursive definition, and actually 
<span class="cmti-10"> building 
</span> numerals using unification. This is an instructive example, and it is important that you understand it. The best way to do so is to sit down and try it out, with 
<span class="verb">
<span class="cmtt-10"> trace 
</span>
</span> turned on. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Building and binding. Recursion, unification, and proof search. These are ideas that lie at the heart of Prolog programming. Whenever we have to generate or analyse recursively structured objects (such as these numerals) the interplay of these ideas makes Prolog a powerful tool. For example, in the next chapter we shall introduce lists, an extremely important recursive data structure, and we will see that Prolog is a natural list processing language. Many applications (computational linguistics is a prime example) make heavy use of recursively structured objects, such as trees and feature structures. So it’s not particularly surprising that Prolog has proved useful in such applications. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent">
</p>
</div>
<div class="nb-cell html" name="htm1">
<h4 class="likesubsectionHead">
<a id="x22-350003.1">
</a> Example 4: Addition 
</h4>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> As a final example, let’s see whether we can use the representation of numerals that we introduced in the previous section for doing simple arithmetic. Let’s try to define addition. That is, we want to define a predicate 
<span class="verb">
<span class="cmtt-10"> add/3 
</span>
</span> which when given two numerals as the first and second argument returns the result of adding them up as its third argument. For example: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb143">
<a id="x22-35002r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  add(succ(succ(0)),succ(succ(0)), 
</span>
<br class="fancyvrb"/>
<a id="x22-35004r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  succ(succ(succ(succ(0))))). 
</span>
<br class="fancyvrb"/>
<a id="x22-35006r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x22-35008r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  add(succ(succ(0)),succ(0),Y). 
</span>
<br class="fancyvrb"/>
<a id="x22-35010r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Y 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  succ(succ(succ(0))) 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> There are two things which are important to notice: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<ol class="enumerate1">
<li class="enumerate" id="x22-35012x1"> Whenever the first argument is 
<span class="verb">
<span class="cmtt-10"> 0 
</span>
</span> , the third argument has to be the same as the second argument: 
<div class="fancyvrb" id="fancyvrb144">
<a id="x22-35014r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  add(0,succ(succ(0)),Y). 
</span>
<br class="fancyvrb"/>
<a id="x22-35016r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Y 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  succ(succ(0)) 
</span>
<br class="fancyvrb"/>
<a id="x22-35018r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  add(0,0,Y). 
</span>
<br class="fancyvrb"/>
<a id="x22-35020r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Y 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  0 
</span>
</div>
<!--l. 533-->
<p class="noindent"> This is the case that we want to use for the base clause. 
</p>
</li>
<li class="enumerate" id="x22-35022x2"> Assume that we want to add the two numerals 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> Y 
</span>
</span> (for example 
<span class="verb">
<span class="cmtt-10"> succ(succ(succ(0))) 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> succ(succ(0)) 
</span>
</span> ) and that 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> is not 
<span class="verb">
<span class="cmtt-10"> 0 
</span>
</span> . Now, if 
<span class="verb">
<span class="cmtt-10"> X1 
</span>
</span> is the numeral that has one 
<span class="verb">
<span class="cmtt-10"> succ 
</span>
</span> functor less than 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> (that is, 
<span class="verb">
<span class="cmtt-10"> succ(succ(0)) 
</span>
</span> in our example) and if we know the result – let’s call it 
<span class="verb">
<span class="cmtt-10"> Z 
</span>
</span> – of adding 
<span class="verb">
<span class="cmtt-10"> X1 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> Y 
</span>
</span> (namely 
<span class="verb">
<span class="cmtt-10"> succ(succ(succ(succ(0)))) 
</span>
</span> ), then it is very easy to compute the result of adding 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> Y 
</span>
</span> : we just have to add one 
<span class="verb">
<span class="cmtt-10"> succ 
</span>
</span> -functor to 
<span class="verb">
<span class="cmtt-10"> Z 
</span>
</span> . This is what we want to express with the recursive clause. 
</li>
</ol>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Here is the predicate definition that expresses exactly what we just said: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb145">
<a id="x22-35024r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  add(0,Y,Y). 
</span>
<br class="fancyvrb"/>
<a id="x22-35026r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  add(succ(X),Y,succ(Z)) 
</span>
<span class="cmtt-10">  :- 
</span>
<br class="fancyvrb"/>
<a id="x22-35028r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  add(X,Y,Z). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> So what happens, if we give Prolog this predicate definition and then ask: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb146">
<a id="x22-35030r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  add(succ(succ(succ(0))), 
</span>
<span class="cmtt-10">  succ(succ(0)), 
</span>
<span class="cmtt-10">  R). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Let’s go step by step through the way Prolog processes this query. The trace and search tree for the query are given below. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> The first argument is not 
<span class="verb">
<span class="cmtt-10"> 0 
</span>
</span> , which means that only the second clause for 
<span class="verb">
<span class="cmtt-10"> add/3 
</span>
</span> can be used. This leads to a recursive call of 
<span class="verb">
<span class="cmtt-10"> add/3 
</span>
</span> . The outermost 
<span class="verb">
<span class="cmtt-10"> succ 
</span>
</span> functor is stripped off the first argument of the original query, and the result becomes the first argument of the recursive query. The second argument is passed on unchanged to the recursive query, and the third argument of the recursive query is a variable, the internal variable 
<span class="verb">
<span class="cmtt-10"> _G648 
</span>
</span> in the trace given below. Note that 
<span class="verb">
<span class="cmtt-10"> _G648 
</span>
</span> is not instantiated yet. However it shares values with 
<span class="verb">
<span class="cmtt-10"> R 
</span>
</span> (the variable that we used as the third argument in the original query) because 
<span class="verb">
<span class="cmtt-10"> R 
</span>
</span> was instantiated to 
<span class="verb">
<span class="cmtt-10"> succ(_G648) 
</span>
</span> when the query was unified with the head of the second clause. But that means that 
<span class="verb">
<span class="cmtt-10"> R 
</span>
</span> is not a completely uninstantiated variable anymore. It is now a complex term, that has a (uninstantiated) variable as its argument. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> The next two steps are essentially the same. With every step the first argument becomes one layer of 
<span class="verb">
<span class="cmtt-10"> succ 
</span>
</span> smaller; both the trace and the search tree given below show this nicely. At the same time, a 
<span class="verb">
<span class="cmtt-10"> succ 
</span>
</span> functor is added to 
<span class="verb">
<span class="cmtt-10"> R 
</span>
</span> at every step, but always leaving the innermost variable uninstantiated. After the first recursive call 
<span class="verb">
<span class="cmtt-10"> R 
</span>
</span> is 
<span class="verb">
<span class="cmtt-10"> succ(_G648) 
</span>
</span> . After the second recursive call, 
<span class="verb">
<span class="cmtt-10"> _G648 
</span>
</span> is instantiated with 
<span class="verb">
<span class="cmtt-10"> succ(_G650) 
</span>
</span> , so that 
<span class="verb">
<span class="cmtt-10"> R 
</span>
</span> is 
<span class="verb">
<span class="cmtt-10"> succ(succ(_G650) 
</span>
</span> . After the third recursive call, 
<span class="verb">
<span class="cmtt-10"> _G650 
</span>
</span> is instantiated with 
<span class="verb">
<span class="cmtt-10"> succ(_G652) 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> R 
</span>
</span> therefore becomes 
<span class="verb">
<span class="cmtt-10"> succ(succ(succ(_G652))) 
</span>
</span> . The search tree shows this step by step instantiation. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> At this stage all 
<span class="verb">
<span class="cmtt-10"> succ 
</span>
</span> functors have been stripped off the first argument and we can apply the base clause. The third argument is equated with the second argument, so the ‘hole’ (the uninstantiated variable) in the complex term 
<span class="verb">
<span class="cmtt-10"> R 
</span>
</span> is finally filled, and we are through. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Here’s the complete trace of our query: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb147">
<a id="x22-35032r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Call: 
</span>
<span class="cmtt-10">  (6) 
</span>
<span class="cmtt-10">  add(succ(succ(succ(0))), 
</span>
<span class="cmtt-10">  succ(succ(0)), 
</span>
<span class="cmtt-10">  R) 
</span>
<br class="fancyvrb"/>
<a id="x22-35034r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x22-35036r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Call: 
</span>
<span class="cmtt-10">  (7) 
</span>
<span class="cmtt-10">  add(succ(succ(0)), 
</span>
<span class="cmtt-10">  succ(succ(0)), 
</span>
<span class="cmtt-10">  _G648) 
</span>
<br class="fancyvrb"/>
<a id="x22-35038r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x22-35040r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Call: 
</span>
<span class="cmtt-10">  (8) 
</span>
<span class="cmtt-10">  add(succ(0), 
</span>
<span class="cmtt-10">  succ(succ(0)), 
</span>
<span class="cmtt-10">  _G650) 
</span>
<br class="fancyvrb"/>
<a id="x22-35042r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x22-35044r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Call: 
</span>
<span class="cmtt-10">  (9) 
</span>
<span class="cmtt-10">  add(0, 
</span>
<span class="cmtt-10">  succ(succ(0)), 
</span>
<span class="cmtt-10">  _G652) 
</span>
<br class="fancyvrb"/>
<a id="x22-35046r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x22-35048r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Exit: 
</span>
<span class="cmtt-10">  (9) 
</span>
<span class="cmtt-10">  add(0, 
</span>
<span class="cmtt-10">  succ(succ(0)), 
</span>
<span class="cmtt-10">  succ(succ(0))) 
</span>
<br class="fancyvrb"/>
<a id="x22-35050r10">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x22-35052r11">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Exit: 
</span>
<span class="cmtt-10">  (8) 
</span>
<span class="cmtt-10">  add(succ(0), 
</span>
<span class="cmtt-10">  succ(succ(0)), 
</span>
<span class="cmtt-10">  succ(succ(succ(0)))) 
</span>
<br class="fancyvrb"/>
<a id="x22-35054r12">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x22-35056r13">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Exit: 
</span>
<span class="cmtt-10">  (7) 
</span>
<span class="cmtt-10">  add(succ(succ(0)), 
</span>
<span class="cmtt-10">  succ(succ(0)), 
</span>
<br class="fancyvrb"/>
<a id="x22-35058r14">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  succ(succ(succ(succ(0))))) 
</span>
<br class="fancyvrb"/>
<a id="x22-35060r15">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x22-35062r16">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Exit: 
</span>
<span class="cmtt-10">  (6) 
</span>
<span class="cmtt-10">  add(succ(succ(succ(0))), 
</span>
<span class="cmtt-10">  succ(succ(0)), 
</span>
<br class="fancyvrb"/>
<a id="x22-35064r17">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  succ(succ(succ(succ(succ(0)))))) 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> And here’s the search tree: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="center">
<!--l. 615-->
<p class="noindent">
</p>
<!--l. 616-->
<p class="noindent">
<img alt="*Pic not found*" src="html/chap3-pspic2.ps.png"/>
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse10"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse9"> front 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch3"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent">
<a id="taillpn-htmlse9">
</a>
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse11"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse9"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse9"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=#taillpn-htmlse10"> tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch3"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<h3 class="sectionHead">
<span class="titlemark"> 3.2 
</span>
<a id="x23-360003.2">
</a> Rule Ordering, Goal Ordering, and Termination 
</h3>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Prolog was the first reasonably successful attempt to create a logic programming language. Underlying logic programming is a simple (and seductive) vision: the task of the programmer is simply to 
<span class="cmti-10"> describe 
</span> problems. The programmer should write down (in the language of logic) a declarative specification (that is: a knowledge base), which describes the situation of interest. The programmer shouldn’t have to tell the computer 
<span class="cmti-10"> what 
</span> to do. To get information, he or she simply asks the questions. It’s up to the logic programming system to figure out how to get the answer. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Well, that’s the idea, and it should be clear that Prolog has taken some important steps in this direction. But Prolog is 
<span class="cmti-10"> not 
</span> , repeat 
<span class="cmti-10"> not 
</span> , a full logic programming language. If you only think about the declarative meaning of a Prolog program, you are in for a very tough time. As we learned in the previous chapter, Prolog has a very specific way of working out the answers to queries: it searches the knowledge base from top to bottom, clauses from left to right, and uses backtracking to recover from bad choices. These procedural aspects have an important influence on what actually happens when you make a query. We have already seen a dramatic example of a mismatch between the procedural and declarative meaning of a knowledge base (remember the 
<span class="verb">
<span class="cmtt-10"> p:- 
</span>
<span class="cmtt-10">  p 
</span>
</span> program?), and as we shall now see, it is easy to define knowledge bases which (read logically) describe the same situations, but which behave very differently. Let’s consider the matter. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Recall our earlier descendant program (let’s call it 
<span class="verb">
<span class="cmtt-10"> descend1.pl 
</span>
</span> ): 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb148">
<a id="x23-36002r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  child(anne,bridget). 
</span>
<br class="fancyvrb"/>
<a id="x23-36004r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  child(bridget,caroline). 
</span>
<br class="fancyvrb"/>
<a id="x23-36006r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  child(caroline,donna). 
</span>
<br class="fancyvrb"/>
<a id="x23-36008r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  child(donna,emily). 
</span>
<br class="fancyvrb"/>
<a id="x23-36010r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x23-36012r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  descend(X,Y) 
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  child(X,Y). 
</span>
<br class="fancyvrb"/>
<a id="x23-36014r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x23-36016r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  descend(X,Y) 
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  child(X,Z), 
</span>
<br class="fancyvrb"/>
<a id="x23-36018r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  descend(Z,Y). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> We’ll make one change to it, and call the result 
<span class="verb">
<span class="cmtt-10"> descend2.pl 
</span>
</span> : 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb149">
<a id="x23-36020r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  child(anne,bridget). 
</span>
<br class="fancyvrb"/>
<a id="x23-36022r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  child(bridget,caroline). 
</span>
<br class="fancyvrb"/>
<a id="x23-36024r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  child(caroline,donna). 
</span>
<br class="fancyvrb"/>
<a id="x23-36026r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  child(donna,emily). 
</span>
<br class="fancyvrb"/>
<a id="x23-36028r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x23-36030r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  descend(X,Y) 
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  child(X,Z), 
</span>
<br class="fancyvrb"/>
<a id="x23-36032r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  descend(Z,Y). 
</span>
<br class="fancyvrb"/>
<a id="x23-36034r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x23-36036r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  descend(X,Y) 
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  child(X,Y). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> All we have done is change the rule order. So if we read the program as a purely logical definition, nothing has changed. But does the change give rise to procedural differences? Yes, but nothing significant. For example, if you work through the examples you will see that the first solution that 
<span class="verb">
<span class="cmtt-10"> descend1.pl 
</span>
</span> finds is 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb150">
<a id="x23-36038r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  anne 
</span>
<br class="fancyvrb"/>
<a id="x23-36040r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Y 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  bridget 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> whereas the first solution that 
<span class="verb">
<span class="cmtt-10"> descend2.pl 
</span>
</span> finds is 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb151">
<a id="x23-36042r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  anne 
</span>
<br class="fancyvrb"/>
<a id="x23-36044r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Y 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  emily 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> But (as you should check) both programs generate exactly the same answers, they merely find them in a different order. And this is a general point. Roughly speaking (we’ll add a caveat later on) changing the order of rules in a Prolog program does not change (up to the order in which solutions are found) the program’s behaviour. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> So let’s move on. We’ll make one small change to 
<span class="verb">
<span class="cmtt-10"> descend2.pl 
</span>
</span> , and call the result 
<span class="verb">
<span class="cmtt-10"> descend3.pl 
</span>
</span> : 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb152">
<a id="x23-36046r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  child(anne,bridget). 
</span>
<br class="fancyvrb"/>
<a id="x23-36048r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  child(bridget,caroline). 
</span>
<br class="fancyvrb"/>
<a id="x23-36050r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  child(caroline,donna). 
</span>
<br class="fancyvrb"/>
<a id="x23-36052r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  child(donna,emily). 
</span>
<br class="fancyvrb"/>
<a id="x23-36054r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x23-36056r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  descend(X,Y) 
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  descend(Z,Y), 
</span>
<br class="fancyvrb"/>
<a id="x23-36058r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  child(X,Z). 
</span>
<br class="fancyvrb"/>
<a id="x23-36060r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x23-36062r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  descend(X,Y) 
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  child(X,Y). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Note the difference. Here we’ve changed the goal order 
<span class="cmti-10"> within 
</span> a rule, not the rule order. Now, once again, if we read the program as a purely logical definition, nothing has changed; it means the same thing as the previous two versions. But this time the program’s behaviour has changed dramatically. For example, if you pose the query 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb153">
<a id="x23-36064r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  descend(anne,emily). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> you will get an error message (“out of local stack”, or something similar). Prolog is looping. Why? Well, in order to satisfy the query 
<span class="verb">
<span class="cmtt-10"> descend(anne,emily) 
</span>
</span> Prolog uses the first rule. This means that its next goal will be to satisfy the query 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb154">
<a id="x23-36066r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  descend(W1,emily) 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> for some new variable 
<span class="verb">
<span class="cmtt-10"> W1 
</span>
</span> . But to satisfy this new goal, Prolog again has to use the first rule, and this means that its next goal is going to be 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb155">
<a id="x23-36068r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  descend(W2,emily) 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> for some new variable 
<span class="verb">
<span class="cmtt-10"> W2 
</span>
</span> . And of course, this in turn means that its next goal is going to be 
<span class="verb">
<span class="cmtt-10"> descend(W3,emily) 
</span>
</span> and then 
<span class="verb">
<span class="cmtt-10"> descend(W4,emily) 
</span>
</span> , and so on. That is, the (at first glance innocuous) change in the goal order has resulted in procedural disaster. To use the standard terminology, we have here a classic example of a left recursive rule, that is, a rule where the leftmost item of the body is identical (modulo the choice of variables) with the rule’s head. As our example shows, such rules easily give rise to non-terminating computations. Goal order, and in particular left recursion, is the root of all evil when it comes to non-termination. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Still, as we said earlier, we need to make one small caveat about rule ordering. We said earlier that rule ordering only changes the order in which solutions are found. However this may not be true if we are working with non-terminating programs. To see this, consider the fourth (and last) variant of our descendant program, namely 
<span class="verb">
<span class="cmtt-10"> descend4.pl 
</span>
</span> : 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb156">
<a id="x23-36070r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  child(anne,bridget). 
</span>
<br class="fancyvrb"/>
<a id="x23-36072r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  child(bridget,caroline). 
</span>
<br class="fancyvrb"/>
<a id="x23-36074r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  child(caroline,donna). 
</span>
<br class="fancyvrb"/>
<a id="x23-36076r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  child(donna,emily). 
</span>
<br class="fancyvrb"/>
<a id="x23-36078r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x23-36080r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  descend(X,Y) 
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  child(X,Y). 
</span>
<br class="fancyvrb"/>
<a id="x23-36082r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x23-36084r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  descend(X,Y) 
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  descend(Z,Y), 
</span>
<br class="fancyvrb"/>
<a id="x23-36086r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  child(X,Z). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> This program is 
<span class="verb">
<span class="cmtt-10"> descend3.pl 
</span>
</span> with the rule ordering reversed. Now (once again) this program has the same declarative meaning as the other variants, but it is also procedurally different from its relatives. First, and most obviously, it is very different procedurally from both 
<span class="verb">
<span class="cmtt-10"> descend1.pl 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> descend2.pl 
</span>
</span> . In particular, because it contains a left recursive rule, this new program does not terminate on some input. For example (just like 
<span class="verb">
<span class="cmtt-10"> descend3.pl 
</span>
</span> ) this new program does not terminate when we pose the query 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb157">
<a id="x23-36088r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  descend(anne,emily). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> But 
<span class="verb">
<span class="cmtt-10"> descend4.pl 
</span>
</span> is not procedurally identical to 
<span class="verb">
<span class="cmtt-10"> descend3.pl 
</span>
</span> . The rule ordering reversal does make a difference. For example, 
<span class="verb">
<span class="cmtt-10"> descend3.pl 
</span>
</span> will not terminate if we pose the query 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb158">
<a id="x23-36090r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  descend(anne,bridget). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> However 
<span class="verb">
<span class="cmtt-10"> descend4.pl 
</span>
</span> will terminate in this case, for the rule reversal enables it to apply the non-recursive rule and halt. So when it comes to non-terminating programs, rule ordering changes can lead to some extra solutions being found. Nonetheless, goal ordering, not rule ordering, is what is truly procedurally significant. To ensure termination, we need to pay attention to the order of goals within the bodies of rules. Tinkering with rule orderings does not get to grips with the roots of termination problems — at best it can yield some extra solutions. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Summing up, our four variant descendant programs are Prolog knowledge bases which describe exactly the same situations, but behave differently. The difference in behaviour between 
<span class="verb">
<span class="cmtt-10"> descend1.pl 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> descend2.pl 
</span>
</span> (which differ only in the way rules are ordered) is relatively minor: they generate the same solutions, but in a different order. But 
<span class="verb">
<span class="cmtt-10"> descend3.pl 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> descend4.pl 
</span>
</span> are procedurally very different from their two cousins, and this is because they differ from them in the way their goals are ordered. In particular, both these variants contain left recursive rules, and in both cases this leads to non-terminating behaviour. The change in rule ordering between 
<span class="verb">
<span class="cmtt-10"> descend3.pl 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> descend4.pl 
</span>
</span> merely means that 
<span class="verb">
<span class="cmtt-10"> descend4.pl 
</span>
</span> will terminate in some cases where 
<span class="verb">
<span class="cmtt-10"> descend3.pl 
</span>
</span> will not. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> What are the ramifications of our discussion for the practicalities of producing working Prolog programs? It’s probably best to say the following. Often you can get the overall idea (the big picture) of how to write the program by thinking declaratively, that is, by thinking in terms of describing the problem accurately. This is an excellent way to approach problems, and certainly the one most in keeping with the spirit of logic programming. But once you’ve done that, you need to think about how Prolog will work with knowledge bases you have written. In particular, to ensure termination, you need to check that the goal orderings you have given are sensible. The basic rule of thumb is never to write as the leftmost goal of the body something that is identical (modulo variable names) with the goal given in the head. Rather, place such goals (which trigger recursive calls) as far as possible towards the right of the tail. That is, place them after the goals which test for the various (non-recursive) termination conditions. Doing this gives Prolog a sporting chance of fighting it’s way through your recursive definitions to find solutions. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse11"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse9"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse9"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse10"> front 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch3"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent">
<a id="taillpn-htmlse10">
</a>
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse12"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse10"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse10"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=#taillpn-htmlse11"> tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch3"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<h3 class="sectionHead">
<span class="titlemark"> 3.3 
</span>
<a id="x24-370003.3">
</a> <strong>Exercise</strong>s 
</h3>
</div>
<div class="nb-cell html" name="htm1">
<div class="newtheorem">
<!--l. 827-->
<p class="noindent">
<span class="head">
<span class="cmbx-10"> <strong>Exercise</strong>
</span>
<span class="cmbx-10">  3.1 
</span>
</span>
<a id="x24-370011">
</a>
<span class="cmti-10"> In the text, we discussed the predicate 
</span>
</p>
<div class="fancyvrb" id="fancyvrb159">
<a id="x24-37003r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  descend(X,Y) 
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  child(X,Y). 
</span>
<br class="fancyvrb"/>
<a id="x24-37005r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  descend(X,Y) 
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  child(X,Z), 
</span>
<br class="fancyvrb"/>
<a id="x24-37007r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  descend(Z,Y). 
</span>
</div>
<!--l. 833-->
<p class="noindent">
<span class="cmti-10"> Suppose we reformulated this predicate as follows: 
</span>
</p>
<div class="fancyvrb" id="fancyvrb160">
<a id="x24-37009r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  descend(X,Y) 
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  child(X,Y). 
</span>
<br class="fancyvrb"/>
<a id="x24-37011r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  descend(X,Y) 
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  descend(X,Z), 
</span>
<br class="fancyvrb"/>
<a id="x24-37013r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  descend(Z,Y). 
</span>
</div>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Would this be problematic? 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="newtheorem">
<!--l. 843-->
<p class="noindent">
<span class="head">
<span class="cmbx-10"> <strong>Exercise</strong>
</span>
<span class="cmbx-10">  3.2 
</span>
</span>
<a id="x24-370142">
</a>
<span class="cmti-10"> Do you know these wooden Russian dolls (Matryoshka dolls) 
</span>
<span class="cmti-10"> where the smaller ones are contained in bigger ones? Here is a schematic picture: 
</span>
</p>
<!--l. 847-->
<p class="indent">
<img alt="*Pic not found*" src="html/dolls.eps.png"/>
</p>
<!--l. 849-->
<p class="indent">
<span class="cmti-10"> First, write a knowledge base using the predicate 
</span>
<span class="verb">
<span class="cmtt-10"> directlyIn/2 
</span>
</span>
<span class="cmti-10"> which 
</span>
<span class="cmti-10"> encodes which doll is directly contained in which other doll. Then, define a 
</span>
<span class="cmti-10"> recursive predicate 
</span>
<span class="verb">
<span class="cmtt-10"> in/2 
</span>
</span>
<span class="cmti-10"> , that tells us which doll is (directly or indirectly) 
</span>
<span class="cmti-10"> contained in which other dolls. For example, the query 
</span>
<span class="verb">
<span class="cmtt-10"> in(katarina,natasha) 
</span>
</span>
<span class="cmti-10"> should evaluate to true, while 
</span>
<span class="verb">
<span class="cmtt-10"> in(olga, 
</span>
<span class="cmtt-10">  katarina) 
</span>
</span>
<span class="cmti-10"> should fail. 
</span>
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<div class="newtheorem">
<!--l. 858-->
<p class="noindent">
<span class="head">
<span class="cmbx-10"> <strong>Exercise</strong>
</span>
<span class="cmbx-10">  3.3 
</span>
</span>
<a id="x24-370153">
</a>
<span class="cmti-10"> We have the following knowledge base: 
</span>
</p>
<div class="fancyvrb" id="fancyvrb161">
<a id="x24-37017r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  directTrain(saarbruecken,dudweiler). 
</span>
<br class="fancyvrb"/>
<a id="x24-37019r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  directTrain(forbach,saarbruecken). 
</span>
<br class="fancyvrb"/>
<a id="x24-37021r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  directTrain(freyming,forbach). 
</span>
<br class="fancyvrb"/>
<a id="x24-37023r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  directTrain(stAvold,freyming). 
</span>
<br class="fancyvrb"/>
<a id="x24-37025r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  directTrain(fahlquemont,stAvold). 
</span>
<br class="fancyvrb"/>
<a id="x24-37027r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  directTrain(metz,fahlquemont). 
</span>
<br class="fancyvrb"/>
<a id="x24-37029r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  directTrain(nancy,metz). 
</span>
</div>
<!--l. 869-->
<p class="indent">
<span class="cmti-10"> That is, this knowledge base holds facts about towns it is possible to travel between 
</span>
<span class="cmti-10"> by taking a 
</span> direct 
<span class="cmti-10"> train. But of course, we can travel further by chaining together 
</span>
<span class="cmti-10"> direct train journeys. Write a recursive predicate 
</span>
<span class="verb">
<span class="cmtt-10"> travelFromTo/2 
</span>
</span>
<span class="cmti-10"> that tells us 
</span>
<span class="cmti-10"> when we can travel by train between two towns. For example, when given the 
</span>
<span class="cmti-10"> query 
</span>
</p>
<div class="fancyvrb" id="fancyvrb162">
<a id="x24-37031r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  travelFromTo(nancy,saarbruecken). 
</span>
</div>
<!--l. 877-->
<p class="noindent">
<span class="cmti-10"> it should reply yes. 
</span>
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<div class="newtheorem">
<!--l. 881-->
<p class="noindent">
<span class="head">
<span class="cmbx-10"> <strong>Exercise</strong>
</span>
<span class="cmbx-10">  3.4 
</span>
</span>
<a id="x24-370324">
</a>
<span class="cmti-10"> Define a predicate 
</span>
<span class="verb">
<span class="cmtt-10"> greater_than/2 
</span>
</span>
<span class="cmti-10"> that takes two numerals in the 
</span>
<span class="cmti-10"> notation that we introduced in the text (that is, 0, succ(0), succ(succ(0)), and so on) 
</span>
<span class="cmti-10"> as arguments and decides whether the first one is greater than the second one. For 
</span>
<span class="cmti-10"> example: 
</span>
</p>
<div class="fancyvrb" id="fancyvrb163">
<a id="x24-37034r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  greater_than(succ(succ(succ(0))),succ(0)). 
</span>
<br class="fancyvrb"/>
<a id="x24-37036r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x24-37038r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  greater_than(succ(succ(0)),succ(succ(succ(0)))). 
</span>
<br class="fancyvrb"/>
<a id="x24-37040r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  no 
</span>
</div>
</div>
</div>
<div class="nb-cell html" name="htm1">
<div class="newtheorem">
<!--l. 892-->
<p class="noindent">
<span class="head">
<span class="cmbx-10"> <strong>Exercise</strong>
</span>
<span class="cmbx-10">  3.5 
</span>
</span>
<a id="x24-370415">
</a>
<span class="cmti-10"> Binary trees are trees where all internal nodes have exactly 
</span>
<span class="cmti-10"> two children. The smallest binary trees consist of only one leaf node. We 
</span>
<span class="cmti-10"> will represent leaf nodes as 
</span>
<span class="verb">
<span class="cmtt-10"> leaf(Label) 
</span>
</span>
<span class="cmti-10"> . For instance, 
</span>
<span class="verb">
<span class="cmtt-10"> leaf(3) 
</span>
</span>
<span class="cmti-10"> and 
</span>
<span class="verb">
<span class="cmtt-10"> leaf(7) 
</span>
</span>
<span class="cmti-10"> are leaf nodes, and therefore small binary trees. Given two binary trees 
</span>
<span class="verb">
<span class="cmtt-10"> B1 
</span>
</span>
<span class="cmti-10"> and 
</span>
<span class="verb">
<span class="cmtt-10"> B2 
</span>
</span>
<span class="cmti-10"> we can combine them into one binary tree using the functor 
</span>
<span class="verb">
<span class="cmtt-10"> tree/2 
</span>
</span>
<span class="cmti-10"> as follows: 
</span>
<span class="verb">
<span class="cmtt-10"> tree(B1,B2) 
</span>
</span>
<span class="cmti-10"> . So, from the leaves 
</span>
<span class="verb">
<span class="cmtt-10"> leaf(1) 
</span>
</span>
<span class="cmti-10"> and 
</span>
<span class="verb">
<span class="cmtt-10"> leaf(2) 
</span>
</span>
<span class="cmti-10"> we can build the binary tree 
</span>
<span class="verb">
<span class="cmtt-10"> tree(leaf(1),leaf(2)) 
</span>
</span>
<span class="cmti-10"> . And from the binary 
</span>
<span class="cmti-10"> trees 
</span>
<span class="verb">
<span class="cmtt-10"> tree(leaf(1),leaf(2)) 
</span>
</span>
<span class="cmti-10"> and 
</span>
<span class="verb">
<span class="cmtt-10"> leaf(4) 
</span>
</span>
<span class="cmti-10"> we can build the binary tree 
</span>
<span class="verb">
<span class="cmtt-10"> tree(tree(leaf(1), 
</span>
<span class="cmtt-10">  leaf(2)),leaf(4)) 
</span>
</span>
<span class="cmti-10"> . 
</span>
</p>
<!--l. 905-->
<p class="indent">
<span class="cmti-10"> Now, define a predicate 
</span>
<span class="verb">
<span class="cmtt-10"> swap/2 
</span>
</span>
<span class="cmti-10"> , which produces the mirror image of the binary 
</span>
<span class="cmti-10"> tree that is its first argument. For example: 
</span>
</p>
<div class="fancyvrb" id="fancyvrb164">
<a id="x24-37043r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  swap(tree(tree(leaf(1), 
</span>
<span class="cmtt-10">  leaf(2)), 
</span>
<span class="cmtt-10">  leaf(4)),T). 
</span>
<br class="fancyvrb"/>
<a id="x24-37045r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  T 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  tree(leaf(4), 
</span>
<span class="cmtt-10">  tree(leaf(2), 
</span>
<span class="cmtt-10">  leaf(1))). 
</span>
<br class="fancyvrb"/>
<a id="x24-37047r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse12"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse10"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse10"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse11"> front 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch3"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent">
<a id="taillpn-htmlse11">
</a>
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse11"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse11"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=#taillpn-htmlse12"> tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch3"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<h3 class="sectionHead">
<span class="titlemark"> 3.4 
</span>
<a id="x25-380003.4">
</a> Practical Session 
</h3>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> By now, you should feel more at home with writing and running basic Prolog programs. In this practical session we first suggest two series of keyboard exercises which will help you get familiar with recursive definitions in Prolog, and then give you some programming problems to solve. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> First the keyboard exercises. As recursive programming is so fundamental to Prolog, it is important that you have a firm grasp of what it involves. In particular, it is important that you understand the process of variable instantiation when recursive definitions are used, and that you understand why the order of goals in rules can make the difference between termination and non-termination. So: 
</p>
</div>

<div class="nb-cell html" name="htm1">
<ol class="enumerate1">
<li class="enumerate" id="x25-38002x1"> Load 
<span class="verb">
<span class="cmtt-10"> descend1.pl 
</span>
</span> , turn on 
<span class="verb">
<span class="cmtt-10"> trace 
</span>
</span> , and pose the query 
<span class="verb">
<span class="cmtt-10"> descend(anne,emily) 
</span>
</span> . Count how many steps it takes Prolog to work out the answer (that is, how many times do you have to hit the return key). Now turn 
<span class="verb">
<span class="cmtt-10"> trace 
</span>
</span> off and pose the query 
<span class="verb">
<span class="cmtt-10"> descend(X,Y) 
</span>
</span> . How many answers are there? 
</li>
<li class="enumerate" id="x25-38004x2"> Load 
<span class="verb">
<span class="cmtt-10"> descend2.pl 
</span>
</span> . This is the variant of 
<span class="verb">
<span class="cmtt-10"> descend1.pl 
</span>
</span> with the rule order reversed. Repeat the traces you have carried out for 
<span class="verb">
<span class="cmtt-10"> descend1.pl 
</span>
</span> , and compare the results. 
</li>
<li class="enumerate" id="x25-38006x3"> Load 
<span class="verb">
<span class="cmtt-10"> descend3.pl 
</span>
</span> . This is the variant of 
<span class="verb">
<span class="cmtt-10"> descend2.pl 
</span>
</span> in which the goal order within the recursive rule is switched, resulting in a left recursive rule. Because of this, even for such simple queries as 
<span class="verb">
<span class="cmtt-10"> descend(anne,bridget) 
</span>
</span> , Prolog will not terminate. Step through an example, using 
<span class="verb">
<span class="cmtt-10"> trace 
</span>
</span> , to confirm this. 
</li>
<li class="enumerate" id="x25-38008x4"> Load 
<span class="verb">
<span class="cmtt-10"> descend4.pl 
</span>
</span> . This is the variant of 
<span class="verb">
<span class="cmtt-10"> descend3.pl 
</span>
</span> obtained by switching the rule order. So 
<span class="verb">
<span class="cmtt-10"> descend4.pl 
</span>
</span> also contains a left recursive rule, and does not terminate on all input. But it does terminate on some input where 
<span class="verb">
<span class="cmtt-10"> descend3.pl 
</span>
</span> does not. Which extra solutions does it find? 
</li>
</ol>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> As we said in the text, goal ordering, not rule ordering is what is truly procedurally significant. But with non-terminating programs, rule ordering changes can have unexpected effects. Recall the successor program discussed in the text (let’s call it 
<span class="verb">
<span class="cmtt-10"> numeral1.pl 
</span>
</span> ): 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb165">
<a id="x25-38010r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  numeral(0). 
</span>
<br class="fancyvrb"/>
<a id="x25-38012r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  numeral(succ(X)) 
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  numeral(X). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Let’s swap the order of the two clauses, and call the result 
<span class="verb">
<span class="cmtt-10"> numeral2.pl 
</span>
</span> : 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb166">
<a id="x25-38014r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  numeral(succ(X)) 
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  numeral(X). 
</span>
<br class="fancyvrb"/>
<a id="x25-38016r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  numeral(0). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Clearly the declarative, or logical, content of this program is exactly the same as the earlier version. But what are the procedural differences, if any? 
</p>
</div>

<div class="nb-cell html" name="htm1">
<ol class="enumerate1">
<li class="enumerate" id="x25-38018x1"> Create a file containing 
<span class="verb">
<span class="cmtt-10"> numeral2.pl 
</span>
</span> , load it, and investigate what happens if we pose queries about 
<span class="cmti-10"> specific 
</span> numerals. For example, suppose we ask: 
<div class="fancyvrb" id="fancyvrb167">
<a id="x25-38020r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  numeral(succ(succ(succ(0)))). 
</span>
</div>
<!--l. 988-->
<p class="noindent"> Do 
<span class="verb">
<span class="cmtt-10"> numeral1.pl 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> numeral2.pl 
</span>
</span> behave in the same way on such input? 
</p>
</li>
<li class="enumerate" id="x25-38022x2"> Second, look at what happens if we try to 
<span class="cmti-10"> generate 
</span> numerals, that is, suppose we pose the query 
<div class="fancyvrb" id="fancyvrb168">
<a id="x25-38024r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  numeral(X). 
</span>
</div>
<!--l. 997-->
<p class="noindent"> Do the programs display identical behaviour? 
</p>
</li>
</ol>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Here are some programs for you to try your hand at. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<ol class="enumerate1">
<li class="enumerate" id="x25-38026x1"> Imagine that the following knowledge base describes a maze. The facts determine which points are connected, that is, from which points you can get to which other points in one step. Furthermore, imagine that all paths are one-way streets, so that you can only walk them in one direction. So, you can get from point 1 to point 2, but not the other way round. 
<div class="fancyvrb" id="fancyvrb169">
<a id="x25-38028r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  connected(1,2). 
</span>
<br class="fancyvrb"/>
<a id="x25-38030r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  connected(3,4). 
</span>
<br class="fancyvrb"/>
<a id="x25-38032r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  connected(5,6). 
</span>
<br class="fancyvrb"/>
<a id="x25-38034r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  connected(7,8). 
</span>
<br class="fancyvrb"/>
<a id="x25-38036r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  connected(9,10). 
</span>
<br class="fancyvrb"/>
<a id="x25-38038r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  connected(12,13). 
</span>
<br class="fancyvrb"/>
<a id="x25-38040r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  connected(13,14). 
</span>
<br class="fancyvrb"/>
<a id="x25-38042r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  connected(15,16). 
</span>
<br class="fancyvrb"/>
<a id="x25-38044r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  connected(17,18). 
</span>
<br class="fancyvrb"/>
<a id="x25-38046r10">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  connected(19,20). 
</span>
<br class="fancyvrb"/>
<a id="x25-38048r11">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  connected(4,1). 
</span>
<br class="fancyvrb"/>
<a id="x25-38050r12">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  connected(6,3). 
</span>
<br class="fancyvrb"/>
<a id="x25-38052r13">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  connected(4,7). 
</span>
<br class="fancyvrb"/>
<a id="x25-38054r14">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  connected(6,11). 
</span>
<br class="fancyvrb"/>
<a id="x25-38056r15">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  connected(14,9). 
</span>
<br class="fancyvrb"/>
<a id="x25-38058r16">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  connected(11,15). 
</span>
<br class="fancyvrb"/>
<a id="x25-38060r17">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  connected(16,12). 
</span>
<br class="fancyvrb"/>
<a id="x25-38062r18">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  connected(14,17). 
</span>
<br class="fancyvrb"/>
<a id="x25-38064r19">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  connected(16,19). 
</span>
</div>
<!--l. 1030-->
<p class="noindent"> Write a predicate 
<span class="verb">
<span class="cmtt-10"> path/2 
</span>
</span> that tells you from which points in the maze you can get to which other points when chaining together connections given in the above knowledge base. Can you get from point 5 to point 10? Which other point can you get to when starting at point 1? And which points can be reached from point 13? 
</p>
</li>
<li class="enumerate" id="x25-38066x2"> We are given the following knowledge base of travel information: 
<div class="fancyvrb" id="fancyvrb170">
<a id="x25-38068r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  byCar(auckland,hamilton). 
</span>
<br class="fancyvrb"/>
<a id="x25-38070r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  byCar(hamilton,raglan). 
</span>
<br class="fancyvrb"/>
<a id="x25-38072r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  byCar(valmont,saarbruecken). 
</span>
<br class="fancyvrb"/>
<a id="x25-38074r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  byCar(valmont,metz). 
</span>
<br class="fancyvrb"/>
<a id="x25-38076r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x25-38078r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  byTrain(metz,frankfurt). 
</span>
<br class="fancyvrb"/>
<a id="x25-38080r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  byTrain(saarbruecken,frankfurt). 
</span>
<br class="fancyvrb"/>
<a id="x25-38082r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  byTrain(metz,paris). 
</span>
<br class="fancyvrb"/>
<a id="x25-38084r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  byTrain(saarbruecken,paris). 
</span>
<br class="fancyvrb"/>
<a id="x25-38086r10">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x25-38088r11">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  byPlane(frankfurt,bangkok). 
</span>
<br class="fancyvrb"/>
<a id="x25-38090r12">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  byPlane(frankfurt,singapore). 
</span>
<br class="fancyvrb"/>
<a id="x25-38092r13">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  byPlane(paris,losAngeles). 
</span>
<br class="fancyvrb"/>
<a id="x25-38094r14">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  byPlane(bangkok,auckland). 
</span>
<br class="fancyvrb"/>
<a id="x25-38096r15">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  byPlane(singapore,auckland). 
</span>
<br class="fancyvrb"/>
<a id="x25-38098r16">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  byPlane(losAngeles,auckland). 
</span>
</div>
<!--l. 1055-->
<p class="noindent"> Write a predicate 
<span class="verb">
<span class="cmtt-10"> travel/2 
</span>
</span> which determines whether it is possible to travel from one place to another by chaining together car, train, and plane journeys. For example, your program should answer yes to the query 
<span class="verb">
<span class="cmtt-10"> travel(valmont,raglan) 
</span>
</span> . 
</p>
</li>
<li class="enumerate" id="x25-38100x3"> So, by using 
<span class="verb">
<span class="cmtt-10"> travel/2 
</span>
</span> to query the above database, you can find out that it is possible to go from Valmont to Raglan. If you are planning such a voyage, that’s already something useful to know, but you would probably prefer to have the precise route from Valmont to Raglan. Write a predicate 
<span class="verb">
<span class="cmtt-10"> travel/3 
</span>
</span> which tells you which route to take when travelling from one place to another. For example, the program should respond 
<div class="fancyvrb" id="fancyvrb171">
<a id="x25-38102r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  go(valmont,metz, 
</span>
<br class="fancyvrb"/>
<a id="x25-38104r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  go(metz,paris, 
</span>
<br class="fancyvrb"/>
<a id="x25-38106r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  go(paris,losAngeles))) 
</span>
</div>
<!--l. 1072-->
<p class="noindent"> to the query 
<span class="verb">
<span class="cmtt-10"> travel(valmont,losAngeles,X) 
</span>
</span> . 
</p>
</li>
<li class="enumerate" id="x25-38108x4"> Extend the predicate 
<span class="verb">
<span class="cmtt-10"> travel/3 
</span>
</span> so that it not only tells you the route to take to get from one place to another, but also 
<span class="cmti-10"> how 
</span> you have to travel. That is, the new program should let us know, for each stage of the voyage, whether we need to travel by car, train, or plane. 
</li>
</ol>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse11"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse11"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse12"> front 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch3"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent">
<a id="taillpn-htmlse12">
</a>
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse14"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=#taillpn-htmlse13"> tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch4"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<h3 class="sectionHead">
<span class="titlemark"> 4.1 
</span>
<a id="x27-400004.1">
</a> Lists 
</h3>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> As its name suggests, a list is just a plain old list of items. Slightly more precisely, it is a finite sequence of elements. Here are some examples of lists in Prolog: 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb172">
<a id="x27-40002r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  [mia, 
</span>
<span class="cmtt-10">  vincent, 
</span>
<span class="cmtt-10">  jules, 
</span>
<span class="cmtt-10">  yolanda] 
</span>
<br class="fancyvrb"/>
<a id="x27-40004r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x27-40006r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  [mia, 
</span>
<span class="cmtt-10">  robber(honey_bunny), 
</span>
<span class="cmtt-10">  X, 
</span>
<span class="cmtt-10">  2, 
</span>
<span class="cmtt-10">  mia] 
</span>
<br class="fancyvrb"/>
<a id="x27-40008r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x27-40010r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  [] 
</span>
<br class="fancyvrb"/>
<a id="x27-40012r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x27-40014r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  [mia, 
</span>
<span class="cmtt-10">  [vincent, 
</span>
<span class="cmtt-10">  jules], 
</span>
<span class="cmtt-10">  [butch, 
</span>
<span class="cmtt-10">  girlfriend(butch)]] 
</span>
<br class="fancyvrb"/>
<a id="x27-40016r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x27-40018r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  [[], 
</span>
<span class="cmtt-10">  dead(z), 
</span>
<span class="cmtt-10">  [2, 
</span>
<span class="cmtt-10">  [b, 
</span>
<span class="cmtt-10">  c]], 
</span>
<span class="cmtt-10">  [], 
</span>
<span class="cmtt-10">  Z, 
</span>
<span class="cmtt-10">  [2, 
</span>
<span class="cmtt-10">  [b, 
</span>
<span class="cmtt-10">  c]]] 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> We can learn some important things from these examples. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<ol class="enumerate1">
<li class="enumerate" id="x27-40020x1"> We can specify lists in Prolog by enclosing the elements of the list in square brackets (that is, the symbols 
<span class="verb">
<span class="cmtt-10"> [ 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> ] 
</span>
</span> ). The elements are separated by commas. For example, the first list shown above, 
<span class="verb">
<span class="cmtt-10"> [mia, 
</span>
<span class="cmtt-10">  vincent, 
</span>
<span class="cmtt-10">  jules, 
</span>
<span class="cmtt-10">  yolanda] 
</span>
</span> , is a list with four elements, namely 
<span class="verb">
<span class="cmtt-10"> mia 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> vincent 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> jules 
</span>
</span> , and 
<span class="verb">
<span class="cmtt-10"> yolanda 
</span>
</span> . The length of a list is the number of elements it has, so our first example is a list of length four. 
</li>
<li class="enumerate" id="x27-40022x2"> From 
<span class="verb">
<span class="cmtt-10"> [mia,robber(honey_bunny),X,2,mia] 
</span>
</span> , our second example, we learn that all sorts of Prolog objects can be elements of a list. The first element of this list is 
<span class="verb">
<span class="cmtt-10"> mia 
</span>
</span> , an atom; the second element is 
<span class="verb">
<span class="cmtt-10"> robber(honey_bunny) 
</span>
</span> , a complex term; the third element is 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> , a variable; the fourth element is 
<span class="verb">
<span class="cmtt-10"> 2 
</span>
</span> , a number. Moreover, we also learn that the same item may occur more than once in the same list: for example, the fifth element of this list is 
<span class="verb">
<span class="cmtt-10"> mia 
</span>
</span> , which is same as the first element. 
</li>
<li class="enumerate" id="x27-40024x3"> The third example shows that there is a special list, the empty list. The empty list (as its name suggests) is the list that contains no elements. What is the length of the empty list? Zero, of course (for the length of a list is the number of members it contains, and the empty list contains nothing). 
</li>
<li class="enumerate" id="x27-40026x4"> The fourth example teaches us something extremely important: lists can contain other lists as elements. For example, the second element of 
<div class="fancyvrb" id="fancyvrb173">
<a id="x27-40028r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  [mia, 
</span>
<span class="cmtt-10">  [vincent, 
</span>
<span class="cmtt-10">  jules], 
</span>
<span class="cmtt-10">  [butch,girlfriend(butch)] 
</span>
</div>
<!--l. 75-->
<p class="noindent"> is 
<span class="verb">
<span class="cmtt-10"> [vincent,jules] 
</span>
</span> . The third is 
<span class="verb">
<span class="cmtt-10"> [butch,girlfriend(butch)] 
</span>
</span> . 
</p>
<!--l. 79-->
<p class="noindent"> What is the length of the fourth list? The answer is: three. If you thought it was five (or indeed, anything else) you’re not thinking about lists in the right way. The elements of the list are the things between the outermost square brackets separated by commas. So this list contains 
<span class="cmti-10"> three 
</span> elements: the first element is 
<span class="verb">
<span class="cmtt-10"> mia 
</span>
</span> , the second element is 
<span class="verb">
<span class="cmtt-10"> [vincent, 
</span>
<span class="cmtt-10">  jules] 
</span>
</span> , and the third element is 
<span class="verb">
<span class="cmtt-10"> [butch, 
</span>
<span class="cmtt-10">  girlfriend(butch)] 
</span>
</span> . 
</p>
</li>
<li class="enumerate" id="x27-40030x5"> The last example mixes all these ideas together. We have here a list which contains the empty list (in fact, it contains it twice), the complex term 
<span class="verb">
<span class="cmtt-10"> dead(z) 
</span>
</span> , two copies of the list 
<span class="verb">
<span class="cmtt-10"> [2, 
</span>
<span class="cmtt-10">  [b, 
</span>
<span class="cmtt-10">  c]] 
</span>
</span> , and the variable 
<span class="verb">
<span class="cmtt-10"> Z 
</span>
</span> . Note that the third (and the last) elements are lists which themselves contain lists (namely 
<span class="verb">
<span class="cmtt-10"> [b, 
</span>
<span class="cmtt-10">  c] 
</span>
</span> ). 
</li>
</ol>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Now for an important point. Any non-empty list can be thought of as consisting of two parts: the head and the tail. The head is simply the first item in the list; the tail is everything else. To put it more precisely, the tail is the list that remains when we take the first element away; that is, 
<span class="cmti-10"> the tail of a list is always a list 
</span> . For example, the head of 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb174">
<a id="x27-40032r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  [mia, 
</span>
<span class="cmtt-10">  vincent, 
</span>
<span class="cmtt-10">  jules, 
</span>
<span class="cmtt-10">  yolanda] 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> is 
<span class="verb">
<span class="cmtt-10"> mia 
</span>
</span> and the tail is 
<span class="verb">
<span class="cmtt-10">  [vincent, 
</span>
<span class="cmtt-10">  jules, 
</span>
<span class="cmtt-10">  yolanda] 
</span>
</span> . Similarly, the head of 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb175">
<a id="x27-40034r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  [[], 
</span>
<span class="cmtt-10">  dead(z), 
</span>
<span class="cmtt-10">  [2, 
</span>
<span class="cmtt-10">  [b, 
</span>
<span class="cmtt-10">  c]], 
</span>
<span class="cmtt-10">  [], 
</span>
<span class="cmtt-10">  Z, 
</span>
<span class="cmtt-10">  [2, 
</span>
<span class="cmtt-10">  [b, 
</span>
<span class="cmtt-10">  c]]] 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> is 
<span class="verb">
<span class="cmtt-10"> [] 
</span>
</span> , and the tail is 
<span class="verb">
<span class="cmtt-10"> [dead(z), 
</span>
<span class="cmtt-10">  [2,[b,c]],[],Z,[2,[b, 
</span>
<span class="cmtt-10">  c]]] 
</span>
</span> . And what are the head and the tail of the list 
<span class="verb">
<span class="cmtt-10"> [dead(z)] 
</span>
</span> ? Well, the head is the first element of the list, which is 
<span class="verb">
<span class="cmtt-10"> dead(z) 
</span>
</span> , and the tail is the list that remains if we take the head away, which, in this case, is the empty list 
<span class="verb">
<span class="cmtt-10"> [] 
</span>
</span> . 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> What about the empty list? It has neither a head nor a tail. That is, the empty list has no internal structure; for Prolog, 
<span class="verb">
<span class="cmtt-10"> [] 
</span>
</span> is a special, particularly simple, list. As we shall learn when we start writing recursive list processing programs, this fact plays an important role in Prolog programming. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Prolog has a special built-in operator 
<span class="verb">
<span class="cmtt-10"> | 
</span>
</span> which can be used to decompose a list into its head and tail. It is important to get to know how to use 
<span class="verb">
<span class="cmtt-10"> | 
</span>
</span> , for it is a key tool for writing Prolog list manipulation programs. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> The most obvious use of 
<span class="verb">
<span class="cmtt-10"> | 
</span>
</span> is to extract information from lists. We do this by using 
<span class="verb">
<span class="cmtt-10"> | 
</span>
</span> together with unification. For example, to get hold of the head and tail of 
<span class="verb">
<span class="cmtt-10"> [mia,vincent, 
</span>
</span>
<span class="verb">
<span class="cmtt-10"> jules,yolanda] 
</span>
</span> we can pose the following query: 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb176">
<a id="x27-40036r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  [Head|Tail] 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [mia, 
</span>
<span class="cmtt-10">  vincent, 
</span>
<span class="cmtt-10">  jules, 
</span>
<span class="cmtt-10">  yolanda]. 
</span>
<br class="fancyvrb"/>
<a id="x27-40038r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x27-40040r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Head 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  mia 
</span>
<br class="fancyvrb"/>
<a id="x27-40042r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Tail 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [vincent,jules,yolanda] 
</span>
<br class="fancyvrb"/>
<a id="x27-40044r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> That is, the head of the list has become bound to 
<span class="verb">
<span class="cmtt-10"> Head 
</span>
</span> and the tail of the list has become bound to 
<span class="verb">
<span class="cmtt-10"> Tail 
</span>
</span> . Note that there is nothing special about 
<span class="verb">
<span class="cmtt-10"> Head 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> Tail 
</span>
</span> , they are simply variables. We could just as well have posed the query: 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb177">
<a id="x27-40046r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  [X|Y] 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [mia, 
</span>
<span class="cmtt-10">  vincent, 
</span>
<span class="cmtt-10">  jules, 
</span>
<span class="cmtt-10">  yolanda]. 
</span>
<br class="fancyvrb"/>
<a id="x27-40048r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x27-40050r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  mia 
</span>
<br class="fancyvrb"/>
<a id="x27-40052r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Y 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [vincent,jules,yolanda] 
</span>
<br class="fancyvrb"/>
<a id="x27-40054r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> As we mentioned above, only non-empty lists have heads and tails. If we try to use 
<span class="verb">
<span class="cmtt-10"> | 
</span>
</span> to pull 
<span class="verb">
<span class="cmtt-10"> [] 
</span>
</span> apart, Prolog will fail: 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb178">
<a id="x27-40056r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  [X|Y] 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  []. 
</span>
<br class="fancyvrb"/>
<a id="x27-40058r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x27-40060r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  no 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> That is, Prolog treats 
<span class="verb">
<span class="cmtt-10"> [] 
</span>
</span> as a special list. This observation is extremely important. We’ll see why later. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Let’s look at some other examples. We can extract the head and tail of the following list just as we saw above: 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb179">
<a id="x27-40062r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  [X|Y] 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [[], 
</span>
<span class="cmtt-10">  dead(z), 
</span>
<span class="cmtt-10">  [2, 
</span>
<span class="cmtt-10">  [b, 
</span>
<span class="cmtt-10">  c]], 
</span>
<span class="cmtt-10">  [], 
</span>
<span class="cmtt-10">  Z]. 
</span>
<br class="fancyvrb"/>
<a id="x27-40064r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x27-40066r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [] 
</span>
<br class="fancyvrb"/>
<a id="x27-40068r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Y 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [dead(z),[2,[b,c]],[],_7800] 
</span>
<br class="fancyvrb"/>
<a id="x27-40070r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Z 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  _7800 
</span>
<br class="fancyvrb"/>
<a id="x27-40072r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> That is: the head of the list is bound to 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> , the tail is bound to 
<span class="verb">
<span class="cmtt-10"> Y 
</span>
</span> . (We also learn that Prolog has bound 
<span class="verb">
<span class="cmtt-10"> Z 
</span>
</span> to the internal variable 
<span class="verb">
<span class="cmtt-10"> _7800 
</span>
</span> .) 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> But we can do a lot more with 
<span class="verb">
<span class="cmtt-10"> | 
</span>
</span> ; it really is a flexible tool. For example, suppose we wanted to know what the first 
<span class="cmti-10"> two 
</span> elements of the list were, and also the remainder of the list after the second element. Then we’d pose the following query: 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb180">
<a id="x27-40074r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  [X,Y 
</span>
<span class="cmtt-10">  | 
</span>
<span class="cmtt-10">  W] 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [[], 
</span>
<span class="cmtt-10">  dead(z), 
</span>
<span class="cmtt-10">  [2, 
</span>
<span class="cmtt-10">  [b, 
</span>
<span class="cmtt-10">  c]], 
</span>
<span class="cmtt-10">  [], 
</span>
<span class="cmtt-10">  Z]. 
</span>
<br class="fancyvrb"/>
<a id="x27-40076r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x27-40078r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [] 
</span>
<br class="fancyvrb"/>
<a id="x27-40080r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Y 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  dead(z) 
</span>
<br class="fancyvrb"/>
<a id="x27-40082r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  W 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [[2,[b,c]],[],_8327] 
</span>
<br class="fancyvrb"/>
<a id="x27-40084r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Z 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  _8327 
</span>
<br class="fancyvrb"/>
<a id="x27-40086r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> That is, the head of the list is bound to 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> , the second element is bound to 
<span class="verb">
<span class="cmtt-10"> Y 
</span>
</span> , and the remainder of the list after the second element is bound to 
<span class="verb">
<span class="cmtt-10"> W 
</span>
</span> (that is, 
<span class="verb">
<span class="cmtt-10"> W 
</span>
</span> is the list that remains when we take away the first two elements). So 
<span class="verb">
<span class="cmtt-10"> | 
</span>
</span> can not only be used to split a list into its head and its tail, we can also use it to split a list at any point. To the left of 
<span class="verb">
<span class="cmtt-10"> | 
</span>
</span> we simply indicate how many elements we want to take away from the front of the list, and then to right of the 
<span class="verb">
<span class="cmtt-10"> | 
</span>
</span> we will get what remains. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> This is a good time to introduce the anonymous variable. Suppose we were interested in getting hold of the second and fourth elements of the list: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb181">
<a id="x27-40088r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  [[], 
</span>
<span class="cmtt-10">  dead(z), 
</span>
<span class="cmtt-10">  [2, 
</span>
<span class="cmtt-10">  [b, 
</span>
<span class="cmtt-10">  c]], 
</span>
<span class="cmtt-10">  [], 
</span>
<span class="cmtt-10">  Z]. 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Now, we could find out like this: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb182">
<a id="x27-40090r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  [X1,X2,X3,X4 
</span>
<span class="cmtt-10">  | 
</span>
<span class="cmtt-10">  Tail] 
</span>
<span class="cmtt-10">  = 
</span>
<br class="fancyvrb"/>
<a id="x27-40092r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  [[], 
</span>
<span class="cmtt-10">  dead(z), 
</span>
<span class="cmtt-10">  [2, 
</span>
<span class="cmtt-10">  [b, 
</span>
<span class="cmtt-10">  c]], 
</span>
<span class="cmtt-10">  [], 
</span>
<span class="cmtt-10">  Z]. 
</span>
<br class="fancyvrb"/>
<a id="x27-40094r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x27-40096r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X1 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [] 
</span>
<br class="fancyvrb"/>
<a id="x27-40098r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X2 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  dead(z) 
</span>
<br class="fancyvrb"/>
<a id="x27-40100r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X3 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [2,[b,c]] 
</span>
<br class="fancyvrb"/>
<a id="x27-40102r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X4 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [] 
</span>
<br class="fancyvrb"/>
<a id="x27-40104r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Tail 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [_8910] 
</span>
<br class="fancyvrb"/>
<a id="x27-40106r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Z 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  _8910 
</span>
<br class="fancyvrb"/>
<a id="x27-40108r10">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Ok, we have got the information we wanted: the values we are interested in are bound to the variables 
<span class="verb">
<span class="cmtt-10"> X2 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> X4 
</span>
</span> . But we’ve got a lot of other information too (namely the values bound to 
<span class="verb">
<span class="cmtt-10"> X1 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> X3 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> Tail 
</span>
</span> ). And perhaps we’re not interested in all this other stuff. If so, it’s a bit silly having to explicitly introduce variables 
<span class="verb">
<span class="cmtt-10"> X1 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> X3 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> Tail 
</span>
</span> to deal with it. And in fact, there is a simpler way to obtain 
<span class="cmti-10"> only 
</span> the information we want: we can pose the following query instead: 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb183">
<a id="x27-40110r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  [_,X,_,Y|_] 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [[], 
</span>
<span class="cmtt-10">  dead(z), 
</span>
<span class="cmtt-10">  [2, 
</span>
<span class="cmtt-10">  [b, 
</span>
<span class="cmtt-10">  c]], 
</span>
<span class="cmtt-10">  [], 
</span>
<span class="cmtt-10">  Z]. 
</span>
<br class="fancyvrb"/>
<a id="x27-40112r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x27-40114r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  dead(z) 
</span>
<br class="fancyvrb"/>
<a id="x27-40116r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Y 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [] 
</span>
<br class="fancyvrb"/>
<a id="x27-40118r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Z 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  _9593 
</span>
<br class="fancyvrb"/>
<a id="x27-40120r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> The 
<span class="verb">
<span class="cmtt-10"> _ 
</span>
</span> symbol (that is, underscore) is the anonymous variable. We use it when we need to use a variable, but we’re not interested in what Prolog instantiates the variable to. As you can see in the above example, Prolog didn’t bother telling us what 
<span class="verb">
<span class="cmtt-10"> _ 
</span>
</span> was bound to. Moreover, note that each occurrence of 
<span class="verb">
<span class="cmtt-10"> _ 
</span>
</span> is 
<span class="cmti-10"> independent 
</span> : each is bound to something different. This couldn’t happen with an ordinary variable of course, but then the anonymous variable isn’t meant to be ordinary. It’s simply a way of telling Prolog to bind something to a given position, completely independently of any other bindings. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Let’s look at one last example. The third element of our working example is a list (namely 
<span class="verb">
<span class="cmtt-10"> [2, 
</span>
<span class="cmtt-10">  [b, 
</span>
<span class="cmtt-10">  c]] 
</span>
</span> ). Suppose we wanted to extract the tail of this internal list, and that we are not interested in any other information. How could we do this? As follows: 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb184">
<a id="x27-40122r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  [_,_,[_|X]|_] 
</span>
<span class="cmtt-10">  = 
</span>
<br class="fancyvrb"/>
<a id="x27-40124r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  [[], 
</span>
<span class="cmtt-10">  dead(z), 
</span>
<span class="cmtt-10">  [2, 
</span>
<span class="cmtt-10">  [b, 
</span>
<span class="cmtt-10">  c]], 
</span>
<span class="cmtt-10">  [], 
</span>
<span class="cmtt-10">  Z, 
</span>
<span class="cmtt-10">  [2, 
</span>
<span class="cmtt-10">  [b, 
</span>
<span class="cmtt-10">  c]]]. 
</span>
<br class="fancyvrb"/>
<a id="x27-40126r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x27-40128r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [[b,c]] 
</span>
<br class="fancyvrb"/>
<a id="x27-40130r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Z 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  _10087 
</span>
<br class="fancyvrb"/>
<a id="x27-40132r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse14"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse13"> front 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch4"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent">
<a id="taillpn-htmlse13">
</a>
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse15"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse13"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse13"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=#taillpn-htmlse14"> tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch4"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<h3 class="sectionHead">
<span class="titlemark"> 4.2 
</span>
<a id="x28-410004.2">
</a> Member 
</h3>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> It’s time to look at our first example of a recursive Prolog program for manipulating lists. One of the most basic things we would like to know is whether something is an element of a list or not. So let’s write a program that, when given as inputs an arbitrary object 
<span class="cmti-10"> X 
</span> and a list 
<span class="cmti-10"> L 
</span> , tells us whether or not 
<span class="cmti-10"> X 
</span> belongs to 
<span class="cmti-10"> L 
</span> . The program that does this is usually called member 
<a id="dx28-41001">
</a> , and it is the simplest example of a Prolog program that exploits the recursive structure of lists. Here it is: 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb185">
<a id="x28-41003r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  member(X,[X|T]). 
</span>
<br class="fancyvrb"/>
<a id="x28-41005r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  member(X,[H|T]) 
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  member(X,T). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> That’s all there is to it: one fact (namely 
<span class="verb">
<span class="cmtt-10"> member(X,[X|T]) 
</span>
</span> ) and one rule (namely 
<span class="verb">
<span class="cmtt-10"> member(X,[H|T]) 
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  member(X,T) 
</span>
</span> ). But note that the rule is recursive (after all, the functor 
<span class="verb">
<span class="cmtt-10"> member 
</span>
</span> occurs in both the rule’s head and body) and it is this that explains why such a short program is all that is required. Let’s take a closer look. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> We’ll start by reading the program declaratively. And read this way, it is obviously sensible. The first clause (the fact) simply says: an object 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> is a member of a list if it is the head of that list. Note that we used the built-in 
<span class="verb">
<span class="cmtt-10"> | 
</span>
</span> operator to state this (simple but important) principle about lists. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> What about the second clause, the recursive rule? This says: an object 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> is member of a list if it is a member of the tail of the list. Again, note that we used the 
<span class="verb">
<span class="cmtt-10"> | 
</span>
</span> operator to state this principle. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Now, clearly this definition makes good declarative sense. But does this program actually 
<span class="cmti-10"> do 
</span> what it is supposed to do? That is, will it really tell us whether an object 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> belongs to a list 
<span class="verb">
<span class="cmtt-10"> L 
</span>
</span> ? And if so, how exactly does it do this? To answer such questions, we need to think about its procedural meaning. Let’s work our way through a few examples. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Suppose we posed the following query: 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb186">
<a id="x28-41007r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  member(yolanda,[yolanda,trudy,vincent,jules]). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Prolog will immediately answer yes. Why? Because it can unify 
<span class="verb">
<span class="cmtt-10"> yolanda 
</span>
</span> with both occurrences of 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> in the first clause (the fact) in the definition of 
<span class="verb">
<span class="cmtt-10"> member/2 
</span>
</span> , so it succeeds immediately. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Next consider the following query: 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb187">
<a id="x28-41009r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  member(vincent,[yolanda,trudy,vincent,jules]). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Now the first rule won’t help ( 
<span class="verb">
<span class="cmtt-10"> vincent 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> yolanda 
</span>
</span> are distinct atoms) so Prolog goes to the second clause, the recursive rule. This gives Prolog a new goal: it now has to see if 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb188">
<a id="x28-41011r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  member(vincent,[trudy,vincent,jules]). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Once again the first clause won’t help, so Prolog goes (again) to the recursive rule. This gives it a new goal, namely 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb189">
<a id="x28-41013r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  member(vincent,[vincent,jules]). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> This time, the first clause does help, and the query succeeds. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> So far so good, but we need to ask an important question. What happens when we pose a query that 
<span class="cmti-10"> fails 
</span> ? For example, what happens if we pose the query 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb190">
<a id="x28-41015r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  member(zed,[yolanda,trudy,vincent,jules]). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Now, this should obviously fail (after all, 
<span class="verb">
<span class="cmtt-10"> zed 
</span>
</span> is not on the list). So how does Prolog handle this? In particular, how can we be sure that Prolog really will 
<span class="cmti-10"> stop 
</span> , and say 
<span class="cmti-10"> no 
</span> , instead going into an endless recursive loop? 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Let’s think this through systematically. Once again, the first clause cannot help, so Prolog uses the recursive rule, which gives it a new goal 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb191">
<a id="x28-41017r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  member(zed,[trudy,vincent,jules]). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Again, the first clause doesn’t help, so Prolog reuses the recursive rule and tries to show that 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb192">
<a id="x28-41019r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  member(zed,[vincent,jules]). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Similarly, the first rule doesn’t help, so Prolog reuses the second rule yet again and tries the goal 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb193">
<a id="x28-41021r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  member(zed,[jules]). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Again the first clause doesn’t help, so Prolog uses the second rule, which gives it the goal 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb194">
<a id="x28-41023r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  member(zed,[]) 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> And 
<span class="cmti-10"> this 
</span> is where things get interesting. Obviously the first clause can’t help here. But note: 
<span class="cmti-10"> the recursive rule can’t do anything more either 
</span> . Why not? Simple: the recursive rule relies on splitting the list into a head and a tail, but as we have already seen, the empty list 
<span class="cmti-10"> can’t 
</span> be split up in this way. So the recursive rule cannot be applied either, and Prolog stops searching for more solutions and announces no. That is, it tells us that 
<span class="verb">
<span class="cmtt-10"> zed 
</span>
</span> does not belong to the list, which is just what it ought to do. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> We could summarise the 
<span class="verb">
<span class="cmtt-10"> member/2 
</span>
</span> predicate as follows. It is a recursive predicate, which systematically searches down the length of the list for the required item. It does this by stepwise breaking down the list into smaller lists, and looking at the first item of each smaller list. This mechanism that drives this search is recursion, and the reason that this recursion is safe (that is, the reason it does not go on forever) is that at the end of the line Prolog has to ask a question about the empty list. The empty list 
<span class="cmti-10"> cannot 
</span> be broken down into smaller parts, and this allows a way out of the recursion. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Well, we’ve now seen why 
<span class="verb">
<span class="cmtt-10"> member/2 
</span>
</span> works, but in fact it’s far more useful than the previous example might suggest. Up till now we’ve only been using it to answer yes/no questions. But we can also pose questions containing variables. For example, we can have the following dialog with Prolog: 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb195">
<a id="x28-41025r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  member(X,[yolanda,trudy,vincent,jules]). 
</span>
<br class="fancyvrb"/>
<a id="x28-41027r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x28-41029r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  yolanda 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x28-41031r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x28-41033r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  trudy 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x28-41035r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x28-41037r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  vincent 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x28-41039r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x28-41041r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  jules 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x28-41043r10">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x28-41045r11">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  no 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> That is, Prolog has told us what every member of a list is. This is an extremely common use of 
<span class="verb">
<span class="cmtt-10"> member/2 
</span>
</span> . In effect, by using the variable we are saying to Prolog: “Quick! Give me some element of the list!”. In many applications we need to be able to extract members of a list, and this is the way it is typically done. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> One final remark. The way we defined 
<span class="verb">
<span class="cmtt-10"> member/2 
</span>
</span> above is certainly correct, but in one respect it is a little messy. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Think about it. The first clause is there to deal with the head of the list. But although the tail is irrelevant to the first clause, we named the tail using the variable 
<span class="verb">
<span class="cmtt-10"> T 
</span>
</span> . Similarly, the recursive rule is there to deal with the tail of the list. But although the head is irrelevant here, we named it using the variable 
<span class="verb">
<span class="cmtt-10"> H 
</span>
</span> . These unnecessary variable names are distracting: it’s better to write predicates in a way that focuses attention on what is really important in each clause, and the anonymous variable gives us a nice way of doing this. That is, we can rewrite 
<span class="verb">
<span class="cmtt-10"> member/2 
</span>
</span> as follows: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb196">
<a id="x28-41047r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  member(X,[X|_]). 
</span>
<br class="fancyvrb"/>
<a id="x28-41049r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  member(X,[_|T]) 
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  member(X,T). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> This version is exactly the same, both declaratively and procedurally. But it’s just that little bit clearer: when you read it, you are forced to concentrate on what is essential. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse15"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse13"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse13"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse14"> front 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch4"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent">
<a id="taillpn-htmlse14">
</a>
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse16"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse14"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse14"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=#taillpn-htmlse15"> tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch4"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<h3 class="sectionHead">
<span class="titlemark"> 4.3 
</span>
<a id="x29-420004.3">
</a> Recursing down Lists 
</h3>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> The 
<span class="verb">
<span class="cmtt-10"> member/2 
</span>
</span> predicate works by recursively working its way down a list, doing something to the head, and then recursively doing the same thing to the tail. Recursing down a list (or indeed, several lists) in this way is extremely common in Prolog; so common, in fact, that it is important that you really master the technique. So let’s look at another example. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> When working with lists, we often want to compare one list with another, or to copy bits of one list into another, or to translate the contents of one list into another, or something similar. Here’s an example. Let’s suppose we need a predicate 
<span class="verb">
<span class="cmtt-10"> a2b/2 
</span>
</span> that takes two lists as arguments, and succeeds if the first argument is a list of 
<span class="verb">
<span class="cmtt-10"> a 
</span>
</span> s, and the second argument is a list of 
<span class="verb">
<span class="cmtt-10"> b 
</span>
</span> s of exactly the same length. For example, if we pose the following query 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb197">
<a id="x29-42002r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  a2b([a,a,a,a],[b,b,b,b]). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> we want Prolog to say yes. On the other hand, if we pose the query 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb198">
<a id="x29-42004r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  a2b([a,a,a,a],[b,b,b]). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> or the query 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb199">
<a id="x29-42006r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  a2b([a,c,a,a],[b,b,5,4]). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> we want Prolog to say no. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> When faced with such tasks, often the best way to set about solving them is to start by thinking about the simplest possible case. Now, when working with lists, thinking about the simplest case often means thinking about the empty list, and it certainly means this here. After all: what is the shortest possible list of 
<span class="verb">
<span class="cmtt-10"> a 
</span>
</span> s? It’s the empty list. Why? Because it contains no 
<span class="verb">
<span class="cmtt-10"> a 
</span>
</span> s at all. And what is the shortest possible list of 
<span class="verb">
<span class="cmtt-10"> b 
</span>
</span> s? Again, the empty list: no 
<span class="verb">
<span class="cmtt-10"> b 
</span>
</span> s whatsoever in that. So the most basic information our definition needs to contain is 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb200">
<a id="x29-42008r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  a2b([],[]). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> This records the obvious fact that the empty list contains exactly as many 
<span class="verb">
<span class="cmtt-10"> a 
</span>
</span> s as 
<span class="verb">
<span class="cmtt-10"> b 
</span>
</span> s. But although obvious, this fact turns out to play an important role in our program, as we shall see. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> So far so good: but how do we proceed? Here’s the idea: for longer lists, 
<span class="cmti-10"> think 
</span>
<span class="cmti-10"> recursively 
</span> . So: when should 
<span class="verb">
<span class="cmtt-10"> a2b/2 
</span>
</span> decide that two non-empty lists are a list of 
<span class="verb">
<span class="cmtt-10"> a 
</span>
</span> s and a list of 
<span class="verb">
<span class="cmtt-10"> b 
</span>
</span> s of exactly the same length? Simple: when the head of the first list is an 
<span class="verb">
<span class="cmtt-10"> a 
</span>
</span> , and the head of the second list is a 
<span class="verb">
<span class="cmtt-10"> b 
</span>
</span> , and 
<span class="verb">
<span class="cmtt-10"> a2b/2 
</span>
</span> decides that the two tails are lists of 
<span class="verb">
<span class="cmtt-10"> a 
</span>
</span> s and 
<span class="verb">
<span class="cmtt-10"> b 
</span>
</span> s of exactly the same length! This immediately gives us the following rule: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb201">
<a id="x29-42010r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  a2b([a|Ta],[b|Tb]) 
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  a2b(Ta,Tb). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> This says: the 
<span class="verb">
<span class="cmtt-10"> a2b/2 
</span>
</span> predicate should succeed if its first argument is a list with head 
<span class="verb">
<span class="cmtt-10"> a 
</span>
</span> , its second argument is a list with head 
<span class="verb">
<span class="cmtt-10"> b 
</span>
</span> , and 
<span class="verb">
<span class="cmtt-10"> a2b/2 
</span>
</span> succeeds on the two tails. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Now, this definition make good sense declaratively. It is a simple and natural recursive predicate, the base clause dealing with the empty list, the recursive clause dealing with non-empty lists. But how does it work in practice? That is, what is its procedural meaning? For example, if we pose the query 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb202">
<a id="x29-42012r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  a2b([a,a,a],[b,b,b]). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Prolog will say yes, which is what we want — but 
<span class="cmti-10"> why 
</span> exactly does this happen? 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Let’s work the example through. In this query, neither list is empty, so the fact does not help. Thus Prolog goes on to try the recursive rule. Now, the query does match the rule (after all, the head of the first list is 
<span class="verb">
<span class="cmtt-10"> a 
</span>
</span> and the head of the second is 
<span class="verb">
<span class="cmtt-10"> b 
</span>
</span> ) so Prolog now has a new goal, namely 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb203">
<a id="x29-42014r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  a2b([a,a],[b,b]). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Once again, the fact does not help with this, but the recursive rule can be used again, leading to the following goal: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb204">
<a id="x29-42016r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  a2b([a],[b]). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Yet again the fact does not help, but the recursive rule does, so we get the following goal: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb205">
<a id="x29-42018r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  a2b([],[]). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> At last we can use the fact: this tells us that, yes, we really do have two lists here that contain exactly the same number of 
<span class="verb">
<span class="cmtt-10"> a 
</span>
</span> s and 
<span class="verb">
<span class="cmtt-10"> b 
</span>
</span> s (namely, none at all). And because this goal succeeds, this means that the goal 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb206">
<a id="x29-42020r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  a2b([a],[b]). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> succeeds too. This in turn means that the goal 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb207">
<a id="x29-42022r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  a2b([a,a],[b,b]). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> succeeds, and thus that the original goal 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb208">
<a id="x29-42024r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  a2b([a,a,a],[b,b,b]). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> is satisfied. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> We could summarise this process as follows. Prolog started with two lists. It peeled the head off each of them, and checked that they were an 
<span class="verb">
<span class="cmtt-10"> a 
</span>
</span> and a 
<span class="verb">
<span class="cmtt-10"> b 
</span>
</span> , respectively, as required. It then recursively analysed the tails of both lists. That is, it worked its way down both tails simultaneously, checking that at each stage the tails were headed by an 
<span class="verb">
<span class="cmtt-10"> a 
</span>
</span> and a 
<span class="verb">
<span class="cmtt-10"> b 
</span>
</span> . Why did the process stop? Because at each recursive step we had to work with shorter lists (namely the tails of the lists examined at the previous step) and eventually we ended up with empty lists. At this point, our rather trivial looking fact was able to play a vital role: it said yes. This halted the recursion, and ensured that the original query succeeded. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> It’s is also important to think about what happens with queries that 
<span class="cmti-10"> fail 
</span> . For example, if we pose the query 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb209">
<a id="x29-42026r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  a2b([a,a,a,a],[b,b,b]). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Prolog will correctly say no. Why? because after carrying out the peel-off-the-head-and-recursively-examine-the-tail process three times, it will be left with the query 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb210">
<a id="x29-42028r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  a2b([a],[]). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> But this goal cannot be satisfied. And if we pose the query 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb211">
<a id="x29-42030r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  a2b([a,c,a,a],[b,b,5,4]). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> after carrying out the peel-off-the-head-and-recursively-examine-the-tail process once, Prolog will have the goal 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb212">
<a id="x29-42032r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  a2b([c,a,a],[b,5,4]). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> and again, this cannot be satisfied. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Well, that’s how 
<span class="verb">
<span class="cmtt-10"> a2b/2 
</span>
</span> works in simple cases, but we haven’t exhausted its possibilities yet. As always with Prolog, it’s a good idea to investigate what happens when variables as used as input. And with 
<span class="verb">
<span class="cmtt-10"> a2b/2 
</span>
</span> something interesting happens: it acts as a translator, translating lists of 
<span class="verb">
<span class="cmtt-10"> a 
</span>
</span> s to lists of 
<span class="verb">
<span class="cmtt-10"> b 
</span>
</span> s, and vice versa. For example the query 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb213">
<a id="x29-42034r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  a2b([a,a,a,a],X). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> yields the response 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb214">
<a id="x29-42036r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [b,b,b,b]. 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> That is, the list of 
<span class="verb">
<span class="cmtt-10"> a 
</span>
</span> s has been translated to a list of 
<span class="verb">
<span class="cmtt-10"> b 
</span>
</span> s. Similarly, by using a variable in the first argument position, we can use it to translate lists of 
<span class="verb">
<span class="cmtt-10"> b 
</span>
</span> s to lists of 
<span class="verb">
<span class="cmtt-10"> a 
</span>
</span> s: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb215">
<a id="x29-42038r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  a2b(X,[b,b,b,b]). 
</span>
<br class="fancyvrb"/>
<a id="x29-42040r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x29-42042r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [a,a,a,a] 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> And of course, we can use variables in both argument positions: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb216">
<a id="x29-42044r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  a2b(X,Y). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Can you work out what happens in this case? 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> To sum up: 
<span class="verb">
<span class="cmtt-10"> a2b/2 
</span>
</span> is an extremely simple example of a program that works by recursing its way down a pair of lists. But don’t be fooled by its simplicity: the kind of programming it illustrates is fundamental to Prolog. Both its declarative form (a base clause dealing with the empty list, a recursive clause dealing with non-empty lists) and the procedural idea it trades on (do something to the heads, and then recursively do the same thing to the tails) come up again and again in Prolog programming. In fact, in the course of your Prolog career, you’ll find that you’ll write what is essentially the 
<span class="verb">
<span class="cmtt-10"> a2b/2 
</span>
</span> predicate, or a more complex variant of it, many times over in many different guises. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse16"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse14"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse14"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse15"> front 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch4"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent">
<a id="taillpn-htmlse15">
</a>
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse17"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse15"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse15"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=#taillpn-htmlse16"> tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch4"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<h3 class="sectionHead">
<span class="titlemark"> 4.4 
</span>
<a id="x30-430004.4">
</a> <strong>Exercise</strong>s 
</h3>
</div>
<div class="nb-cell html" name="htm1">
<div class="newtheorem">
<!--l. 653-->
<p class="noindent">
<span class="head">
<span class="cmbx-10"> <strong>Exercise</strong>
</span>
<span class="cmbx-10">  4.1 
</span>
</span>
<a id="x30-430011">
</a>
<span class="cmti-10"> How does Prolog respond to the following queries? 
</span>
</p>
<ol class="enumerate1">
<li class="enumerate" id="x30-43003x1">
<span class="verb">
<span class="cmtt-10"> [a,b,c,d] 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [a,[b,c,d]]. 
</span>
</span>
</li>
<li class="enumerate" id="x30-43005x2">
<span class="verb">
<span class="cmtt-10"> [a,b,c,d] 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [a|[b,c,d]]. 
</span>
</span>
</li>
<li class="enumerate" id="x30-43007x3">
<span class="verb">
<span class="cmtt-10"> [a,b,c,d] 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [a,b,[c,d]]. 
</span>
</span>
</li>
<li class="enumerate" id="x30-43009x4">
<span class="verb">
<span class="cmtt-10"> [a,b,c,d] 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [a,b|[c,d]]. 
</span>
</span>
</li>
<li class="enumerate" id="x30-43011x5">
<span class="verb">
<span class="cmtt-10"> [a,b,c,d] 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [a,b,c,[d]]. 
</span>
</span>
</li>
<li class="enumerate" id="x30-43013x6">
<span class="verb">
<span class="cmtt-10"> [a,b,c,d] 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [a,b,c|[d]]. 
</span>
</span>
</li>
<li class="enumerate" id="x30-43015x7">
<span class="verb">
<span class="cmtt-10"> [a,b,c,d] 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [a,b,c,d,[]]. 
</span>
</span>
</li>
<li class="enumerate" id="x30-43017x8">
<span class="verb">
<span class="cmtt-10"> [a,b,c,d] 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [a,b,c,d|[]]. 
</span>
</span>
</li>
<li class="enumerate" id="x30-43019x9">
<span class="verb">
<span class="cmtt-10"> [] 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  _. 
</span>
</span>
</li>
<li class="enumerate" id="x30-43021x10">
<span class="verb">
<span class="cmtt-10"> [] 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [_]. 
</span>
</span>
</li>
<li class="enumerate" id="x30-43023x11">
<span class="verb">
<span class="cmtt-10"> [] 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [_|[]]. 
</span>
</span>
</li>
</ol>
</div>
</div>
<div class="nb-cell html" name="htm1">
<div class="newtheorem">
<!--l. 668-->
<p class="noindent">
<span class="head">
<span class="cmbx-10"> <strong>Exercise</strong>
</span>
<span class="cmbx-10">  4.2 
</span>
</span>
<a id="x30-430242">
</a>
<span class="cmti-10"> Which of the following are syntactically correct lists? If the 
</span>
<span class="cmti-10"> representation is correct, how many elements does the list have? 
</span>
</p>
<!--l. 670-->
<p class="indent">
</p>
<ol class="enumerate1">
<li class="enumerate" id="x30-43026x1">
<span class="verb">
<span class="cmtt-10"> [1|[2,3,4]] 
</span>
</span>
</li>
<li class="enumerate" id="x30-43028x2">
<span class="verb">
<span class="cmtt-10"> [1,2,3|[]] 
</span>
</span>
</li>
<li class="enumerate" id="x30-43030x3">
<span class="verb">
<span class="cmtt-10"> [1|2,3,4] 
</span>
</span>
</li>
<li class="enumerate" id="x30-43032x4">
<span class="verb">
<span class="cmtt-10"> [1|[2|[3|[4]]]] 
</span>
</span>
</li>
<li class="enumerate" id="x30-43034x5">
<span class="verb">
<span class="cmtt-10"> [1,2,3,4|[]] 
</span>
</span>
</li>
<li class="enumerate" id="x30-43036x6">
<span class="verb">
<span class="cmtt-10"> [[]|[]] 
</span>
</span>
</li>
<li class="enumerate" id="x30-43038x7">
<span class="verb">
<span class="cmtt-10"> [[1,2]|4] 
</span>
</span>
</li>
<li class="enumerate" id="x30-43040x8">
<span class="verb">
<span class="cmtt-10"> [[1,2],[3,4]|[5,6,7]] 
</span>
</span>
</li>
</ol>
</div>
</div>
<div class="nb-cell html" name="htm1">
<div class="newtheorem">
<!--l. 687-->
<p class="noindent">
<span class="head">
<span class="cmbx-10"> <strong>Exercise</strong>
</span>
<span class="cmbx-10">  4.3 
</span>
</span>
<a id="x30-430413">
</a>
<span class="cmti-10"> Write a predicate 
</span>
<span class="verb">
<span class="cmtt-10"> second(X,List) 
</span>
</span>
<span class="cmti-10"> which checks whether 
</span>
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span>
<span class="cmti-10"> is 
</span>
<span class="cmti-10"> the second element of 
</span>
<span class="verb">
<span class="cmtt-10"> List 
</span>
</span>
<span class="cmti-10"> . 
</span>
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<div class="newtheorem">
<!--l. 693-->
<p class="noindent">
<span class="head">
<span class="cmbx-10"> <strong>Exercise</strong>
</span>
<span class="cmbx-10">  4.4 
</span>
</span>
<a id="x30-430424">
</a>
<span class="cmti-10"> Write a predicate 
</span>
<span class="verb">
<span class="cmtt-10"> swap12(List1,List2) 
</span>
</span>
<span class="cmti-10"> which checks whether 
</span>
<span class="verb">
<span class="cmtt-10"> List1 
</span>
</span>
<span class="cmti-10"> is identical to 
</span>
<span class="verb">
<span class="cmtt-10"> List2 
</span>
</span>
<span class="cmti-10"> , except that the first two elements are exchanged. 
</span>
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<div class="newtheorem">
<!--l. 700-->
<p class="noindent">
<span class="head">
<span class="cmbx-10"> <strong>Exercise</strong>
</span>
<span class="cmbx-10">  4.5 
</span>
</span>
<a id="x30-430435">
</a>
<span class="cmti-10"> Suppose we are given a knowledge base with the following facts: 
</span>
</p>
<!--l. 702-->
<p class="indent">
</p>
<div class="fancyvrb" id="fancyvrb217">
<a id="x30-43045r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  tran(eins,one). 
</span>
<br class="fancyvrb"/>
<a id="x30-43047r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  tran(zwei,two). 
</span>
<br class="fancyvrb"/>
<a id="x30-43049r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  tran(drei,three). 
</span>
<br class="fancyvrb"/>
<a id="x30-43051r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  tran(vier,four). 
</span>
<br class="fancyvrb"/>
<a id="x30-43053r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  tran(fuenf,five). 
</span>
<br class="fancyvrb"/>
<a id="x30-43055r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  tran(sechs,six). 
</span>
<br class="fancyvrb"/>
<a id="x30-43057r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  tran(sieben,seven). 
</span>
<br class="fancyvrb"/>
<a id="x30-43059r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  tran(acht,eight). 
</span>
<br class="fancyvrb"/>
<a id="x30-43061r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  tran(neun,nine). 
</span>
</div>
<!--l. 716-->
<p class="indent">
<span class="cmti-10"> Write a predicate 
</span>
<span class="verb">
<span class="cmtt-10"> listtran(G,E) 
</span>
</span>
<span class="cmti-10"> which translates a list of German number words 
</span>
<span class="cmti-10"> to the corresponding list of English number words. For example: 
</span>
</p>
<div class="fancyvrb" id="fancyvrb218">
<a id="x30-43063r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  listtran([eins,neun,zwei],X). 
</span>
</div>
<!--l. 722-->
<p class="noindent">
<span class="cmti-10"> should give: 
</span>
</p>
<div class="fancyvrb" id="fancyvrb219">
<a id="x30-43065r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [one,nine,two]. 
</span>
</div>
<!--l. 727-->
<p class="indent">
<span class="cmti-10"> Your program should also work in the other direction. For example, if you give it 
</span>
<span class="cmti-10"> the query 
</span>
</p>
<div class="fancyvrb" id="fancyvrb220">
<a id="x30-43067r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  listtran(X,[one,seven,six,two]). 
</span>
</div>
<!--l. 732-->
<p class="noindent">
<span class="cmti-10"> it should return: 
</span>
</p>
<div class="fancyvrb" id="fancyvrb221">
<a id="x30-43069r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [eins,sieben,sechs,zwei]. 
</span>
</div>
<!--l. 738-->
<p class="indent">
<span class="cmti-10"> (Hint: to answer this question, first ask yourself “How do I translate the 
</span> empty 
<span class="cmti-10"> list of number words?”. That’s the base case. For non-empty lists, first translate the 
</span>
<span class="cmti-10"> head of the list, then use recursion to translate the tail.) 
</span>
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<div class="newtheorem">
<!--l. 745-->
<p class="noindent">
<span class="head">
<span class="cmbx-10"> <strong>Exercise</strong>
</span>
<span class="cmbx-10">  4.6 
</span>
</span>
<a id="x30-430706">
</a>
<span class="cmti-10"> Write a predicate 
</span>
<span class="verb">
<span class="cmtt-10"> twice(In,Out) 
</span>
</span>
<span class="cmti-10"> whose left argument is a list, and 
</span>
<span class="cmti-10"> whose right argument is a list consisting of every element in the left list written twice. 
</span>
<span class="cmti-10"> For example, the query 
</span>
</p>
<div class="fancyvrb" id="fancyvrb222">
<a id="x30-43072r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  twice([a,4,buggle],X). 
</span>
</div>
<!--l. 752-->
<p class="noindent">
<span class="cmti-10"> should return 
</span>
</p>
<div class="fancyvrb" id="fancyvrb223">
<a id="x30-43074r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [a,a,4,4,buggle,buggle]). 
</span>
</div>
<!--l. 756-->
<p class="noindent">
<span class="cmti-10"> And the query 
</span>
</p>
<div class="fancyvrb" id="fancyvrb224">
<a id="x30-43076r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  twice([1,2,1,1],X). 
</span>
</div>
<!--l. 760-->
<p class="noindent">
<span class="cmti-10"> should return 
</span>
</p>
<div class="fancyvrb" id="fancyvrb225">
<a id="x30-43078r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [1,1,2,2,1,1,1,1]. 
</span>
</div>
<!--l. 765-->
<p class="indent">
<span class="cmti-10"> (Hint: to answer this question, first ask yourself “What should happen when the 
</span>
<span class="cmti-10"> first argument is the 
</span> empty 
<span class="cmti-10"> list?”. That’s the base case. For non-empty lists, think 
</span>
<span class="cmti-10"> about what you should do with the head, and use recursion to handle the 
</span>
<span class="cmti-10"> tail.) 
</span>
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<div class="newtheorem">
<!--l. 772-->
<p class="noindent">
<span class="head">
<span class="cmbx-10"> <strong>Exercise</strong>
</span>
<span class="cmbx-10">  4.7 
</span>
</span>
<a id="x30-430797">
</a>
<span class="cmti-10"> Draw the search trees for the following three queries: 
</span>
</p>
<!--l. 774-->
<p class="indent">
</p>
<div class="fancyvrb" id="fancyvrb226">
<a id="x30-43081r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  member(a,[c,b,a,y]). 
</span>
<br class="fancyvrb"/>
<a id="x30-43083r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x30-43085r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  member(x,[a,b,c]). 
</span>
<br class="fancyvrb"/>
<a id="x30-43087r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x30-43089r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  member(X,[a,b,c]). 
</span>
<br class="fancyvrb"/>
<a id="x30-43091r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
</div>
<!--l. 782-->
<p class="noindent">
<span class="cmti-10"> (Search trees were introduced in Chapter 
</span>
<span class="cmti-10">   
</span>
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch2">
<span class="cmti-10"> 2 
</span>
<!--tex4ht:ref: CHAPTER2 -->
</a>
<span class="cmti-10"> .) 
</span>
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse17"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse15"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse15"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse16"> front 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch4"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent">
<a id="taillpn-htmlse16">
</a>
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse16"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse16"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=#taillpn-htmlse17"> tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch4"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<h3 class="sectionHead">
<span class="titlemark"> 4.5 
</span>
<a id="x31-440004.5">
</a> Practical Session 
</h3>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> The purpose of Practical Session 4 is to help you get familiar with the idea of recursing down lists. We first suggest some traces for you to carry out, and then some programming exercises. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> First, systematically carry out a number of traces on 
<span class="verb">
<span class="cmtt-10"> a2b/2 
</span>
</span> to make sure you fully understand how it works. In particular: 
</p>
</div>

<div class="nb-cell html" name="htm1">
<ol class="enumerate1">
<li class="enumerate" id="x31-44002x1"> Trace some examples, not involving variables, that succeed. For example, trace the query 
<span class="verb">
<span class="cmtt-10"> a2b([a,a,a,a],[b,b,b,b]) 
</span>
</span> and relate the output to the discussion in the text. 
</li>
<li class="enumerate" id="x31-44004x2"> Trace some simple examples that fail. Try examples involving lists of different lengths (such as 
<span class="verb">
<span class="cmtt-10"> a2b([a,a,a,a],[b,b,b]) 
</span>
</span> ) and examples involving symbols other than 
<span class="verb">
<span class="cmtt-10"> a 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> b 
</span>
</span> (such as 
<span class="verb">
<span class="cmtt-10"> a2b([a,c,a,a],[b,b,5,4]) 
</span>
</span> ). 
</li>
<li class="enumerate" id="x31-44006x3"> Trace some examples involving variables. For example, try tracing 
<span class="verb">
<span class="cmtt-10"> a2b([a,a,a,a],X) 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> a2b(X,[b,b,b,b]) 
</span>
</span> . 
</li>
<li class="enumerate" id="x31-44008x4"> Make sure you understand what happens when both arguments in the query are variables. For example, carry out a trace on the query 
<span class="verb">
<span class="cmtt-10"> a2b(X,Y) 
</span>
</span> . 
</li>
<li class="enumerate" id="x31-44010x5"> Carry out a series of similar traces involving 
<span class="verb">
<span class="cmtt-10"> member/2 
</span>
</span> . That is, carry out traces involving simple queries that succeed (such as 
<span class="verb">
<span class="cmtt-10"> member(a,[1,2,a,b]) 
</span>
</span> ), simple queries that fail (such as 
<span class="verb">
<span class="cmtt-10"> member(z,[1,2,a,b]) 
</span>
</span> ), and queries involving variables (such as 
<span class="verb">
<span class="cmtt-10"> member(X,[1,2,a,b]) 
</span>
</span> ). In all cases, make sure that you understand why the recursion halts. 
</li>
</ol>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Having done this, try the following. 
</p>
</div>

<div class="nb-cell html" name="htm1">
<ol class="enumerate1">
<li class="enumerate" id="x31-44012x1"> Write a 3-place predicate 
<span class="verb">
<span class="cmtt-10"> combine1 
</span>
</span> which takes three lists as arguments and combines the elements of the first two lists into the third as follows: 
<div class="fancyvrb" id="fancyvrb227">
<a id="x31-44014r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  combine1([a,b,c],[1,2,3],X). 
</span>
<br class="fancyvrb"/>
<a id="x31-44016r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x31-44018r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [a,1,b,2,c,3] 
</span>
<br class="fancyvrb"/>
<a id="x31-44020r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x31-44022r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  combine1([f,b,yip,yup],[glu,gla,gli,glo],Result). 
</span>
<br class="fancyvrb"/>
<a id="x31-44024r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x31-44026r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Result 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [f,glu,b,gla,yip,gli,yup,glo] 
</span>
</div>
</li>
<li class="enumerate" id="x31-44028x2"> Now write a 3-place predicate 
<span class="verb">
<span class="cmtt-10"> combine2 
</span>
</span> which takes three lists as arguments and combines the elements of the first two lists into the third as follows: 
<div class="fancyvrb" id="fancyvrb228">
<a id="x31-44030r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  combine2([a,b,c],[1,2,3],X). 
</span>
<br class="fancyvrb"/>
<a id="x31-44032r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x31-44034r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [[a,1],[b,2],[c,3]] 
</span>
<br class="fancyvrb"/>
<a id="x31-44036r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x31-44038r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  combine2([f,b,yip,yup],[glu,gla,gli,glo],Result). 
</span>
<br class="fancyvrb"/>
<a id="x31-44040r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x31-44042r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Result 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [[f,glu],[b,gla],[yip,gli],[yup,glo]] 
</span>
</div>
</li>
<li class="enumerate" id="x31-44044x3"> Finally, write a 3-place predicate 
<span class="verb">
<span class="cmtt-10"> combine3 
</span>
</span> which takes three lists as arguments and combines the elements of the first two lists into the third as follows: 
<div class="fancyvrb" id="fancyvrb229">
<a id="x31-44046r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  combine3([a,b,c],[1,2,3],X). 
</span>
<br class="fancyvrb"/>
<a id="x31-44048r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x31-44050r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [j(a,1),j(b,2),j(c,3)] 
</span>
<br class="fancyvrb"/>
<a id="x31-44052r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x31-44054r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  combine3([f,b,yip,yup],[glu,gla,gli,glo],R). 
</span>
<br class="fancyvrb"/>
<a id="x31-44056r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x31-44058r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  R 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [j(f,glu),j(b,gla),j(yip,gli),j(yup,glo)] 
</span>
</div>
</li>
</ol>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> All three programs are pretty much the same as 
<span class="verb">
<span class="cmtt-10"> a2b/2 
</span>
</span> (though they manipulate three lists, not two). That is, all three can be written by recursing down the lists, doing something to the heads, and then recursively doing the same thing to the tails. Indeed, once you have written 
<span class="verb">
<span class="cmtt-10"> combine1 
</span>
</span> , you just need to change what you do to the heads to get 
<span class="verb">
<span class="cmtt-10"> combine2 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> combine3 
</span>
</span> . 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse16"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse16"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse17"> front 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch4"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent">
<a id="taillpn-htmlse17">
</a>
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse19"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=#taillpn-htmlse18"> tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch5"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<h3 class="sectionHead">
<span class="titlemark"> 5.1 
</span>
<a id="x33-460005.1">
</a> Arithmetic in Prolog 
</h3>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Prolog provides a number of basic arithmetic tools for manipulating integers (that is, numbers of the form ...-3, -2, -1, 0, 1, 2, 3, 4...). Most Prolog implementation also provide tools for handling real numbers (or floating point numbers) such as 1.53 or 6 
<span class="cmmi-10"> . 
</span> 35 
<span class="cmsy-10"> × 
</span> 10 
<sup>
<span class="cmr-7"> 5 
</span>
</sup> , but we’re not going to discuss these, for they are not particularly useful for the symbolic processing tasks discussed in this book. Integers, on the other hand, are useful in connection with symbolic tasks (we use them to state the length of lists, for example) so it is important to understand how to work with them. We’ll start by looking at how Prolog handles the four basic operations of addition, multiplication, subtraction, and division. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="center">
<!--l. 34-->
<p class="noindent">
</p>
<div class="tabular">
<table cellpadding="0" cellspacing="0" class="tabular" id="TBL-1">
<colgroup id="TBL-1-1g">
<col id="TBL-1-1"/>
<col id="TBL-1-2"/>
</colgroup>
<tr id="TBL-1-1-" style="vertical-align:baseline;">
<td class="td11" id="TBL-1-1-1" style="white-space:nowrap; text-align:left;"> Arithmetic examples 
</td>
<td class="td11" id="TBL-1-1-2" style="white-space:nowrap; text-align:left;"> Prolog Notation 
</td>
</tr>
<tr id="TBL-1-2-" style="vertical-align:baseline;">
<td class="td11" id="TBL-1-2-1" style="white-space:nowrap; text-align:left;"> 6 + 2 = 8 
</td>
<td class="td11" id="TBL-1-2-2" style="white-space:nowrap; text-align:left;">
<span class="verb">
<span class="cmtt-10"> 8 
</span>
<span class="cmtt-10">  is 
</span>
<span class="cmtt-10">  6+2. 
</span>
</span>
</td>
</tr>
<tr id="TBL-1-3-" style="vertical-align:baseline;">
<td class="td11" id="TBL-1-3-1" style="white-space:nowrap; text-align:left;"> 6 
<span class="cmsy-10"> ∗ 
</span> 2 = 12 
</td>
<td class="td11" id="TBL-1-3-2" style="white-space:nowrap; text-align:left;">
<span class="verb">
<span class="cmtt-10"> 12 
</span>
<span class="cmtt-10">  is 
</span>
<span class="cmtt-10">  6*2. 
</span>
</span>
</td>
</tr>
<tr id="TBL-1-4-" style="vertical-align:baseline;">
<td class="td11" id="TBL-1-4-1" style="white-space:nowrap; text-align:left;"> 6 
<span class="cmsy-10"> − 
</span> 2 = 4 
</td>
<td class="td11" id="TBL-1-4-2" style="white-space:nowrap; text-align:left;">
<span class="verb">
<span class="cmtt-10"> 4 
</span>
<span class="cmtt-10">  is 
</span>
<span class="cmtt-10">  6-2. 
</span>
</span>
</td>
</tr>
<tr id="TBL-1-5-" style="vertical-align:baseline;">
<td class="td11" id="TBL-1-5-1" style="white-space:nowrap; text-align:left;"> 6 
<span class="cmsy-10"> − 
</span> 8 = 
<span class="cmsy-10"> − 
</span> 2 
</td>
<td class="td11" id="TBL-1-5-2" style="white-space:nowrap; text-align:left;">
<span class="verb">
<span class="cmtt-10"> -2 
</span>
<span class="cmtt-10">  is 
</span>
<span class="cmtt-10">  6-8. 
</span>
</span>
</td>
</tr>
<tr id="TBL-1-6-" style="vertical-align:baseline;">
<td class="td11" id="TBL-1-6-1" style="white-space:nowrap; text-align:left;"> 6 
<span class="cmsy-10"> ÷ 
</span> 2 = 3 
</td>
<td class="td11" id="TBL-1-6-2" style="white-space:nowrap; text-align:left;">
<span class="verb">
<span class="cmtt-10"> 3 
</span>
<span class="cmtt-10">  is 
</span>
<span class="cmtt-10">  6/2. 
</span>
</span>
</td>
</tr>
<tr id="TBL-1-7-" style="vertical-align:baseline;">
<td class="td11" id="TBL-1-7-1" style="white-space:nowrap; text-align:left;"> 7 
<span class="cmsy-10"> ÷ 
</span> 2 = 3 
</td>
<td class="td11" id="TBL-1-7-2" style="white-space:nowrap; text-align:left;">
<span class="verb">
<span class="cmtt-10"> 3 
</span>
<span class="cmtt-10">  is 
</span>
<span class="cmtt-10">  7/2. 
</span>
</span>
</td>
</tr>
<tr id="TBL-1-8-" style="vertical-align:baseline;">
<td class="td11" id="TBL-1-8-1" style="white-space:nowrap; text-align:left;"> 1 is the remainder when 7 is divided by 2 
</td>
<td class="td11" id="TBL-1-8-2" style="white-space:nowrap; text-align:left;">
<span class="verb">
<span class="cmtt-10"> 1 
</span>
<span class="cmtt-10">  is 
</span>
<span class="cmtt-10">  mod(7,2). 
</span>
</span>
</td>
</tr>
</table>
</div>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Note that as we are working with integers, division gives us back an integer answer. Thus 7 
<span class="cmsy-10"> ÷ 
</span> 2 gives 3 as an answer, leaving remainder 1. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Posing the following queries yields the following responses 
<a id="dx33-46001">
</a> : 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb230">
<a id="x33-46003r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  8 
</span>
<span class="cmtt-10">  is 
</span>
<span class="cmtt-10">  6+2. 
</span>
<br class="fancyvrb"/>
<a id="x33-46005r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x33-46007r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x33-46009r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  12 
</span>
<span class="cmtt-10">  is 
</span>
<span class="cmtt-10">  6*2. 
</span>
<br class="fancyvrb"/>
<a id="x33-46011r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x33-46013r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x33-46015r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  -2 
</span>
<span class="cmtt-10">  is 
</span>
<span class="cmtt-10">  6-8. 
</span>
<br class="fancyvrb"/>
<a id="x33-46017r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x33-46019r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x33-46021r10">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  3 
</span>
<span class="cmtt-10">  is 
</span>
<span class="cmtt-10">  6/2. 
</span>
<br class="fancyvrb"/>
<a id="x33-46023r11">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x33-46025r12">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x33-46027r13">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  1 
</span>
<span class="cmtt-10">  is 
</span>
<span class="cmtt-10">  mod(7,2). 
</span>
<br class="fancyvrb"/>
<a id="x33-46029r14">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> More importantly, we can work out the answers to arithmetic questions by using variables. For example: 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb231">
<a id="x33-46031r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  is 
</span>
<span class="cmtt-10">  6+2. 
</span>
<br class="fancyvrb"/>
<a id="x33-46033r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x33-46035r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  8 
</span>
<br class="fancyvrb"/>
<a id="x33-46037r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x33-46039r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  is 
</span>
<span class="cmtt-10">  6*2. 
</span>
<br class="fancyvrb"/>
<a id="x33-46041r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x33-46043r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  12 
</span>
<br class="fancyvrb"/>
<a id="x33-46045r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x33-46047r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  R 
</span>
<span class="cmtt-10">  is 
</span>
<span class="cmtt-10">  mod(7,2). 
</span>
<br class="fancyvrb"/>
<a id="x33-46049r10">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x33-46051r11">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  R 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  1 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Moreover, we can use arithmetic operations when we define predicates. Here’s a simple example. Let’s define a predicate 
<span class="verb">
<span class="cmtt-10"> add_3_and_double/2 
</span>
</span> whose arguments are both integers. This predicate takes its first argument, adds three to it, doubles the result, and returns the number obtained as the second argument. We define this predicate as follows: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb232">
<a id="x33-46053r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  add_3_and_double(X,Y) 
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  Y 
</span>
<span class="cmtt-10">  is 
</span>
<span class="cmtt-10">  (X+3)*2. 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> And indeed, this works: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb233">
<a id="x33-46055r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  add_3_and_double(1,X). 
</span>
<br class="fancyvrb"/>
<a id="x33-46057r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x33-46059r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  8 
</span>
<br class="fancyvrb"/>
<a id="x33-46061r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x33-46063r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  add_3_and_double(2,X). 
</span>
<br class="fancyvrb"/>
<a id="x33-46065r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x33-46067r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  10 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> One other thing. Prolog understands the usual conventions we use for disambiguating arithmetical expressions. For example, when we write 3 + 2 
<span class="cmsy-10"> × 
</span> 4 we mean 3 + (2 
<span class="cmsy-10"> × 
</span> 4) and not (3 + 2) 
<span class="cmsy-10"> × 
</span> 4, and Prolog knows this convention: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb234">
<a id="x33-46069r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  is 
</span>
<span class="cmtt-10">  3+2*4. 
</span>
<br class="fancyvrb"/>
<a id="x33-46071r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x33-46073r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  11 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse19"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse18"> front 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch5"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent">
<a id="taillpn-htmlse18">
</a>
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse20"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse18"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse18"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=#taillpn-htmlse19"> tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch5"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<h3 class="sectionHead">
<span class="titlemark"> 5.2 
</span>
<a id="x34-470005.2">
</a> A Closer Look 
</h3>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> That’s the basics, but we need to know more. The most important to grasp is this: +, *, -, 
<span class="cmsy-10"> ÷ 
</span> and 
<span class="verb">
<span class="cmtt-10"> mod 
</span>
</span> do 
<span class="cmti-10"> not 
</span> carry out any arithmetic. In fact, expressions such as 
<span class="verb">
<span class="cmtt-10"> 3+2 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> 3-2 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> 3*2 
</span>
</span> are simply terms. The functors of these terms are 
<span class="verb">
<span class="cmtt-10"> + 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> - 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> * 
</span>
</span> respectively, and the arguments are 
<span class="verb">
<span class="cmtt-10"> 3 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> 2 
</span>
</span> . Apart from the fact that the functors go between their arguments (instead of in front of them) these are ordinary Prolog terms, and unless we do something special, Prolog will not actually do any arithmetic. In particular, if we pose the query 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb235">
<a id="x34-47002r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  3+2 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> we don’t get back the answer 
<span class="verb">
<span class="cmtt-10"> X=5 
</span>
</span> . Instead we get back 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb236">
<a id="x34-47004r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  3+2 
</span>
<br class="fancyvrb"/>
<a id="x34-47006r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> That is, Prolog has simply unified the variable 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> to the complex term 
<span class="verb">
<span class="cmtt-10"> 3+2 
</span>
</span> . It has 
<span class="cmti-10"> not 
</span> carried out any arithmetic. It has simply done what it usually does when 
<span class="cmtt-10"> =/2 
</span> is used: performed unification. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Similarly, if we pose the query 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb237">
<a id="x34-47008r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  3+2*5 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  X 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> we get the response 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb238">
<a id="x34-47010r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  3+2*5 
</span>
<br class="fancyvrb"/>
<a id="x34-47012r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Again, Prolog has simply bound the variable 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> to the complex term 
<span class="verb">
<span class="cmtt-10"> 3+2*5 
</span>
</span> . It did not evaluate this expression to 13. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> To force Prolog to actually evaluate arithmetic expressions we have to use 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb239">
<a id="x34-47014r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  is 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> just as we did in our earlier examples. In fact, 
<span class="verb">
<span class="cmtt-10"> is 
</span>
</span> does something very special: it sends a signal to Prolog that says “Hey! Don’t treat this expression as an ordinary complex term! Call up your built-in arithmetic capabilities and carry out the calculations!” 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> In short, 
<span class="verb">
<span class="cmtt-10"> is 
</span>
</span> forces Prolog to act in an unusual way. Normally Prolog is quite happy just unifying variables to structures: that’s its job, after all. Arithmetic is something extra that has been bolted on to the basic Prolog engine because it is useful. Unsurprisingly, there are some restrictions on this extra ability, and we need to know what they are. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> For a start, the arithmetic expressions to be evaluated must be on the right hand side of 
<span class="verb">
<span class="cmtt-10"> is 
</span>
</span> . In our earlier examples we carefully posed the query 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb240">
<a id="x34-47016r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  is 
</span>
<span class="cmtt-10">  6+2. 
</span>
<br class="fancyvrb"/>
<a id="x34-47018r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x34-47020r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  8 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> which is the right way to do it. If instead we had asked 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb241">
<a id="x34-47022r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  6+2 
</span>
<span class="cmtt-10">  is 
</span>
<span class="cmtt-10">  X. 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> we would have got a message saying 
<span class="verb">
<span class="cmtt-10"> instantiation_error 
</span>
</span> , or something similar. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Moreover, although we are free to use variables on the right hand side of 
<span class="verb">
<span class="cmtt-10"> is 
</span>
</span> , when we actually carry out evaluation, the variable must already have been instantiated to a variable-free arithmetic expression. If the variable is uninstantiated, or if it is instantiated to something other than an integer, we will get some sort of 
<span class="verb">
<span class="cmtt-10"> instantiation_error 
</span>
</span> message. This is because arithmetic isn’t performed using Prolog’s usual unification and knowledge base search mechanisms: it’s done by calling up a special black box which knows about integer arithmetic. If we hand the black box the wrong kind of data, it’s going to complain. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Here’s an example. Recall our “add 3 and double it” predicate. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb242">
<a id="x34-47024r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  add_3_and_double(X,Y) 
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  Y 
</span>
<span class="cmtt-10">  is 
</span>
<span class="cmtt-10">  (X+3)*2. 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> When we described this predicate, we carefully said that it added 3 to its first argument, doubled the result, and returned the answer in its second argument. For example, 
<span class="verb">
<span class="cmtt-10"> add_3_and_double(3,X) 
</span>
</span> returns 
<span class="verb">
<span class="cmtt-10"> X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  12 
</span>
</span> . We didn’t say anything about using this predicate in the reverse direction. For example, we might hope that posing the query 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb243">
<a id="x34-47026r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  add_3_and_double(X,12). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> would return the answer 
<span class="verb">
<span class="cmtt-10"> X=3 
</span>
</span> . But it doesn’t. Instead we get the 
<span class="verb">
<span class="cmtt-10"> instantiation_error 
</span>
</span> message. Why? Well, when we pose the query this way round, we are asking Prolog to evaluate 
<span class="verb">
<span class="cmtt-10"> 12 
</span>
<span class="cmtt-10">  is 
</span>
<span class="cmtt-10">  (X+3)*2 
</span>
</span> , which it 
<span class="cmti-10"> can’t 
</span> do as 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> is not instantiated. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Two final remarks. As we’ve already mentioned, for Prolog 
<span class="verb">
<span class="cmtt-10"> 3 
</span>
<span class="cmtt-10">  + 
</span>
<span class="cmtt-10">  2 
</span>
</span> is just a term. In fact, for Prolog, it really 
<span class="cmti-10"> is 
</span> the term 
<span class="cmti-10"> +(3,2) 
</span> . The expression 
<span class="verb">
<span class="cmtt-10"> 3 
</span>
<span class="cmtt-10">  + 
</span>
<span class="cmtt-10">  2 
</span>
</span> is just a user-friendly notation that’s nicer for us to use. This means that, if you want to, you can give Prolog queries like 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb244">
<a id="x34-47028r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  is 
</span>
<span class="cmtt-10">  +(3,2) 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> and Prolog will correctly reply 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb245">
<a id="x34-47030r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  5 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Actually, you can even given Prolog the query 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb246">
<a id="x34-47032r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  is(X,+(3,2)) 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> and Prolog will respond 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb247">
<a id="x34-47034r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  5 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> This is because, for Prolog, the expression 
<span class="verb">
<span class="cmtt-10"> X 
</span>
<span class="cmtt-10">  is 
</span>
<span class="cmtt-10">  +(3,2) 
</span>
</span> really is the term 
<span class="verb">
<span class="cmtt-10"> is(X,+(3,2)) 
</span>
</span> . The expression 
<span class="verb">
<span class="cmtt-10"> X 
</span>
<span class="cmtt-10">  is 
</span>
<span class="cmtt-10">  +(3,2) 
</span>
</span> is just user-friendly notation. Underneath, as always, Prolog is just working away with terms. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Summing up, arithmetic in Prolog is easy to use. Pretty much all you have to remember is to use 
<span class="verb">
<span class="cmtt-10"> is 
</span>
</span> to force evaluation, that stuff to be evaluated must go to the right of 
<span class="verb">
<span class="cmtt-10"> is 
</span>
</span> , and to take care that any variables are correctly instantiated. But there is a deeper point that is worth reflecting on: bolting on the extra capability to do arithmetic in this way has further widened the gap between the procedural and declarative meanings of Prolog programs. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse20"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse18"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse18"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse19"> front 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch5"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent">
<a id="taillpn-htmlse19">
</a>
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse21"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse19"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse19"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=#taillpn-htmlse20"> tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch5"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<h3 class="sectionHead">
<span class="titlemark"> 5.3 
</span>
<a id="x35-480005.3">
</a> Arithmetic and Lists 
</h3>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Probably the most important use of arithmetic in this book is to tell us useful facts about data-structures, such as lists. For example, it can be useful to know how long a list is. We’ll give some examples of using lists together with arithmetic capabilities. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> How long is a list? Here’s a recursive definition. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<ol class="enumerate1">
<li class="enumerate" id="x35-48002x1"> The empty list has length zero. 
</li>
<li class="enumerate" id="x35-48004x2"> A non-empty list has length 1 + 
<span class="cmti-10"> len 
</span> (T), where 
<span class="cmti-10"> len 
</span> (T) is the length of its tail. 
</li>
</ol>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> This definition is practically a Prolog program already. Here’s the code we need: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb248">
<a id="x35-48006r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  len([],0). 
</span>
<br class="fancyvrb"/>
<a id="x35-48008r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  len([_|T],N) 
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  len(T,X), 
</span>
<span class="cmtt-10">  N 
</span>
<span class="cmtt-10">  is 
</span>
<span class="cmtt-10">  X+1. 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> This predicate works in the expected way. For example: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb249">
<a id="x35-48010r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  len([a,b,c,d,e,[a,b],g],X). 
</span>
<br class="fancyvrb"/>
<a id="x35-48012r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x35-48014r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  7 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Now, this is quite a good program: it’s easy to understand and efficient. But there is another method of finding the length of a list. We’ll now look at this alternative, because it introduces the idea of accumulators. If you’re used to other programming languages, you’re probably used to the idea of using variables to hold intermediate results. An accumulator is the Prolog analog of this idea. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Here’s how to use an accumulator to calculate the length of a list. We shall define a predicate 
<span class="verb">
<span class="cmtt-10"> accLen 
</span>
</span> /3 which takes the following arguments. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb250">
<a id="x35-48016r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  accLen(List,Acc,Length) 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Here 
<span class="verb">
<span class="cmtt-10"> List 
</span>
</span> is the list whose length we want to find, and 
<span class="verb">
<span class="cmtt-10"> Length 
</span>
</span> is its length (an integer). What about 
<span class="verb">
<span class="cmtt-10"> Acc 
</span>
</span> ? This is the accumulator we will use to keep track of intermediate values for length (so it will also be an integer). Here’s what we do. When we call this predicate, we are going to give 
<span class="verb">
<span class="cmtt-10"> Acc 
</span>
</span> an initial value of 
<span class="verb">
<span class="cmtt-10"> 0 
</span>
</span> . We then recursively work our way down the list, adding 
<span class="verb">
<span class="cmtt-10"> 1 
</span>
</span> to 
<span class="verb">
<span class="cmtt-10"> Acc 
</span>
</span> each time we find a head element, until we reach the empty list. When we reach the empty list, 
<span class="verb">
<span class="cmtt-10"> Acc 
</span>
</span> will contain the length of the list. Here’s the code: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb251">
<a id="x35-48018r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  accLen([_|T],A,L) 
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Anew 
</span>
<span class="cmtt-10">  is 
</span>
<span class="cmtt-10">  A+1, 
</span>
<span class="cmtt-10">  accLen(T,Anew,L). 
</span>
<br class="fancyvrb"/>
<a id="x35-48020r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  accLen([],A,A). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> The base case of the definition, unifies the second and third arguments. Why? Because this trivial unification is a nice way of making sure that the result, that is, the length of the list, is returned. When we reach the end of the list, the accumulator (the second variable) contains the length of the list. So we give this value (via unification) to the length variable (the third variable). Here’s an example trace. You can clearly see how the length variable gets its value at the bottom of the recursion and passes it upwards as Prolog is coming out of the recursion. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb252">
<a id="x35-48022r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  accLen([a,b,c],0,L). 
</span>
<br class="fancyvrb"/>
<a id="x35-48024r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Call: 
</span>
<span class="cmtt-10">  (6) 
</span>
<span class="cmtt-10">  accLen([a, 
</span>
<span class="cmtt-10">  b, 
</span>
<span class="cmtt-10">  c], 
</span>
<span class="cmtt-10">  0, 
</span>
<span class="cmtt-10">  _G449) 
</span>
<span class="cmtt-10">  ? 
</span>
<br class="fancyvrb"/>
<a id="x35-48026r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Call: 
</span>
<span class="cmtt-10">  (7) 
</span>
<span class="cmtt-10">  _G518 
</span>
<span class="cmtt-10">  is 
</span>
<span class="cmtt-10">  0+1 
</span>
<span class="cmtt-10">  ? 
</span>
<br class="fancyvrb"/>
<a id="x35-48028r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Exit: 
</span>
<span class="cmtt-10">  (7) 
</span>
<span class="cmtt-10">  1 
</span>
<span class="cmtt-10">  is 
</span>
<span class="cmtt-10">  0+1 
</span>
<span class="cmtt-10">  ? 
</span>
<br class="fancyvrb"/>
<a id="x35-48030r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Call: 
</span>
<span class="cmtt-10">  (7) 
</span>
<span class="cmtt-10">  accLen([b, 
</span>
<span class="cmtt-10">  c], 
</span>
<span class="cmtt-10">  1, 
</span>
<span class="cmtt-10">  _G449) 
</span>
<span class="cmtt-10">  ? 
</span>
<br class="fancyvrb"/>
<a id="x35-48032r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Call: 
</span>
<span class="cmtt-10">  (8) 
</span>
<span class="cmtt-10">  _G521 
</span>
<span class="cmtt-10">  is 
</span>
<span class="cmtt-10">  1+1 
</span>
<span class="cmtt-10">  ? 
</span>
<br class="fancyvrb"/>
<a id="x35-48034r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Exit: 
</span>
<span class="cmtt-10">  (8) 
</span>
<span class="cmtt-10">  2 
</span>
<span class="cmtt-10">  is 
</span>
<span class="cmtt-10">  1+1 
</span>
<span class="cmtt-10">  ? 
</span>
<br class="fancyvrb"/>
<a id="x35-48036r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Call: 
</span>
<span class="cmtt-10">  (8) 
</span>
<span class="cmtt-10">  accLen([c], 
</span>
<span class="cmtt-10">  2, 
</span>
<span class="cmtt-10">  _G449) 
</span>
<span class="cmtt-10">  ? 
</span>
<br class="fancyvrb"/>
<a id="x35-48038r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Call: 
</span>
<span class="cmtt-10">  (9) 
</span>
<span class="cmtt-10">  _G524 
</span>
<span class="cmtt-10">  is 
</span>
<span class="cmtt-10">  2+1 
</span>
<span class="cmtt-10">  ? 
</span>
<br class="fancyvrb"/>
<a id="x35-48040r10">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Exit: 
</span>
<span class="cmtt-10">  (9) 
</span>
<span class="cmtt-10">  3 
</span>
<span class="cmtt-10">  is 
</span>
<span class="cmtt-10">  2+1 
</span>
<span class="cmtt-10">  ? 
</span>
<br class="fancyvrb"/>
<a id="x35-48042r11">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Call: 
</span>
<span class="cmtt-10">  (9) 
</span>
<span class="cmtt-10">  accLen([], 
</span>
<span class="cmtt-10">  3, 
</span>
<span class="cmtt-10">  _G449) 
</span>
<span class="cmtt-10">  ? 
</span>
<br class="fancyvrb"/>
<a id="x35-48044r12">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Exit: 
</span>
<span class="cmtt-10">  (9) 
</span>
<span class="cmtt-10">  accLen([], 
</span>
<span class="cmtt-10">  3, 
</span>
<span class="cmtt-10">  3) 
</span>
<span class="cmtt-10">  ? 
</span>
<br class="fancyvrb"/>
<a id="x35-48046r13">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Exit: 
</span>
<span class="cmtt-10">  (8) 
</span>
<span class="cmtt-10">  accLen([c], 
</span>
<span class="cmtt-10">  2, 
</span>
<span class="cmtt-10">  3) 
</span>
<span class="cmtt-10">  ? 
</span>
<br class="fancyvrb"/>
<a id="x35-48048r14">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Exit: 
</span>
<span class="cmtt-10">  (7) 
</span>
<span class="cmtt-10">  accLen([b, 
</span>
<span class="cmtt-10">  c], 
</span>
<span class="cmtt-10">  1, 
</span>
<span class="cmtt-10">  3) 
</span>
<span class="cmtt-10">  ? 
</span>
<br class="fancyvrb"/>
<a id="x35-48050r15">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Exit: 
</span>
<span class="cmtt-10">  (6) 
</span>
<span class="cmtt-10">  accLen([a, 
</span>
<span class="cmtt-10">  b, 
</span>
<span class="cmtt-10">  c], 
</span>
<span class="cmtt-10">  0, 
</span>
<span class="cmtt-10">  3) 
</span>
<span class="cmtt-10">  ? 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> As a final step, we’ll define a predicate which calls 
<span class="verb">
<span class="cmtt-10"> accLen 
</span>
</span> for us, and gives it the initial value of 0: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb253">
<a id="x35-48052r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  leng(List,Length) 
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  accLen(List,0,Length). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> So now we can pose queries like this: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb254">
<a id="x35-48054r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  leng([a,b,c,d,e,[a,b],g],X). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Accumulators are extremely common in Prolog programs. (We’ll see another accumulator based program in this chapter, and some more in later chapters.) But why is this? In what way is 
<span class="verb">
<span class="cmtt-10"> accLen 
</span>
</span> better than 
<span class="verb">
<span class="cmtt-10"> len 
</span>
</span> ? After all, it looks more difficult. The answer is that 
<span class="verb">
<span class="cmtt-10"> accLen 
</span>
</span> is tail recursive while 
<span class="verb">
<span class="cmtt-10"> len 
</span>
</span> is not. In tail recursive programs, the result is fully calculated once we reached the bottom of the recursion and just has to be passed up. In recursive programs which are not tail recursive, there are goals at other levels of recursion which have to wait for the answer from a lower level of recursion before they can be evaluated. To understand this, compare the traces for the queries 
<span class="verb">
<span class="cmtt-10"> accLen([a,b,c],0,L) 
</span>
</span> (see above) and 
<span class="verb">
<span class="cmtt-10"> len([a,b,c],0,L) 
</span>
</span> (given below). In the first case the result is built while going into the recursion — once the bottom is reached at 
<span class="verb">
<span class="cmtt-10"> accLen([],3,_G449) 
</span>
</span> , the result is there and only has to be passed up. In the second case the result is built while coming out of the recursion; the result of 
<span class="verb">
<span class="cmtt-10"> len([b,c], 
</span>
<span class="cmtt-10">  _G481) 
</span>
</span> , for instance, is only computed after the recursive call of 
<span class="verb">
<span class="cmtt-10"> len 
</span>
</span> has been completed and the result of 
<span class="verb">
<span class="cmtt-10"> len([c],_G489) 
</span>
</span> is known. In short, tail recursive programs have less bookkeeping overhead, and this makes them more efficient. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb255">
<a id="x35-48056r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  len([a,b,c],L). 
</span>
<br class="fancyvrb"/>
<a id="x35-48058r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Call: 
</span>
<span class="cmtt-10">  (6) 
</span>
<span class="cmtt-10">  len([a, 
</span>
<span class="cmtt-10">  b, 
</span>
<span class="cmtt-10">  c], 
</span>
<span class="cmtt-10">  _G418) 
</span>
<span class="cmtt-10">  ? 
</span>
<br class="fancyvrb"/>
<a id="x35-48060r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Call: 
</span>
<span class="cmtt-10">  (7) 
</span>
<span class="cmtt-10">  len([b, 
</span>
<span class="cmtt-10">  c], 
</span>
<span class="cmtt-10">  _G481) 
</span>
<span class="cmtt-10">  ? 
</span>
<br class="fancyvrb"/>
<a id="x35-48062r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Call: 
</span>
<span class="cmtt-10">  (8) 
</span>
<span class="cmtt-10">  len([c], 
</span>
<span class="cmtt-10">  _G486) 
</span>
<span class="cmtt-10">  ? 
</span>
<br class="fancyvrb"/>
<a id="x35-48064r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Call: 
</span>
<span class="cmtt-10">  (9) 
</span>
<span class="cmtt-10">  len([], 
</span>
<span class="cmtt-10">  _G489) 
</span>
<span class="cmtt-10">  ? 
</span>
<br class="fancyvrb"/>
<a id="x35-48066r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Exit: 
</span>
<span class="cmtt-10">  (9) 
</span>
<span class="cmtt-10">  len([], 
</span>
<span class="cmtt-10">  0) 
</span>
<span class="cmtt-10">  ? 
</span>
<br class="fancyvrb"/>
<a id="x35-48068r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Call: 
</span>
<span class="cmtt-10">  (9) 
</span>
<span class="cmtt-10">  _G486 
</span>
<span class="cmtt-10">  is 
</span>
<span class="cmtt-10">  0+1 
</span>
<span class="cmtt-10">  ? 
</span>
<br class="fancyvrb"/>
<a id="x35-48070r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Exit: 
</span>
<span class="cmtt-10">  (9) 
</span>
<span class="cmtt-10">  1 
</span>
<span class="cmtt-10">  is 
</span>
<span class="cmtt-10">  0+1 
</span>
<span class="cmtt-10">  ? 
</span>
<br class="fancyvrb"/>
<a id="x35-48072r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Exit: 
</span>
<span class="cmtt-10">  (8) 
</span>
<span class="cmtt-10">  len([c], 
</span>
<span class="cmtt-10">  1) 
</span>
<span class="cmtt-10">  ? 
</span>
<br class="fancyvrb"/>
<a id="x35-48074r10">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Call: 
</span>
<span class="cmtt-10">  (8) 
</span>
<span class="cmtt-10">  _G481 
</span>
<span class="cmtt-10">  is 
</span>
<span class="cmtt-10">  1+1 
</span>
<span class="cmtt-10">  ? 
</span>
<br class="fancyvrb"/>
<a id="x35-48076r11">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Exit: 
</span>
<span class="cmtt-10">  (8) 
</span>
<span class="cmtt-10">  2 
</span>
<span class="cmtt-10">  is 
</span>
<span class="cmtt-10">  1+1 
</span>
<span class="cmtt-10">  ? 
</span>
<br class="fancyvrb"/>
<a id="x35-48078r12">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Exit: 
</span>
<span class="cmtt-10">  (7) 
</span>
<span class="cmtt-10">  len([b, 
</span>
<span class="cmtt-10">  c], 
</span>
<span class="cmtt-10">  2) 
</span>
<span class="cmtt-10">  ? 
</span>
<br class="fancyvrb"/>
<a id="x35-48080r13">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Call: 
</span>
<span class="cmtt-10">  (7) 
</span>
<span class="cmtt-10">  _G418 
</span>
<span class="cmtt-10">  is 
</span>
<span class="cmtt-10">  2+1 
</span>
<span class="cmtt-10">  ? 
</span>
<br class="fancyvrb"/>
<a id="x35-48082r14">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Exit: 
</span>
<span class="cmtt-10">  (7) 
</span>
<span class="cmtt-10">  3 
</span>
<span class="cmtt-10">  is 
</span>
<span class="cmtt-10">  2+1 
</span>
<span class="cmtt-10">  ? 
</span>
<br class="fancyvrb"/>
<a id="x35-48084r15">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Exit: 
</span>
<span class="cmtt-10">  (6) 
</span>
<span class="cmtt-10">  len([a, 
</span>
<span class="cmtt-10">  b, 
</span>
<span class="cmtt-10">  c], 
</span>
<span class="cmtt-10">  3) 
</span>
<span class="cmtt-10">  ? 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse21"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse19"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse19"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse20"> front 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch5"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent">
<a id="taillpn-htmlse20">
</a>
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse22"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse20"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse20"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=#taillpn-htmlse21"> tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch5"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<h3 class="sectionHead">
<span class="titlemark"> 5.4 
</span>
<a id="x36-490005.4">
</a> Comparing Integers 
</h3>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Some Prolog arithmetic predicates actually do carry out arithmetic all by themselves (that is, without the assistance of 
<span class="verb">
<span class="cmtt-10"> is 
</span>
</span> ). These are the operators that compare integers. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="center">
<!--l. 405-->
<p class="noindent">
</p>
<div class="tabular">
<table cellpadding="0" cellspacing="0" class="tabular" id="TBL-2">
<colgroup id="TBL-2-1g">
<col id="TBL-2-1"/>
<col id="TBL-2-2"/>
</colgroup>
<tr id="TBL-2-1-" style="vertical-align:baseline;">
<td class="td11" id="TBL-2-1-1" style="white-space:nowrap; text-align:left;"> Arithmetic examples 
</td>
<td class="td11" id="TBL-2-1-2" style="white-space:nowrap; text-align:left;"> Prolog Notation 
</td>
</tr>
<tr id="TBL-2-2-" style="vertical-align:baseline;">
<td class="td11" id="TBL-2-2-1" style="white-space:nowrap; text-align:left;">
<span class="cmmi-10"> x &lt; y 
</span>
</td>
<td class="td11" id="TBL-2-2-2" style="white-space:nowrap; text-align:left;">
<span class="verb">
<span class="cmtt-10"> X 
</span>
<span class="cmtt-10">  &lt; 
</span>
<span class="cmtt-10">  Y. 
</span>
</span>
</td>
</tr>
<tr id="TBL-2-3-" style="vertical-align:baseline;">
<td class="td11" id="TBL-2-3-1" style="white-space:nowrap; text-align:left;">
<a id="dx36-49001">
</a>
<span class="cmmi-10"> x 
</span>
<span class="cmsy-10"> ≤ 
</span>
<span class="cmmi-10"> y 
</span>
</td>
<td class="td11" id="TBL-2-3-2" style="white-space:nowrap; text-align:left;">
<span class="verb">
<span class="cmtt-10"> X 
</span>
<span class="cmtt-10">  =&lt; 
</span>
<span class="cmtt-10">  Y. 
</span>
</span>
</td>
</tr>
<tr id="TBL-2-4-" style="vertical-align:baseline;">
<td class="td11" id="TBL-2-4-1" style="white-space:nowrap; text-align:left;">
<a id="dx36-49002">
</a>
<span class="cmmi-10"> x 
</span> = 
<span class="cmmi-10"> y 
</span>
</td>
<td class="td11" id="TBL-2-4-2" style="white-space:nowrap; text-align:left;">
<span class="verb">
<span class="cmtt-10"> X 
</span>
<span class="cmtt-10">  =:= 
</span>
<span class="cmtt-10">  Y. 
</span>
</span>
</td>
</tr>
<tr id="TBL-2-5-" style="vertical-align:baseline;">
<td class="td11" id="TBL-2-5-1" style="white-space:nowrap; text-align:left;">
<a id="dx36-49003">
</a>
<span class="cmmi-10"> x 
</span>
<span class="cmsy-10"> ⁄ 
</span> = 
<span class="cmmi-10"> y 
</span>
</td>
<td class="td11" id="TBL-2-5-2" style="white-space:nowrap; text-align:left;">
<span class="verb">
<span class="cmtt-10"> X 
</span>
<span class="cmtt-10">  =\= 
</span>
<span class="cmtt-10">  Y. 
</span>
</span>
</td>
</tr>
<tr id="TBL-2-6-" style="vertical-align:baseline;">
<td class="td11" id="TBL-2-6-1" style="white-space:nowrap; text-align:left;">
<a id="dx36-49004">
</a>
<span class="cmmi-10"> x 
</span>
<span class="cmsy-10"> ≥ 
</span>
<span class="cmmi-10"> y 
</span>
</td>
<td class="td11" id="TBL-2-6-2" style="white-space:nowrap; text-align:left;">
<span class="verb">
<span class="cmtt-10"> X 
</span>
<span class="cmtt-10">  &gt;= 
</span>
<span class="cmtt-10">  Y 
</span>
</span>
</td>
</tr>
<tr id="TBL-2-7-" style="vertical-align:baseline;">
<td class="td11" id="TBL-2-7-1" style="white-space:nowrap; text-align:left;">
<a id="dx36-49005">
</a>
<span class="cmmi-10"> x &gt; y 
</span>
</td>
<td class="td11" id="TBL-2-7-2" style="white-space:nowrap; text-align:left;">
<span class="verb">
<span class="cmtt-10"> X 
</span>
<span class="cmtt-10">  &gt; 
</span>
<span class="cmtt-10">  Y 
</span>
</span>
<a id="dx36-49006">
</a>
</td>
</tr>
</table>
</div>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> These operators have the obvious meaning: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb256">
<a id="x36-49008r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  2 
</span>
<span class="cmtt-10">  &lt; 
</span>
<span class="cmtt-10">  4. 
</span>
<br class="fancyvrb"/>
<a id="x36-49010r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x36-49012r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x36-49014r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  2 
</span>
<span class="cmtt-10">  =&lt; 
</span>
<span class="cmtt-10">  4. 
</span>
<br class="fancyvrb"/>
<a id="x36-49016r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x36-49018r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x36-49020r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  4 
</span>
<span class="cmtt-10">  =&lt; 
</span>
<span class="cmtt-10">  4. 
</span>
<br class="fancyvrb"/>
<a id="x36-49022r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x36-49024r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x36-49026r10">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  4=:=4. 
</span>
<br class="fancyvrb"/>
<a id="x36-49028r11">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x36-49030r12">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x36-49032r13">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  4=\=5. 
</span>
<br class="fancyvrb"/>
<a id="x36-49034r14">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x36-49036r15">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x36-49038r16">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  4=\=4. 
</span>
<br class="fancyvrb"/>
<a id="x36-49040r17">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  no 
</span>
<br class="fancyvrb"/>
<a id="x36-49042r18">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x36-49044r19">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  4 
</span>
<span class="cmtt-10">  &gt;= 
</span>
<span class="cmtt-10">  4. 
</span>
<br class="fancyvrb"/>
<a id="x36-49046r20">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x36-49048r21">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x36-49050r22">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  4 
</span>
<span class="cmtt-10">  &gt; 
</span>
<span class="cmtt-10">  2. 
</span>
<br class="fancyvrb"/>
<a id="x36-49052r23">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Moreover, they force both their right hand and left hand arguments to be evaluated: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb257">
<a id="x36-49054r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  2 
</span>
<span class="cmtt-10">  &lt; 
</span>
<span class="cmtt-10">  4+1. 
</span>
<br class="fancyvrb"/>
<a id="x36-49056r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x36-49058r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x36-49060r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  2+1 
</span>
<span class="cmtt-10">  &lt; 
</span>
<span class="cmtt-10">  4. 
</span>
<br class="fancyvrb"/>
<a id="x36-49062r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x36-49064r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x36-49066r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  2+1 
</span>
<span class="cmtt-10">  &lt; 
</span>
<span class="cmtt-10">  3+2. 
</span>
<br class="fancyvrb"/>
<a id="x36-49068r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Note that 
<span class="verb">
<span class="cmtt-10"> =:= 
</span>
</span> is different from 
<span class="verb">
<span class="cmtt-10"> = 
</span>
</span> , as the following examples show: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb258">
<a id="x36-49070r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  4=4. 
</span>
<br class="fancyvrb"/>
<a id="x36-49072r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x36-49074r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x36-49076r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  2+2 
</span>
<span class="cmtt-10">  =4. 
</span>
<br class="fancyvrb"/>
<a id="x36-49078r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  no 
</span>
<br class="fancyvrb"/>
<a id="x36-49080r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x36-49082r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  2+2 
</span>
<span class="cmtt-10">  =:= 
</span>
<span class="cmtt-10">  4. 
</span>
<br class="fancyvrb"/>
<a id="x36-49084r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> That is, 
<span class="verb">
<span class="cmtt-10"> = 
</span>
</span> tries to unify its arguments; it does 
<span class="cmti-10"> not 
</span> force arithmetic evaluation. That’s 
<span class="verb">
<span class="cmtt-10"> =:= 
</span>
</span> ’s job. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Whenever we use these operators, we have to take care that any variables are instantiated. For example, all the following queries lead to instantiation errors. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb259">
<a id="x36-49086r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  &lt; 
</span>
<span class="cmtt-10">  3. 
</span>
<br class="fancyvrb"/>
<a id="x36-49088r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x36-49090r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  3 
</span>
<span class="cmtt-10">  &lt; 
</span>
<span class="cmtt-10">  Y. 
</span>
<br class="fancyvrb"/>
<a id="x36-49092r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x36-49094r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  =:= 
</span>
<span class="cmtt-10">  X. 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Moreover, variables have to be instantiated to 
<span class="cmti-10"> integers 
</span> . The query 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb260">
<a id="x36-49096r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  3, 
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  &lt; 
</span>
<span class="cmtt-10">  4. 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> succeeds. But the query 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb261">
<a id="x36-49098r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  b, 
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  &lt; 
</span>
<span class="cmtt-10">  4. 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> fails. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Ok, let’s now look at an example which puts Prolog’s abilities to compare numbers to work. We’re going to define a predicate which takes a non-empty list of non-negative integers as its first argument, and returns the maximum integer in the list as its last argument. Again, we’ll use an accumulator. As we work our way down the list, the accumulator will keep track of the highest integer found so far. If we find a higher value, the accumulator will be updated to this new value. When we call the program, we set the accumulator to an initial value of 0. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Here’s the code. Note that there are 
<span class="cmti-10"> two 
</span> recursive clauses: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb262">
<a id="x36-49100r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  accMax([H|T],A,Max) 
</span>
<span class="cmtt-10">  :- 
</span>
<br class="fancyvrb"/>
<a id="x36-49102r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  H 
</span>
<span class="cmtt-10">  &gt; 
</span>
<span class="cmtt-10">  A, 
</span>
<br class="fancyvrb"/>
<a id="x36-49104r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  accMax(T,H,Max). 
</span>
<br class="fancyvrb"/>
<a id="x36-49106r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x36-49108r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  accMax([H|T],A,Max) 
</span>
<span class="cmtt-10">  :- 
</span>
<br class="fancyvrb"/>
<a id="x36-49110r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  H 
</span>
<span class="cmtt-10">  =&lt; 
</span>
<span class="cmtt-10">  A, 
</span>
<br class="fancyvrb"/>
<a id="x36-49112r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  accMax(T,A,Max). 
</span>
<br class="fancyvrb"/>
<a id="x36-49114r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x36-49116r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  accMax([],A,A). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> The first clause tests if the head of the list is larger than the largest value found so far. If it is, we set the accumulator to this new value, and then recursively work through the tail of the list. The second clause applies when the head is less than or equal to the accumulator; in this case we recursively work through the tail of the list using the old accumulator value. Finally, the base clause unifies the second and third arguments; it gives the highest value we found while going through the list to the last argument. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Here’s an example query: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb263">
<a id="x36-49118r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  accMax([1,0,5,4],0,Max). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Here the first clause of 
<span class="verb">
<span class="cmtt-10"> accMax 
</span>
</span> applies, resulting in the following goal: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb264">
<a id="x36-49120r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  accMax([0,5,4],1,Max). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Note the value of the accumulator has changed to 1. Now the second clause of 
<span class="verb">
<span class="cmtt-10"> accMax 
</span>
</span> applies, as 0 (the next element of the list) is smaller than 1, the value of the accumulator. This process is repeated until we reach the empty list: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb265">
<a id="x36-49122r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  accMax([5,4],1,Max). 
</span>
<br class="fancyvrb"/>
<a id="x36-49124r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x36-49126r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  accMax([4],5,Max). 
</span>
<br class="fancyvrb"/>
<a id="x36-49128r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x36-49130r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  accMax([],5,Max). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Now the third clause applies, unifying the variable 
<span class="verb">
<span class="cmtt-10"> Max 
</span>
</span> with the value of the accumulator: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb266">
<a id="x36-49132r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Max 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  5. 
</span>
<br class="fancyvrb"/>
<a id="x36-49134r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Again, it’s nice to define a predicate which calls this, and initialises the accumulator. But wait: what should we initialise the accumulator to? If you say 0, this means you are assuming that all the numbers in the list are positive. But suppose we give a list of negative integers as input. Then we would have 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb267">
<a id="x36-49136r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  accMax([-11,-2,-7,-4,-12],0,Max). 
</span>
<br class="fancyvrb"/>
<a id="x36-49138r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x36-49140r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Max 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  0 
</span>
<br class="fancyvrb"/>
<a id="x36-49142r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> This is 
<span class="cmti-10"> not 
</span> what we want: the biggest number on the list is -2. Our use of 0 as the initial value of the accumulator has ruined everything, because it’s bigger than any number on the list. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> There’s an easy way around this: since our input list will always be a non-empty list of integers, simply initialise the accumulator to the head of the list. That way we guarantee that the accumulator is initialised to a number on the list. The following predicate does this for us: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb268">
<a id="x36-49144r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  max(List,Max) 
</span>
<span class="cmtt-10">  :- 
</span>
<br class="fancyvrb"/>
<a id="x36-49146r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  List 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [H|_], 
</span>
<br class="fancyvrb"/>
<a id="x36-49148r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  accMax(List,H,Max). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> So we can simply say: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb269">
<a id="x36-49150r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  max([1,2,46,53,0],X). 
</span>
<br class="fancyvrb"/>
<a id="x36-49152r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x36-49154r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  53 
</span>
<br class="fancyvrb"/>
<a id="x36-49156r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> And furthermore we have: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb270">
<a id="x36-49158r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  max([-11,-2,-7,-4,-12],X). 
</span>
<br class="fancyvrb"/>
<a id="x36-49160r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x36-49162r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  -2 
</span>
<br class="fancyvrb"/>
<a id="x36-49164r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>

<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse22"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse20"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse20"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse21"> front 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch5"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent">
<a id="taillpn-htmlse21">
</a>
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse23"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse21"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse21"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=#taillpn-htmlse22"> tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch5"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<h3 class="sectionHead">
<span class="titlemark"> 5.5 
</span>
<a id="x37-500005.5">
</a> <strong>Exercise</strong>s 
</h3>
</div>
<div class="nb-cell html" name="htm1">
<div class="newtheorem">
<!--l. 596-->
<p class="noindent">
<span class="head">
<span class="cmbx-10"> <strong>Exercise</strong>
</span>
<span class="cmbx-10">  5.1 
</span>
</span>
<a id="x37-500011">
</a>
<span class="cmti-10"> How does Prolog respond to the following queries? 
</span>
</p>
<ol class="enumerate1">
<li class="enumerate" id="x37-50003x1">
<span class="verb">
<span class="cmtt-10"> X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  3*4. 
</span>
</span>
</li>
<li class="enumerate" id="x37-50005x2">
<span class="verb">
<span class="cmtt-10"> X 
</span>
<span class="cmtt-10">  is 
</span>
<span class="cmtt-10">  3*4. 
</span>
</span>
</li>
<li class="enumerate" id="x37-50007x3">
<span class="verb">
<span class="cmtt-10"> 4 
</span>
<span class="cmtt-10">  is 
</span>
<span class="cmtt-10">  X. 
</span>
</span>
</li>
<li class="enumerate" id="x37-50009x4">
<span class="verb">
<span class="cmtt-10"> X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  Y. 
</span>
</span>
</li>
<li class="enumerate" id="x37-50011x5">
<span class="verb">
<span class="cmtt-10"> 3 
</span>
<span class="cmtt-10">  is 
</span>
<span class="cmtt-10">  1+2. 
</span>
</span>
</li>
<li class="enumerate" id="x37-50013x6">
<span class="verb">
<span class="cmtt-10"> 3 
</span>
<span class="cmtt-10">  is 
</span>
<span class="cmtt-10">  +(1,2). 
</span>
</span>
</li>
<li class="enumerate" id="x37-50015x7">
<span class="verb">
<span class="cmtt-10"> 3 
</span>
<span class="cmtt-10">  is 
</span>
<span class="cmtt-10">  X+2. 
</span>
</span>
</li>
<li class="enumerate" id="x37-50017x8">
<span class="verb">
<span class="cmtt-10"> X 
</span>
<span class="cmtt-10">  is 
</span>
<span class="cmtt-10">  1+2. 
</span>
</span>
</li>
<li class="enumerate" id="x37-50019x9">
<span class="verb">
<span class="cmtt-10"> 1+2 
</span>
<span class="cmtt-10">  is 
</span>
<span class="cmtt-10">  1+2. 
</span>
</span>
</li>
<li class="enumerate" id="x37-50021x10">
<span class="verb">
<span class="cmtt-10"> is(X,+(1,2)). 
</span>
</span>
</li>
<li class="enumerate" id="x37-50023x11">
<span class="verb">
<span class="cmtt-10"> 3+2 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  +(3,2). 
</span>
</span>
</li>
<li class="enumerate" id="x37-50025x12">
<span class="verb">
<span class="cmtt-10"> *(7,5) 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  7*5. 
</span>
</span>
</li>
<li class="enumerate" id="x37-50027x13">
<span class="verb">
<span class="cmtt-10"> *(7,+(3,2)) 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  7*(3+2). 
</span>
</span>
</li>
<li class="enumerate" id="x37-50029x14">
<span class="verb">
<span class="cmtt-10"> *(7,(3+2)) 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  7*(3+2). 
</span>
</span>
</li>
<li class="enumerate" id="x37-50031x15">
<span class="verb">
<span class="cmtt-10"> 7*3+2 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  *(7,+(3,2)). 
</span>
</span>
</li>
<li class="enumerate" id="x37-50033x16">
<span class="verb">
<span class="cmtt-10"> *(7,(3+2)) 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  7*(+(3,2)). 
</span>
</span>
</li>
</ol>
</div>
</div>
<div class="nb-cell html" name="htm1">
<div class="newtheorem">
<!--l. 616-->
<p class="noindent">
<span class="head">
<span class="cmbx-10"> <strong>Exercise</strong>
</span>
<span class="cmbx-10">  5.2 
</span>
</span>
<a id="x37-500342">
</a>
</p>
<ol class="enumerate1">
<li class="enumerate" id="x37-50036x1">
<span class="cmti-10"> Define a 2-place predicate 
</span>
<span class="verb">
<span class="cmtt-10"> increment 
</span>
</span>
<span class="cmti-10"> that holds only when its second 
</span>
<span class="cmti-10"> argument is an integer one larger than its first argument. For example, 
</span>
<span class="verb">
<span class="cmtt-10"> increment(4,5) 
</span>
</span>
<span class="cmti-10"> should hold, but 
</span>
<span class="verb">
<span class="cmtt-10"> increment(4,6) 
</span>
</span>
<span class="cmti-10"> should not. 
</span>
</li>
<li class="enumerate" id="x37-50038x2">
<span class="cmti-10"> Define a 3-place predicate 
</span>
<span class="verb">
<span class="cmtt-10"> sum 
</span>
</span>
<span class="cmti-10"> that holds only when its third argument is 
</span>
<span class="cmti-10"> the sum of the first two arguments. For example, 
</span>
<span class="verb">
<span class="cmtt-10"> sum(4,5,9) 
</span>
</span>
<span class="cmti-10"> should hold, 
</span>
<span class="cmti-10"> but 
</span>
<span class="verb">
<span class="cmtt-10"> sum(4,6,12) 
</span>
</span>
<span class="cmti-10"> should not. 
</span>
</li>
</ol>
</div>
</div>
<div class="nb-cell html" name="htm1">
<div class="newtheorem">
<!--l. 629-->
<p class="noindent">
<span class="head">
<span class="cmbx-10"> <strong>Exercise</strong>
</span>
<span class="cmbx-10">  5.3 
</span>
</span>
<a id="x37-500393">
</a>
<span class="cmti-10"> Write a predicate 
</span>
<span class="verb">
<span class="cmtt-10"> addone/2 
</span>
</span>
<span class="cmti-10"> whose first argument is a list of integers, 
</span>
<span class="cmti-10"> and whose second argument is the list of integers obtained by adding 1 to each integer 
</span>
<span class="cmti-10"> in the first list. For example, the query 
</span>
</p>
<div class="fancyvrb" id="fancyvrb271">
<a id="x37-50041r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  addone([1,2,7,2],X). 
</span>
</div>
<!--l. 636-->
<p class="noindent">
<span class="cmti-10"> should give 
</span>
</p>
<div class="fancyvrb" id="fancyvrb272">
<a id="x37-50043r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [2,3,8,3]. 
</span>
</div>
</div>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse23"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse21"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse21"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse22"> front 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch5"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent">
<a id="taillpn-htmlse22">
</a>
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse22"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse22"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=#taillpn-htmlse23"> tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch5"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<h3 class="sectionHead">
<span class="titlemark"> 5.6 
</span>
<a id="x38-510005.6">
</a> Practical Session 
</h3>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> The purpose of Practical Session 5 is to help you get familiar with Prolog’s arithmetic capabilities, and to give you some further practice in list manipulation. To this end, we suggest the following programming exercises: 
</p>
</div>

<div class="nb-cell html" name="htm1">
<ol class="enumerate1">
<li class="enumerate" id="x38-51002x1"> In the text we discussed the 3-place predicate 
<span class="verb">
<span class="cmtt-10"> accMax 
</span>
</span> which returned the maximum of a list of integers. By changing the code slightly, turn this into a 3-place predicate 
<span class="verb">
<span class="cmtt-10"> accMin 
</span>
</span> which returns the 
<span class="cmti-10"> minimum 
</span> of a list of integers. 
</li>
<li class="enumerate" id="x38-51004x2"> In mathematics, an n-dimensional vector is a list of numbers of length n. For example, 
<span class="verb">
<span class="cmtt-10"> [2,5,12] 
</span>
</span> is a 3-dimensional vector, and 
<span class="verb">
<span class="cmtt-10"> [45,27,3,-4,6] 
</span>
</span> is a 5-dimensional vector. One of the basic operations on vectors is 
<span class="cmti-10"> scalar 
</span>
<span class="cmti-10"> multiplication 
</span> . In this operation, every element of a vector is multiplied by some number. For example, if we scalar multiply the 3-dimensional vector 
<span class="verb">
<span class="cmtt-10"> [2,7,4] 
</span>
</span> by 
<span class="verb">
<span class="cmtt-10"> 3 
</span>
</span> the result is the 3-dimensional vector 
<span class="verb">
<span class="cmtt-10"> [6,21,12] 
</span>
</span> . 
<!--l. 667-->
<p class="noindent"> Write a 3-place predicate 
<span class="verb">
<span class="cmtt-10"> scalarMult 
</span>
</span> whose first argument is an integer, whose second argument is a list of integers, and whose third argument is the result of scalar multiplying the second argument by the first. For example, the query 
</p>
<div class="fancyvrb" id="fancyvrb273">
<a id="x38-51006r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  scalarMult(3,[2,7,4],Result). 
</span>
</div>
<!--l. 675-->
<p class="noindent"> should yield 
</p>
<div class="fancyvrb" id="fancyvrb274">
<a id="x38-51008r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Result 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [6,21,12] 
</span>
</div>
</li>
<li class="enumerate" id="x38-51010x3"> Another fundamental operation on vectors is the 
<span class="cmti-10"> dot product 
</span> . This operation combines two vectors of the same dimension and yields a number as a result. The operation is carried out as follows: the corresponding elements of the two vectors are multiplied, and the results added. For example, the dot product of 
<span class="verb">
<span class="cmtt-10"> [2,5,6] 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> [3,4,1] 
</span>
</span> is 
<span class="verb">
<span class="cmtt-10"> 6+20+6 
</span>
</span> , that is, 
<span class="verb">
<span class="cmtt-10"> 32 
</span>
</span> . Write a 3-place predicate 
<span class="verb">
<span class="cmtt-10"> dot 
</span>
</span> whose first argument is a list of integers, whose second argument is a list of integers of the same length as the first, and whose third argument is the dot product of the first argument with the second. For example, the query 
<div class="fancyvrb" id="fancyvrb275">
<a id="x38-51012r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  dot([2,5,6],[3,4,1],Result). 
</span>
</div>
<!--l. 694-->
<p class="noindent"> should yield 
</p>
<div class="fancyvrb" id="fancyvrb276">
<a id="x38-51014r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Result 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  32 
</span>
</div>
</li>
</ol>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse22"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse22"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse23"> front 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch5"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent">
<a id="taillpn-htmlse23">
</a>
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse25"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=#taillpn-htmlse24"> tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch6"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<h3 class="sectionHead">
<span class="titlemark"> 6.1 
</span>
<a id="x40-530006.1">
</a> Append 
</h3>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> We shall define an important predicate 
<span class="verb">
<span class="cmtt-10"> append/3 
</span>
</span> whose arguments are all lists. Viewed declaratively, 
<span class="verb">
<span class="cmtt-10"> append(L1,L2,L3) 
</span>
</span> will 
<a id="dx40-53001">
</a> hold when the list 
<span class="verb">
<span class="cmtt-10"> L3 
</span>
</span> is the result of concatenating the lists 
<span class="verb">
<span class="cmtt-10"> L1 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> L2 
</span>
</span> together (concatenating means joining the lists together, end to end). For example, if we pose the query 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb277">
<a id="x40-53003r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  append([a,b,c],[1,2,3],[a,b,c,1,2,3]). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> or the query 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb278">
<a id="x40-53005r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  append([a,[foo,gibble],c],[1,2,[[],b]], 
</span>
<br class="fancyvrb"/>
<a id="x40-53007r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  [a,[foo,gibble],c,1,2,[[],b]). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> we will get the response yes. On the other hand, if we pose the query 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb279">
<a id="x40-53009r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  append([a,b,c],[1,2,3],[a,b,c,1,2]). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> or the query 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb280">
<a id="x40-53011r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  append([a,b,c],[1,2,3],[1,2,3,a,b,c]). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> we will get the answer no. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> From a procedural perspective, the most obvious use of 
<span class="verb">
<span class="cmtt-10"> append/3 
</span>
</span> is to concatenate two lists together. We can do this simply by using a variable as the third argument: the query 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb281">
<a id="x40-53013r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  append([a,b,c],[1,2,3],L3). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> yields the response 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb282">
<a id="x40-53015r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  L3 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [a,b,c,1,2,3] 
</span>
<br class="fancyvrb"/>
<a id="x40-53017r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> But (as we shall soon see) we can also use 
<span class="verb">
<span class="cmtt-10"> append/3 
</span>
</span> to split up a list. In fact, 
<span class="verb">
<span class="cmtt-10"> append/3 
</span>
</span> is a real workhorse. There’s lots we can do with it, and studying it is a good way to gain a better understanding of list processing in Prolog. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent">
</p>
</div>
<div class="nb-cell html" name="htm1">
<h4 class="likesubsectionHead">
<a id="x40-540006.1">
</a> Defining append 
</h4>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Here’s how 
<span class="verb">
<span class="cmtt-10"> append/3 
</span>
</span> is defined: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb283">
<a id="x40-54002r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  append([],L,L). 
</span>
<br class="fancyvrb"/>
<a id="x40-54004r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  append([H|T],L2,[H|L3]) 
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  append(T,L2,L3). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> This is a recursive definition. The base case simply says that appending the empty list to any list whatsoever yields that same list, which is obviously true. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> But what about the recursive step? This says that when we concatenate a non-empty list 
<span class="verb">
<span class="cmtt-10"> [H|T] 
</span>
</span> with a list 
<span class="verb">
<span class="cmtt-10"> L2 
</span>
</span> , we end up with the list whose head is 
<span class="verb">
<span class="cmtt-10"> H 
</span>
</span> and whose tail is the result of concatenating 
<span class="verb">
<span class="cmtt-10"> T 
</span>
</span> with 
<span class="verb">
<span class="cmtt-10"> L2 
</span>
</span> . It may be useful to think about this definition pictorially: 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="quote">
<!--l. 92-->
<p class="noindent"> Input: [ H 
<span class="cmsy-10"> ∣ 
</span>
<span class="fbox">  T   
</span> ] + 
<span class="fbox">  L2   
</span>
<br class="newline"/> Result: [ H 
<span class="cmsy-10"> ∣ 
</span>
<img alt="|----| ◟L ◝3◜-◞-" src="html/lpn-html0x.png"/>
<sub>
<span class="fbox"> T 
</span>
<span class="cmr-7"> + 
</span>
<span class="fbox"> L2 
</span>
</sub> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> But what is the procedural meaning of this definition? What actually goes on when we use 
<span class="verb">
<span class="cmtt-10"> append/3 
</span>
</span> to glue two lists together? Let’s take a detailed look at what happens when we pose the query 
<span class="verb">
<span class="cmtt-10"> ?- 
</span>
<span class="cmtt-10">  append([a,b,c],[1,2,3],X) 
</span>
</span> . 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> When we pose this query, Prolog will match it to the head of the recursive rule, generating a new internal variable (say 
<span class="verb">
<span class="cmtt-10"> _G518 
</span>
</span> ) in the process. If we carried out a trace of what happens next, we would get something like the following: 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb284">
<a id="x40-54006r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  append([a, 
</span>
<span class="cmtt-10">  b, 
</span>
<span class="cmtt-10">  c], 
</span>
<span class="cmtt-10">  [1, 
</span>
<span class="cmtt-10">  2, 
</span>
<span class="cmtt-10">  3], 
</span>
<span class="cmtt-10">  _G518) 
</span>
<br class="fancyvrb"/>
<a id="x40-54008r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  append([b, 
</span>
<span class="cmtt-10">  c], 
</span>
<span class="cmtt-10">  [1, 
</span>
<span class="cmtt-10">  2, 
</span>
<span class="cmtt-10">  3], 
</span>
<span class="cmtt-10">  _G587) 
</span>
<br class="fancyvrb"/>
<a id="x40-54010r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  append([c], 
</span>
<span class="cmtt-10">  [1, 
</span>
<span class="cmtt-10">  2, 
</span>
<span class="cmtt-10">  3], 
</span>
<span class="cmtt-10">  _G590) 
</span>
<br class="fancyvrb"/>
<a id="x40-54012r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  append([], 
</span>
<span class="cmtt-10">  [1, 
</span>
<span class="cmtt-10">  2, 
</span>
<span class="cmtt-10">  3], 
</span>
<span class="cmtt-10">  _G593) 
</span>
<br class="fancyvrb"/>
<a id="x40-54014r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  append([], 
</span>
<span class="cmtt-10">  [1, 
</span>
<span class="cmtt-10">  2, 
</span>
<span class="cmtt-10">  3], 
</span>
<span class="cmtt-10">  [1, 
</span>
<span class="cmtt-10">  2, 
</span>
<span class="cmtt-10">  3]) 
</span>
<br class="fancyvrb"/>
<a id="x40-54016r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  append([c], 
</span>
<span class="cmtt-10">  [1, 
</span>
<span class="cmtt-10">  2, 
</span>
<span class="cmtt-10">  3], 
</span>
<span class="cmtt-10">  [c, 
</span>
<span class="cmtt-10">  1, 
</span>
<span class="cmtt-10">  2, 
</span>
<span class="cmtt-10">  3]) 
</span>
<br class="fancyvrb"/>
<a id="x40-54018r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  append([b, 
</span>
<span class="cmtt-10">  c], 
</span>
<span class="cmtt-10">  [1, 
</span>
<span class="cmtt-10">  2, 
</span>
<span class="cmtt-10">  3], 
</span>
<span class="cmtt-10">  [b, 
</span>
<span class="cmtt-10">  c, 
</span>
<span class="cmtt-10">  1, 
</span>
<span class="cmtt-10">  2, 
</span>
<span class="cmtt-10">  3]) 
</span>
<br class="fancyvrb"/>
<a id="x40-54020r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  append([a, 
</span>
<span class="cmtt-10">  b, 
</span>
<span class="cmtt-10">  c], 
</span>
<span class="cmtt-10">  [1, 
</span>
<span class="cmtt-10">  2, 
</span>
<span class="cmtt-10">  3], 
</span>
<span class="cmtt-10">  [a, 
</span>
<span class="cmtt-10">  b, 
</span>
<span class="cmtt-10">  c, 
</span>
<span class="cmtt-10">  1, 
</span>
<span class="cmtt-10">  2, 
</span>
<span class="cmtt-10">  3]) 
</span>
<br class="fancyvrb"/>
<a id="x40-54022r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x40-54024r10">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [a, 
</span>
<span class="cmtt-10">  b, 
</span>
<span class="cmtt-10">  c, 
</span>
<span class="cmtt-10">  1, 
</span>
<span class="cmtt-10">  2, 
</span>
<span class="cmtt-10">  3] 
</span>
<br class="fancyvrb"/>
<a id="x40-54026r11">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> The basic pattern should be clear: in the first four lines we see that Prolog recurses its way down the list in its first argument until it can apply the base case of the recursive definition. Then, as the next four lines show, it then stepwise ‘fills in’ the result. How is this ‘filling in’ process carried out? By successively instantiating the variables 
<span class="verb">
<span class="cmtt-10"> _G593 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> _G590 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> _G587 
</span>
</span> , and 
<span class="verb">
<span class="cmtt-10"> _G518 
</span>
</span> . But while it’s important to grasp this basic pattern, it doesn’t tell us all we need to know about the way 
<span class="verb">
<span class="cmtt-10"> append/3 
</span>
</span> works, so let’s dig deeper. Here is the search tree for the query 
<span class="verb">
<span class="cmtt-10"> append([a,b,c],[1,2,3],X) 
</span>
</span> . We’ll work carefully through all the steps, making a careful note of what our goals are, and what the variables are instantiated to. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="center">
<!--l. 140-->
<p class="noindent">
</p>
<!--l. 141-->
<p class="noindent">
<img alt="*Pic not found*" src="html/chap6-pspic1.ps.png"/>
</p>
</div>
</div>

<div class="nb-cell html" name="htm1">
<ol class="enumerate1">
<li class="enumerate" id="x40-54028x1"> Goal 1: 
<span class="verb">
<span class="cmtt-10"> append([a,b,c],[1,2,3],_G518) 
</span>
</span> . Prolog matches this to the head of the recursive rule (that is, 
<span class="verb">
<span class="cmtt-10"> append([H|T],L2,[H|L3]) 
</span>
</span> ). Thus 
<span class="verb">
<span class="cmtt-10"> _G518 
</span>
</span> is unified to 
<span class="verb">
<span class="cmtt-10"> [a|L3] 
</span>
</span> , and Prolog has the new goal 
<span class="verb">
<span class="cmtt-10"> append([b,c],[1,2,3],L3) 
</span>
</span> . It generates a new variable 
<span class="verb">
<span class="cmtt-10"> _G587 
</span>
</span> for 
<span class="verb">
<span class="cmtt-10"> L3 
</span>
</span> , thus we have that 
<span class="verb">
<span class="cmtt-10"> _G518 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [a|_G587] 
</span>
</span> . 
</li>
<li class="enumerate" id="x40-54030x2"> Goal 2: 
<span class="verb">
<span class="cmtt-10"> append([b,c],[1,2,3],_G587) 
</span>
</span> . Prolog matches this to the head of the recursive rule, thus 
<span class="verb">
<span class="cmtt-10"> _G587 
</span>
</span> is unified to 
<span class="verb">
<span class="cmtt-10"> [b|L3] 
</span>
</span> , and Prolog has the new goal 
<span class="verb">
<span class="cmtt-10"> append([c],[1,2,3],L3) 
</span>
</span> . It generates the internal variable 
<span class="verb">
<span class="cmtt-10"> _G590 
</span>
</span> for 
<span class="verb">
<span class="cmtt-10"> L3 
</span>
</span> , thus we have that 
<span class="verb">
<span class="cmtt-10"> _G587 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [b|_G590] 
</span>
</span> . 
</li>
<li class="enumerate" id="x40-54032x3"> Goal 3: 
<span class="verb">
<span class="cmtt-10"> append([c],[1,2,3],_G590 
</span>
</span> ). Prolog matches this to the head of the recursive rule, thus 
<span class="verb">
<span class="cmtt-10"> _G590 
</span>
</span> is unified to 
<span class="verb">
<span class="cmtt-10"> [c|L3] 
</span>
</span> , and Prolog has the new goal 
<span class="verb">
<span class="cmtt-10"> append([],[1,2,3],L3) 
</span>
</span> . It generates the internal variable 
<span class="verb">
<span class="cmtt-10"> _G593 
</span>
</span> for 
<span class="verb">
<span class="cmtt-10"> L3 
</span>
</span> , thus we have that 
<span class="verb">
<span class="cmtt-10"> _G590 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [c|_G593] 
</span>
</span> . 
</li>
<li class="enumerate" id="x40-54034x4"> Goal 4: 
<span class="verb">
<span class="cmtt-10"> append([],[1,2,3],_G593 
</span>
</span> ). At last: Prolog can use the base clause (that is, 
<span class="verb">
<span class="cmtt-10"> append([],L,L) 
</span>
</span> ). And in the four successive matching steps, Prolog will obtain answers to Goal 4, Goal 3, Goal 2, and Goal 1. Here’s how. 
</li>
<li class="enumerate" id="x40-54036x5"> Answer to Goal 4: 
<span class="verb">
<span class="cmtt-10"> append([],[1,2,3],[1,2,3]) 
</span>
</span> . This is because when we match Goal 4 (that is, 
<span class="verb">
<span class="cmtt-10"> append([],[1,2,3],_G593) 
</span>
</span> to the base clause, 
<span class="verb">
<span class="cmtt-10"> _G593 
</span>
</span> is unified to 
<span class="verb">
<span class="cmtt-10"> [1,2,3] 
</span>
</span> . 
</li>
<li class="enumerate" id="x40-54038x6"> Answer to Goal 3: 
<span class="verb">
<span class="cmtt-10"> append([c],[1,2,3],[c,1,2,3]) 
</span>
</span> . Why? Because Goal 3 is 
<span class="verb">
<span class="cmtt-10"> append([c],[1,2,3],_G590]) 
</span>
</span> , and 
<span class="verb">
<span class="cmtt-10"> _G590 
</span>
</span> is the list 
<span class="verb">
<span class="cmtt-10"> [c|_G593] 
</span>
</span> , and we have just unified 
<span class="verb">
<span class="cmtt-10"> _G593 
</span>
</span> to 
<span class="verb">
<span class="cmtt-10"> [1,2,3] 
</span>
</span> . So 
<span class="verb">
<span class="cmtt-10"> _G590 
</span>
</span> is unified to 
<span class="verb">
<span class="cmtt-10"> [c,1,2,3] 
</span>
</span> . 
</li>
<li class="enumerate" id="x40-54040x7"> Answer to Goal 2: 
<span class="verb">
<span class="cmtt-10"> append([b,c],[1,2,3],[b,c,1,2,3]) 
</span>
</span> . Why? Because Goal 2 is 
<span class="verb">
<span class="cmtt-10"> append([b,c],[1,2,3],_G587]) 
</span>
</span> , and 
<span class="verb">
<span class="cmtt-10"> _G587 
</span>
</span> is the list 
<span class="verb">
<span class="cmtt-10"> [b|_G590] 
</span>
</span> , and we have just unified 
<span class="verb">
<span class="cmtt-10"> _G590 
</span>
</span> to 
<span class="verb">
<span class="cmtt-10"> [c,1,2,3] 
</span>
</span> . So 
<span class="verb">
<span class="cmtt-10"> _G587 
</span>
</span> is unified to 
<span class="verb">
<span class="cmtt-10"> [b,c,1,2,3] 
</span>
</span> . 
</li>
<li class="enumerate" id="x40-54042x8"> Answer to Goal 1: 
<span class="verb">
<span class="cmtt-10"> append([a,b,c],[1,2,3],[b,c,1,2,3]) 
</span>
</span> . Why? Because Goal 2 is 
<span class="verb">
<span class="cmtt-10"> append([a,b,c],[1,2,3],_G518]) 
</span>
</span> , and 
<span class="verb">
<span class="cmtt-10"> _G518 
</span>
</span> is the list 
<span class="verb">
<span class="cmtt-10"> [a|_G587] 
</span>
</span> , and we have just unified 
<span class="verb">
<span class="cmtt-10"> _G587 
</span>
</span> to 
<span class="verb">
<span class="cmtt-10"> [b,c,1,2,3] 
</span>
</span> . So 
<span class="verb">
<span class="cmtt-10"> _G518 
</span>
</span> is unified to 
<span class="verb">
<span class="cmtt-10"> [a,b,c,1,2,3] 
</span>
</span> . 
</li>
<li class="enumerate" id="x40-54044x9"> Thus Prolog now knows how to instantiate 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> , the original query variable. It tells us that 
<span class="verb">
<span class="cmtt-10"> X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [a,b,c,1,2,3] 
</span>
</span> , which is what we want. 
</li>
</ol>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Work through this example carefully, and make sure you fully understand the pattern of variable instantiations, namely: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb285">
<a id="x40-54046r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  _G518 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [a|_G587] 
</span>
<br class="fancyvrb"/>
<a id="x40-54048r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [a|[b|_G590]] 
</span>
<br class="fancyvrb"/>
<a id="x40-54050r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [a|[b|[c|_G593]]] 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> This type of pattern lies at the heart of the way 
<span class="verb">
<span class="cmtt-10"> append/3 
</span>
</span> works. Moreover, it illustrates a more general theme: the use of unification to build structure. In a nutshell, the recursive calls to 
<span class="verb">
<span class="cmtt-10"> append/3 
</span>
</span> build up this nested pattern of variables which code up the required answer. When Prolog finally instantiates the innermost variable 
<span class="verb">
<span class="cmtt-10"> _G593 
</span>
</span> to 
<span class="verb">
<span class="cmtt-10"> [1, 
</span>
<span class="cmtt-10">  2, 
</span>
<span class="cmtt-10">  3] 
</span>
</span> , the answer crystallises out, like a snowflake forming around a grain of dust. But it is unification, not magic, that produces the result. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent">
</p>
</div>
<div class="nb-cell html" name="htm1">
<h4 class="likesubsectionHead">
<a id="x40-550006.1">
</a> Using append 
</h4>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Now that we understand how 
<span class="verb">
<span class="cmtt-10"> append/3 
</span>
</span> works, let’s see how we can put it to work. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> One important use of 
<span class="verb">
<span class="cmtt-10"> append/3 
</span>
</span> is to split up a list into two consecutive lists. For example: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb286">
<a id="x40-55002r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  append(X,Y,[a,b,c,d]). 
</span>
<br class="fancyvrb"/>
<a id="x40-55004r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x40-55006r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [] 
</span>
<br class="fancyvrb"/>
<a id="x40-55008r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Y 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [a,b,c,d] 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x40-55010r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x40-55012r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [a] 
</span>
<br class="fancyvrb"/>
<a id="x40-55014r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Y 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [b,c,d] 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x40-55016r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x40-55018r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [a,b] 
</span>
<br class="fancyvrb"/>
<a id="x40-55020r10">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Y 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [c,d] 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x40-55022r11">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x40-55024r12">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [a,b,c] 
</span>
<br class="fancyvrb"/>
<a id="x40-55026r13">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Y 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [d] 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x40-55028r14">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x40-55030r15">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [a,b,c,d] 
</span>
<br class="fancyvrb"/>
<a id="x40-55032r16">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Y 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [] 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x40-55034r17">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x40-55036r18">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  no 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> That is, we give the list we want to split up (here 
<span class="verb">
<span class="cmtt-10"> [a,b,c,d] 
</span>
</span> ) to 
<span class="verb">
<span class="cmtt-10"> append/3 
</span>
</span> as the third argument, and we use variables for the first two arguments. Prolog then searches for ways of instantiating the variables to two lists that concatenate to give the third argument, thus splitting up the list in two. Moreover, as this example shows, by backtracking, Prolog can find all possible ways of splitting up a list into two consecutive lists. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> This ability means it is easy to define some useful predicates with 
<span class="verb">
<span class="cmtt-10"> append/3 
</span>
</span> . Let’s consider some examples. First, we can define a program which finds prefixes of lists. For example, the prefixes of 
<span class="verb">
<span class="cmtt-10"> [a,b,c,d] 
</span>
</span> are 
<span class="verb">
<span class="cmtt-10"> [] 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> [a] 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> [a,b] 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> [a,b,c] 
</span>
</span> , and 
<span class="verb">
<span class="cmtt-10"> [a,b,c,d] 
</span>
</span> . With the help of 
<span class="verb">
<span class="cmtt-10"> append/3 
</span>
</span> it is straightforward to define a program 
<span class="verb">
<span class="cmtt-10"> prefix/2 
</span>
</span> , whose arguments are both lists, such that 
<span class="verb">
<span class="cmtt-10"> prefix(P,L) 
</span>
</span> will hold when 
<span class="verb">
<span class="cmtt-10"> P 
</span>
</span> is a prefix of 
<span class="verb">
<span class="cmtt-10"> L 
</span>
</span> . Here’s how: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb287">
<a id="x40-55038r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  prefix(P,L):- 
</span>
<span class="cmtt-10">  append(P,_,L). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> This says that list 
<span class="verb">
<span class="cmtt-10"> P 
</span>
</span> is a prefix of list 
<span class="verb">
<span class="cmtt-10"> L 
</span>
</span> when there is some list such that 
<span class="verb">
<span class="cmtt-10"> L 
</span>
</span> is the result of concatenating 
<span class="verb">
<span class="cmtt-10"> P 
</span>
</span> with that list. (We use the anonymous variable since we don’t care what that other list is: we only care that there is some such list or other.) This predicate successfully finds prefixes of lists, and moreover, via backtracking, finds them all: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb288">
<a id="x40-55040r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  prefix(X,[a,b,c,d]). 
</span>
<br class="fancyvrb"/>
<a id="x40-55042r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x40-55044r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [] 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x40-55046r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x40-55048r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [a] 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x40-55050r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x40-55052r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [a,b] 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x40-55054r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x40-55056r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [a,b,c] 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x40-55058r10">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x40-55060r11">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [a,b,c,d] 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x40-55062r12">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x40-55064r13">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  no 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> In a similar fashion, we can define a program which finds suffixes of lists. For example, the suffixes of 
<span class="verb">
<span class="cmtt-10"> [a,b,c,d] 
</span>
</span> are 
<span class="verb">
<span class="cmtt-10"> [] 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> [d] 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> [c,d] 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> [b,c,d] 
</span>
</span> , and 
<span class="verb">
<span class="cmtt-10"> [a,b,c,d] 
</span>
</span> . Again, using 
<span class="verb">
<span class="cmtt-10"> append/3 
</span>
</span> it is easy to define 
<span class="verb">
<span class="cmtt-10"> suffix/2 
</span>
</span> , a predicate whose arguments are both lists, such that 
<span class="verb">
<span class="cmtt-10"> suffix(S,L) 
</span>
</span> will hold when 
<span class="verb">
<span class="cmtt-10"> S 
</span>
</span> is a suffix of 
<span class="verb">
<span class="cmtt-10"> L 
</span>
</span> : 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb289">
<a id="x40-55066r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  suffix(S,L):- 
</span>
<span class="cmtt-10">  append(_,S,L). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> That is, list 
<span class="verb">
<span class="cmtt-10"> S 
</span>
</span> is a suffix of list 
<span class="verb">
<span class="cmtt-10"> L 
</span>
</span> if there is some list such that 
<span class="verb">
<span class="cmtt-10"> L 
</span>
</span> is the result of concatenating that list with 
<span class="verb">
<span class="cmtt-10"> S 
</span>
</span> . This predicate successfully finds suffixes of lists, and moreover, via backtracking, finds them all: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb290">
<a id="x40-55068r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  suffix(X,[a,b,c,d]). 
</span>
<br class="fancyvrb"/>
<a id="x40-55070r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x40-55072r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [a,b,c,d] 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x40-55074r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x40-55076r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [b,c,d] 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x40-55078r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x40-55080r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [c,d] 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x40-55082r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x40-55084r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [d] 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x40-55086r10">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x40-55088r11">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [] 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x40-55090r12">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x40-55092r13">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  no 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Make sure you understand why the results come out in this order. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> And now it’s very easy to define a program that finds sublists of lists. The sublists of 
<span class="verb">
<span class="cmtt-10"> [a,b,c,d] 
</span>
</span> are 
<span class="verb">
<span class="cmtt-10"> [] 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> [a] 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> [b] 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> [c] 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> [d] 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> [a,b] 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> [b,c] 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> [c,d] 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> [a,b,c] 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> [b,c,d] 
</span>
</span> , and 
<span class="verb">
<span class="cmtt-10"> [a,b,c,d] 
</span>
</span> . A little thought reveals that the sublists of a list L are simply the 
<span class="cmti-10"> prefixes of suffixes of 
</span> L. Think about it pictorially: 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="quote">
<!--l. 335-->
<p class="noindent"> Take suffix: 
<span class="fbox">
<span class="cmmi-10"> a,b,c,d,e,f,g, 
</span>
<img alt="h,i,j,k,l,m, n,o,p ◟------◝◜------◞" src="html/lpn-html1x.png"/>
</span>
<br class="newline"/> Take prefix:       
<span class="fbox">
<img alt="h,i,j,k,l ◟ ◝◜ ◞" src="html/lpn-html2x.png"/>
<span class="cmmi-10"> ,m,n,o,p 
</span>
</span>
<br class="newline"/> Result:       
<span class="fbox">
<span class="cmmi-10"> h,i,j,k,l 
</span>
</span>
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> As we already have defined the predicates for producing suffixes and prefixes of lists, we simply define a sublist as: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb291">
<a id="x40-55094r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  sublist(SubL,L):- 
</span>
<span class="cmtt-10">  suffix(S,L), 
</span>
<span class="cmtt-10">  prefix(SubL,S). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> That is, 
<span class="verb">
<span class="cmtt-10"> SubL 
</span>
</span> is a sublist of 
<span class="verb">
<span class="cmtt-10"> L 
</span>
</span> if there is some suffix 
<span class="verb">
<span class="cmtt-10"> S 
</span>
</span> of 
<span class="verb">
<span class="cmtt-10"> L 
</span>
</span> of which 
<span class="verb">
<span class="cmtt-10"> SubL 
</span>
</span> is a prefix. This program doesn’t 
<span class="cmti-10"> explicitly 
</span> use 
<span class="verb">
<span class="cmtt-10"> append/3 
</span>
</span> , but of course, under the surface, that’s what’s doing the work for us, as both 
<span class="verb">
<span class="cmtt-10"> prefix/2 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> suffix/2 
</span>
</span> are defined using 
<span class="verb">
<span class="cmtt-10"> append/3 
</span>
</span> . 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse25"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse24"> front 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch6"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent">
<a id="taillpn-htmlse24">
</a>
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse26"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse24"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse24"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=#taillpn-htmlse25"> tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch6"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<h3 class="sectionHead">
<span class="titlemark"> 6.2 
</span>
<a id="x41-560006.2">
</a> Reversing a List 
</h3>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> The 
<span class="verb">
<span class="cmtt-10"> append/3 
</span>
</span> predicate is useful, and it is important to know how to put it to work. But it is just as important to know that it can be a source of inefficiency, and that you probably don’t want to use it all the time. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Why is 
<span class="verb">
<span class="cmtt-10"> append/3 
</span>
</span> a source of inefficiency? If you think about the way it works, you’ll notice a weakness: 
<span class="verb">
<span class="cmtt-10"> append/3 
</span>
</span> doesn’t join two lists in one simple action. Rather, it needs to work its way down its first argument until it finds the end of the list, and only then can it carry out the concatenation. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Now, often this causes no problems. For example, if we have two lists and we just want to concatenate them, it’s probably not too bad. Sure, Prolog will need to work down the length of the first list, but if the list is not too long, that’s probably not too high a price to pay for the ease of working with 
<span class="verb">
<span class="cmtt-10"> append/3 
</span>
</span> . 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> But matters may be very different if the first two arguments are given as variables. As we’ve just seen, it can be very useful to give 
<span class="verb">
<span class="cmtt-10"> append/3 
</span>
</span> variables in its first two arguments, for this lets Prolog search for ways of splitting up the lists. But there is a price to pay: a lot of searching is going on, and this can lead to very inefficient programs. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> To illustrate this, we shall examine the problem of reversing a list. That is, we will examine the problem of defining a predicate which takes a list (say 
<span class="verb">
<span class="cmtt-10"> [a,b,c,d] 
</span>
</span> ) as input and returns a list containing the same elements in the reverse order (here 
<span class="verb">
<span class="cmtt-10"> [d,c,b,a] 
</span>
</span> ). 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Now, a reverse predicate is a useful predicate to have around. As you will have realised by now, lists in Prolog are far easier to access from the front than from the back. For example, to pull out the head of a list 
<span class="verb">
<span class="cmtt-10"> L 
</span>
</span> , all we have to do is perform the unification 
<span class="verb">
<span class="cmtt-10"> [H|_] 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  L 
</span>
</span> ; this results in 
<span class="verb">
<span class="cmtt-10"> H 
</span>
</span> being instantiated to the head of 
<span class="verb">
<span class="cmtt-10"> L 
</span>
</span> . But pulling out the last element of an arbitrary list is harder: we can’t do it simply using unification. On the other hand, if we had a predicate which reversed lists, we could first reverse the input list, and then pull out the head of the reversed list, as this would give us the last element of the original list. So a reverse predicate could be a useful tool. However, as we may have to reverse large lists, we would like this tool to be efficient. So we need to think about the problem carefully. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> And that’s what we’re going to do now. We will define two reverse predicates: a naive one, defined with the help of 
<span class="verb">
<span class="cmtt-10"> append/3 
</span>
</span> , and a more efficient (and indeed, more natural) one defined using accumulators. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent">
</p>
</div>
<div class="nb-cell html" name="htm1">
<h4 class="likesubsectionHead">
<a id="x41-570006.2">
</a> Naive reverse using append 
</h4>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Here’s a recursive definition of what is involved in reversing a list: 
</p>
</div>

<div class="nb-cell html" name="htm1">
<ol class="enumerate1">
<li class="enumerate" id="x41-57002x1"> If we reverse the empty list, we obtain the empty list. 
</li>
<li class="enumerate" id="x41-57004x2"> If we reverse the list 
<span class="verb">
<span class="cmtt-10"> [H|T] 
</span>
</span> , we end up with the list obtained by reversing 
<span class="verb">
<span class="cmtt-10"> T 
</span>
</span> and concatenating with 
<span class="verb">
<span class="cmtt-10"> [H] 
</span>
</span> . 
</li>
</ol>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> To see that the recursive clause is correct, consider the list 
<span class="verb">
<span class="cmtt-10"> [a,b,c,d] 
</span>
</span> . If we reverse the tail of this list we obtain 
<span class="verb">
<span class="cmtt-10"> [d,c,b] 
</span>
</span> . Concatenating this with 
<span class="verb">
<span class="cmtt-10"> [a] 
</span>
</span> yields 
<span class="verb">
<span class="cmtt-10"> [d,c,b,a] 
</span>
</span> , which is the reverse of 
<span class="verb">
<span class="cmtt-10"> [a,b,c,d] 
</span>
</span> . 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> With the help of 
<span class="verb">
<span class="cmtt-10"> append/3 
</span>
</span> it is easy to turn this recursive definition into Prolog: 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb292">
<a id="x41-57006r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  naiverev([],[]). 
</span>
<br class="fancyvrb"/>
<a id="x41-57008r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  naiverev([H|T],R):- 
</span>
<span class="cmtt-10">  naiverev(T,RevT), 
</span>
<span class="cmtt-10">  append(RevT,[H],R). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Now, this definition is correct, but it does an awful lot of work. It is 
<span class="cmti-10"> very 
</span> instructive to look at a trace of this program. This shows that the program is spending a lot of time carrying out appends. This shouldn’t be too surprising: after, all, we are calling 
<span class="verb">
<span class="cmtt-10"> append/3 
</span>
</span> recursively. The result is very inefficient (if you run a trace, you will find that it takes about 90 steps to reverse an eight element list) and hard to understand (the predicate spends most of its time in the recursive calls to 
<span class="verb">
<span class="cmtt-10"> append/3 
</span>
</span> , making it very hard to see what is going on). 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Not nice. But as we shall now see, there 
<span class="cmti-10"> is 
</span> a better way. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent">
</p>
</div>
<div class="nb-cell html" name="htm1">
<h4 class="likesubsectionHead">
<a id="x41-580006.2">
</a> Reverse using an accumulator 
</h4>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> The better way is to use an accumulator. The underlying idea is simple and natural. Our accumulator will be a list, and when we start it will be empty. Suppose we want to reverse 
<span class="verb">
<span class="cmtt-10"> [a,b,c,d] 
</span>
</span> . At the start, our accumulator will be 
<span class="verb">
<span class="cmtt-10"> [] 
</span>
</span> . So we simply take the head of the list we are trying to reverse and add it as the head of the accumulator. We then carry on processing the tail, thus we are faced with the task of reversing 
<span class="verb">
<span class="cmtt-10"> [b,c,d] 
</span>
</span> , and our accumulator is 
<span class="verb">
<span class="cmtt-10"> [a] 
</span>
</span> . Again we take the head of the list we are trying to reverse and add it as the head of the accumulator (thus our new accumulator is 
<span class="verb">
<span class="cmtt-10"> [b,a] 
</span>
</span> ) and carry on trying to reverse 
<span class="verb">
<span class="cmtt-10"> [c,d] 
</span>
</span> . Again we use the same idea, so we get a new accumulator 
<span class="verb">
<span class="cmtt-10"> [c,b,a] 
</span>
</span> , and try to reverse 
<span class="verb">
<span class="cmtt-10"> [d] 
</span>
</span> . Needless to say, the next step yields an accumulator 
<span class="verb">
<span class="cmtt-10"> [d,c,b,a] 
</span>
</span> and the new goal of trying to reverse 
<span class="verb">
<span class="cmtt-10"> [] 
</span>
</span> . This is where the process stops: 
<span class="cmti-10"> and our accumulator contains the reversed list we want 
</span> . To summarise: the idea is simply to work our way through the list we want to reverse, and push each element in turn onto the head of the accumulator, like this: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb293">
<a id="x41-58002r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  List: 
</span>
<span class="cmtt-10">  [a,b,c,d] 
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Accumulator: 
</span>
<span class="cmtt-10">  [] 
</span>
<br class="fancyvrb"/>
<a id="x41-58004r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  List: 
</span>
<span class="cmtt-10">  [b,c,d] 
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Accumulator: 
</span>
<span class="cmtt-10">  [a] 
</span>
<br class="fancyvrb"/>
<a id="x41-58006r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  List: 
</span>
<span class="cmtt-10">  [c,d] 
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Accumulator: 
</span>
<span class="cmtt-10">  [b,a] 
</span>
<br class="fancyvrb"/>
<a id="x41-58008r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  List: 
</span>
<span class="cmtt-10">  [d] 
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Accumulator: 
</span>
<span class="cmtt-10">  [c,b,a] 
</span>
<br class="fancyvrb"/>
<a id="x41-58010r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  List: 
</span>
<span class="cmtt-10">  [] 
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Accumulator: 
</span>
<span class="cmtt-10">  [d,c,b,a] 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> This will be efficient because we simply blast our way through the list once: we don’t have to waste time carrying out concatenation or other irrelevant work. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> It’s also easy to put this idea in Prolog. Here’s the accumulator code: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb294">
<a id="x41-58012r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  accRev([H|T],A,R):- 
</span>
<span class="cmtt-10">  accRev(T,[H|A],R). 
</span>
<br class="fancyvrb"/>
<a id="x41-58014r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  accRev([],A,A). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> This is classic accumulator code: it follows the same pattern as the arithmetic examples we examined in the previous chapter. The recursive clause is responsible for chopping off the head of the input list, and pushing it onto the accumulator. The base case halts the program, and copies the accumulator to the final argument. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> As is usual with accumulator code, it’s a good idea to write a predicate which carries out the required initialisation of the accumulator for us: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb295">
<a id="x41-58016r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  rev(L,R):- 
</span>
<span class="cmtt-10">  accRev(L,[],R). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Again, it is instructive to run some traces on this program and compare it with 
<span class="verb">
<span class="cmtt-10"> naiverev/2 
</span>
</span> . The accumulator based version is 
<span class="cmti-10"> clearly 
</span> better. For example, it takes about 20 steps to reverse an eight element list, as opposed to 90 for the naive version. Moreover, the trace is far easier to follow. The idea underlying the accumulator based version is simpler and more natural than the recursive calls to 
<span class="verb">
<span class="cmtt-10"> append/3 
</span>
</span> . 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Summing up, 
<span class="verb">
<span class="cmtt-10"> append/3 
</span>
</span> is a useful program, and you certainly should not be scared of using it. However, you also need to be aware that it is a source of inefficiency, so when you use it, ask yourself whether there is a better way. And often there is. The use of accumulators is often better, and (as the 
<span class="verb">
<span class="cmtt-10"> rev/2 
</span>
</span> example show) accumulators can be a natural way of handling list processing tasks. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse26"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse24"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse24"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse25"> front 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch6"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent">
<a id="taillpn-htmlse25">
</a>
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse27"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse25"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse25"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=#taillpn-htmlse26"> tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch6"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<h3 class="sectionHead">
<span class="titlemark"> 6.3 
</span>
<a id="x42-590006.3">
</a> <strong>Exercise</strong>s 
</h3>
</div>
<div class="nb-cell html" name="htm1">
<div class="newtheorem">
<!--l. 514-->
<p class="noindent">
<span class="head">
<span class="cmbx-10"> <strong>Exercise</strong>
</span>
<span class="cmbx-10">  6.1 
</span>
</span>
<a id="x42-590011">
</a>
<span class="cmti-10"> Let’s call a list 
</span> doubled 
<span class="cmti-10"> if it is made of two consecutive 
</span>
<span class="cmti-10"> blocks of elements that are exactly the same. For example, 
</span>
<span class="verb">
<span class="cmtt-10"> [a,b,c,a,b,c] 
</span>
</span>
<span class="cmti-10"> is doubled (it’s made up of 
</span>
<span class="verb">
<span class="cmtt-10"> [a,b,c] 
</span>
</span>
<span class="cmti-10"> followed by 
</span>
<span class="verb">
<span class="cmtt-10"> [a,b,c] 
</span>
</span>
<span class="cmti-10"> ) and so is 
</span>
<span class="verb">
<span class="cmtt-10"> [foo,gubble,foo,gubble] 
</span>
</span>
<span class="cmti-10"> . On the other hand, 
</span>
<span class="verb">
<span class="cmtt-10"> [foo,gubble,foo] 
</span>
</span>
<span class="cmti-10"> is not 
</span>
<span class="cmti-10"> doubled. Write a predicate 
</span>
<span class="verb">
<span class="cmtt-10"> doubled(List) 
</span>
</span>
<span class="cmti-10"> which succeeds when 
</span>
<span class="verb">
<span class="cmtt-10"> List 
</span>
</span>
<span class="cmti-10"> is a 
</span>
<span class="cmti-10"> doubled list. 
</span>
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<div class="newtheorem">
<!--l. 523-->
<p class="noindent">
<span class="head">
<span class="cmbx-10"> <strong>Exercise</strong>
</span>
<span class="cmbx-10">  6.2 
</span>
</span>
<a id="x42-590022">
</a>
<span class="cmti-10"> A palindrome is a word or phrase that spells the same forwards and 
</span>
<span class="cmti-10"> backwards. For example, ‘rotator’, ‘eve’, and ‘nurses run’ are all palindromes. Write 
</span>
<span class="cmti-10"> a predicate 
</span>
<span class="verb">
<span class="cmtt-10"> palindrome(List) 
</span>
</span>
<span class="cmti-10"> , which checks whether 
</span>
<span class="verb">
<span class="cmtt-10"> List 
</span>
</span>
<span class="cmti-10"> is a palindrome. For 
</span>
<span class="cmti-10"> example, to the queries 
</span>
</p>
<div class="fancyvrb" id="fancyvrb296">
<a id="x42-59004r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  palindrome([r,o,t,a,t,o,r]). 
</span>
</div>
<!--l. 530-->
<p class="noindent">
<span class="cmti-10"> and 
</span>
</p>
<div class="fancyvrb" id="fancyvrb297">
<a id="x42-59006r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  palindrome([n,u,r,s,e,s,r,u,n]). 
</span>
</div>
<!--l. 534-->
<p class="noindent">
<span class="cmti-10"> Prolog should respond yes, but to the query 
</span>
</p>
<div class="fancyvrb" id="fancyvrb298">
<a id="x42-59008r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  palindrome([n,o,t,h,i,s]). 
</span>
</div>
<!--l. 538-->
<p class="noindent">
<span class="cmti-10"> it should respond no. 
</span>
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<div class="newtheorem">
<!--l. 542-->
<p class="noindent">
<span class="head">
<span class="cmbx-10"> <strong>Exercise</strong>
</span>
<span class="cmbx-10">  6.3 
</span>
</span>
<a id="x42-590093">
</a>
<span class="cmti-10"> Write a predicate 
</span>
<span class="verb">
<span class="cmtt-10"> toptail(InList,OutList) 
</span>
</span>
<span class="cmti-10"> which says no if 
</span>
<span class="verb">
<span class="cmtt-10"> InList 
</span>
</span>
<span class="cmti-10"> is a list containing fewer than 2 elements, and which deletes the first and the 
</span>
<span class="cmti-10"> last elements of 
</span>
<span class="verb">
<span class="cmtt-10"> InList 
</span>
</span>
<span class="cmti-10"> and returns the result as 
</span>
<span class="verb">
<span class="cmtt-10"> OutList 
</span>
</span>
<span class="cmti-10"> , when 
</span>
<span class="verb">
<span class="cmtt-10"> InList 
</span>
</span>
<span class="cmti-10"> is a list 
</span>
<span class="cmti-10"> containing at least 2 elements. For example: 
</span>
</p>
<div class="fancyvrb" id="fancyvrb299">
<a id="x42-59011r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  toptail([a],T). 
</span>
<br class="fancyvrb"/>
<a id="x42-59013r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  no 
</span>
<br class="fancyvrb"/>
<a id="x42-59015r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x42-59017r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  toptail([a,b],T). 
</span>
<br class="fancyvrb"/>
<a id="x42-59019r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  T=[] 
</span>
<br class="fancyvrb"/>
<a id="x42-59021r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x42-59023r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  toptail([a,b,c],T). 
</span>
<br class="fancyvrb"/>
<a id="x42-59025r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  T=[b] 
</span>
</div>
<!--l. 559-->
<p class="indent">
<span class="cmti-10"> (Hint: here’s where 
</span>
<span class="verb">
<span class="cmtt-10"> append/3 
</span>
</span>
<span class="cmti-10"> comes in useful.) 
</span>
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<div class="newtheorem">
<!--l. 562-->
<p class="noindent">
<span class="head">
<span class="cmbx-10"> <strong>Exercise</strong>
</span>
<span class="cmbx-10">  6.4 
</span>
</span>
<a id="x42-590264">
</a>
<span class="cmti-10"> Write a predicate 
</span>
<span class="verb">
<span class="cmtt-10"> last(List,X) 
</span>
</span>
<span class="cmti-10"> which is true only when 
</span>
<span class="verb">
<span class="cmtt-10"> List 
</span>
</span>
<span class="cmti-10"> is a 
</span>
<span class="cmti-10"> list that contains at least one element and 
</span>
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span>
<span class="cmti-10"> is the last element of that list. Do this in 
</span>
<span class="cmti-10"> two different ways: 
</span>
</p>
<ol class="enumerate1">
<li class="enumerate" id="x42-59028x1">
<span class="cmti-10"> Define 
</span>
<span class="verb">
<span class="cmtt-10"> last/2 
</span>
</span>
<span class="cmti-10"> using the predicate 
</span>
<span class="verb">
<span class="cmtt-10"> rev/2 
</span>
</span>
<span class="cmti-10"> discussed in the text. 
</span>
</li>
<li class="enumerate" id="x42-59030x2">
<span class="cmti-10"> Define 
</span>
<span class="verb">
<span class="cmtt-10"> last/2 
</span>
</span>
<span class="cmti-10"> using recursion. 
</span>
</li>
</ol>
</div>
</div>
<div class="nb-cell html" name="htm1">
<div class="newtheorem">
<!--l. 572-->
<p class="noindent">
<span class="head">
<span class="cmbx-10"> <strong>Exercise</strong>
</span>
<span class="cmbx-10">  6.5 
</span>
</span>
<a id="x42-590315">
</a>
<span class="cmti-10"> Write a predicate 
</span>
<span class="verb">
<span class="cmtt-10"> swapfl(List1,List2) 
</span>
</span>
<span class="cmti-10"> which checks whether 
</span>
<span class="verb">
<span class="cmtt-10"> List1 
</span>
</span>
<span class="cmti-10"> is identical to 
</span>
<span class="verb">
<span class="cmtt-10"> List2 
</span>
</span>
<span class="cmti-10"> , except that the first and last elements are exchanged. 
</span>
<span class="cmti-10"> Here’s where 
</span>
<span class="verb">
<span class="cmtt-10"> append/3 
</span>
</span>
<span class="cmti-10"> could come in useful again, but it is also possible to write 
</span>
<span class="cmti-10"> a recursive definition without appealing to 
</span>
<span class="verb">
<span class="cmtt-10"> append/3 
</span>
</span>
<span class="cmti-10"> (or any other) predicates. 
</span>
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<div class="newtheorem">
<!--l. 584-->
<p class="noindent">
<span class="head">
<span class="cmbx-10"> <strong>Exercise</strong>
</span>
<span class="cmbx-10">  6.6 
</span>
</span>
<a id="x42-590326">
</a>
<span class="cmti-10"> Here is an exercise for those of you who like logic puzzles. 
</span>
</p>
<!--l. 588-->
<p class="indent">
<span class="cmti-10"> There is a street with three neighbouring houses that all have a different colour, 
</span>
<span class="cmti-10"> namely red, blue, and green. People of different nationalities live in the different 
</span>
<span class="cmti-10"> houses and they all have a different pet. Here are some more facts about them: 
</span>
</p>
<ul class="itemize1">
<li class="itemize">
<span class="cmti-10"> The Englishman lives in the red house. 
</span>
</li>
<li class="itemize">
<span class="cmti-10"> The jaguar is the pet of the Spanish family. 
</span>
</li>
<li class="itemize">
<span class="cmti-10"> The Japanese lives to the right of the snail keeper. 
</span>
</li>
<li class="itemize">
<span class="cmti-10"> The snail keeper lives to the left of the blue house. 
</span>
</li>
</ul>
<!--l. 598-->
<p class="noindent">
<span class="cmti-10"> Who keeps the zebra? Don’t work it out for yourself: define a predicate 
</span>
<span class="verb">
<span class="cmtt-10"> zebra/1 
</span>
</span>
<span class="cmti-10"> that tells 
</span>
<span class="cmti-10"> you the nationality of the owner of the zebra! 
</span>
</p>
<!--l. 602-->
<p class="indent">
<span class="cmti-10"> (Hint: Think of a representation for the houses and the street. Code the four 
</span>
<span class="cmti-10"> constraints in Prolog. You may find 
</span>
<span class="verb">
<span class="cmtt-10"> member/2 
</span>
</span>
<span class="cmti-10"> and 
</span>
<span class="verb">
<span class="cmtt-10"> sublist/2 
</span>
</span>
<span class="cmti-10"> useful.) 
</span>
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse27"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse25"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse25"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse26"> front 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch6"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent">
<a id="taillpn-htmlse26">
</a>
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse26"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse26"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=#taillpn-htmlse27"> tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch6"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<h3 class="sectionHead">
<span class="titlemark"> 6.4 
</span>
<a id="x43-600006.4">
</a> Practical Session 
</h3>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> The purpose of Practical Session 6 is to help you get more experience with list manipulation. We first suggest some traces for you to carry out, and then some programming exercises. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> The following traces will help you get to grips with the predicates discussed in the text: 
</p>
</div>

<div class="nb-cell html" name="htm1">
<ol class="enumerate1">
<li class="enumerate" id="x43-60002x1"> Carry out traces of 
<span class="verb">
<span class="cmtt-10"> append/3 
</span>
</span> with the first two arguments instantiated, and the third argument uninstantiated. For example, 
<span class="verb">
<span class="cmtt-10"> append([a,b,c],[[],[2,3],b],X) 
</span>
</span> Make sure the basic pattern is clear. 
</li>
<li class="enumerate" id="x43-60004x2"> Next, carry out traces on 
<span class="verb">
<span class="cmtt-10"> append/3 
</span>
</span> as used to split up a list, that is, with the first two arguments given as variables, and the last argument instantiated. For example, 
<span class="verb">
<span class="cmtt-10"> append(L,R,[foo,wee,blup]). 
</span>
</span>
</li>
<li class="enumerate" id="x43-60006x3"> Carry out some traces on 
<span class="verb">
<span class="cmtt-10"> prefix/2 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> suffix/2 
</span>
</span> . Why does 
<span class="verb">
<span class="cmtt-10"> prefix/2 
</span>
</span> find shorter lists first, and 
<span class="verb">
<span class="cmtt-10"> suffix/2 
</span>
</span> longer lists first? 
</li>
<li class="enumerate" id="x43-60008x4"> Carry out some traces on 
<span class="verb">
<span class="cmtt-10"> sublist/2 
</span>
</span> . As we said in the text, via backtracking this predicate generates all possible sublists, but as you’ll see, it generates several sublists more than once. Do you understand why? 
</li>
<li class="enumerate" id="x43-60010x5"> Carry out traces on both 
<span class="verb">
<span class="cmtt-10"> naiverev/2 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> rev/2 
</span>
</span> , and compare their behaviour. 
</li>
</ol>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Now for some programming work: 
</p>
</div>

<div class="nb-cell html" name="htm1">
<ol class="enumerate1">
<li class="enumerate" id="x43-60012x1"> It is possible to write a one line definition of the 
<span class="verb">
<span class="cmtt-10"> member 
</span>
</span> predicate by making use of 
<span class="verb">
<span class="cmtt-10"> append/3 
</span>
</span> . Do so. How does this new version of 
<span class="verb">
<span class="cmtt-10"> member 
</span>
</span> compare in efficiency with the standard one? 
</li>
<li class="enumerate" id="x43-60014x2"> Write a predicate 
<span class="verb">
<span class="cmtt-10"> set(InList,OutList) 
</span>
</span> which takes as input an arbitrary list, and returns a list in which each element of the input list appears only once. For example, the query 
<div class="fancyvrb" id="fancyvrb300">
<a id="x43-60016r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x43-60018r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  set([2,2,foo,1,foo, 
</span>
<span class="cmtt-10">  [],[]],X). 
</span>
</div>
<!--l. 660-->
<p class="noindent"> should yield the result 
</p>
<div class="fancyvrb" id="fancyvrb301">
<a id="x43-60020r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x43-60022r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [2,foo,1,[]]. 
</span>
</div>
<!--l. 667-->
<p class="noindent"> (Hint: use the 
<span class="verb">
<span class="cmtt-10"> member 
</span>
</span> predicate to test for repetitions of items you have already found.) 
</p>
</li>
<li class="enumerate" id="x43-60024x3"> We ‘flatten’ a list by removing all the square brackets around any lists it contains as elements, and around any lists that its elements contain as elements, and so on, for all nested lists. For example, when we flatten the list 
<div class="fancyvrb" id="fancyvrb302">
<a id="x43-60026r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  [a,b,[c,d],[[1,2]],foo] 
</span>
</div>
<!--l. 678-->
<p class="noindent"> we get the list 
</p>
<div class="fancyvrb" id="fancyvrb303">
<a id="x43-60028r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  [a,b,c,d,1,2,foo] 
</span>
</div>
<!--l. 683-->
<p class="noindent"> and when we flatten the list 
</p>
<div class="fancyvrb" id="fancyvrb304">
<a id="x43-60030r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  [a,b,[[[[[[[c,d]]]]]]],[[1,2]],foo,[]] 
</span>
</div>
<!--l. 687-->
<p class="noindent"> we also get 
</p>
<div class="fancyvrb" id="fancyvrb305">
<a id="x43-60032r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  [a,b,c,d,1,2,foo]. 
</span>
</div>
<!--l. 691-->
<p class="noindent"> Write a predicate 
<span class="verb">
<span class="cmtt-10"> flatten(List,Flat) 
</span>
</span> that holds when the first argument 
<span class="verb">
<span class="cmtt-10"> List 
</span>
</span> flattens to the second argument 
<span class="verb">
<span class="cmtt-10"> Flat 
</span>
</span> . This should be done without making use of 
<span class="verb">
<span class="cmtt-10"> append/3 
</span>
</span> . 
</p>
</li>
</ol>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Ok, we’re now halfway through the book. And flattening a list is the Pons Asinorum of Prolog programming. Did you cross it ok? If so, great. Time to move on. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse26"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse26"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse27"> front 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch6"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent">
<a id="taillpn-htmlse27">
</a>
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse29"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=#taillpn-htmlse28"> tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch7"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<h3 class="sectionHead">
<span class="titlemark"> 7.1 
</span>
<a id="x45-620007.1">
</a> Context Free Grammars 
</h3>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Prolog has been used for many purposes, but its inventor, Alain Colmerauer, was interested in computational linguistics, and this remains a classic application for the language. Moreover, Prolog offers a number of tools which make life easier for computational linguists, and we are now going to start learning about one of the most useful of these: definite clause grammars, or DCGs as they are usually called. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> DCGs are a special notation for defining grammars. So, before we go any further, we’d better learn what a grammar is. We shall do so by discussing context free grammars (or CFGs). The basic idea of context free grammars is simple to understand, but don’t be fooled into thinking that CFGs are toys. They’re not. While CFGs aren’t powerful enough to cope with the syntactic structure of all natural languages (that is, the kind of languages that human beings use), they can certainly handle most aspects of the syntax of many natural languages (for example, English and French) in a reasonably natural way. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> So what is a context free grammar? In essence, a finite collection of rules which tell us that certain sentences are grammatical (that is, syntactically correct) and what their grammatical structure actually is. Here’s a simple context free grammar for a small fragment of English: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="center">
<!--l. 51-->
<p class="noindent">
</p>
<div class="tabular">
<table cellpadding="0" cellspacing="0" class="tabular" id="TBL-3">
<colgroup id="TBL-3-1g">
<col id="TBL-3-1"/>
</colgroup>
<tr id="TBL-3-1-" style="vertical-align:baseline;">
<td class="td11" id="TBL-3-1-1" style="white-space:nowrap; text-align:left;">
<span class="verb">
<span class="cmtt-10"> s 
</span>
<span class="cmtt-10">  -&gt; 
</span>
<span class="cmtt-10">  np 
</span>
<span class="cmtt-10">  vp 
</span>
</span>
</td>
</tr>
<tr id="TBL-3-2-" style="vertical-align:baseline;">
<td class="td11" id="TBL-3-2-1" style="white-space:nowrap; text-align:left;">
<span class="verb">
<span class="cmtt-10"> np 
</span>
<span class="cmtt-10">  -&gt; 
</span>
<span class="cmtt-10">  det 
</span>
<span class="cmtt-10">  n 
</span>
</span>
</td>
</tr>
<tr id="TBL-3-3-" style="vertical-align:baseline;">
<td class="td11" id="TBL-3-3-1" style="white-space:nowrap; text-align:left;">
<span class="verb">
<span class="cmtt-10"> vp 
</span>
<span class="cmtt-10">  -&gt; 
</span>
<span class="cmtt-10">  v 
</span>
<span class="cmtt-10">  np 
</span>
</span>
</td>
</tr>
<tr id="TBL-3-4-" style="vertical-align:baseline;">
<td class="td11" id="TBL-3-4-1" style="white-space:nowrap; text-align:left;">
<span class="verb">
<span class="cmtt-10"> vp 
</span>
<span class="cmtt-10">  -&gt; 
</span>
<span class="cmtt-10">  v 
</span>
</span>
</td>
</tr>
<tr id="TBL-3-5-" style="vertical-align:baseline;">
<td class="td11" id="TBL-3-5-1" style="white-space:nowrap; text-align:left;">
<span class="verb">
<span class="cmtt-10"> det 
</span>
<span class="cmtt-10">  -&gt; 
</span>
</span>
<span class="cmti-10"> a 
</span>
</td>
</tr>
<tr id="TBL-3-6-" style="vertical-align:baseline;">
<td class="td11" id="TBL-3-6-1" style="white-space:nowrap; text-align:left;">
<span class="verb">
<span class="cmtt-10"> det 
</span>
<span class="cmtt-10">  -&gt; 
</span>
</span>
<span class="cmti-10"> the 
</span>
</td>
</tr>
<tr id="TBL-3-7-" style="vertical-align:baseline;">
<td class="td11" id="TBL-3-7-1" style="white-space:nowrap; text-align:left;">
<span class="verb">
<span class="cmtt-10"> n 
</span>
<span class="cmtt-10">  -&gt; 
</span>
</span>
<span class="cmti-10"> woman 
</span>
</td>
</tr>
<tr id="TBL-3-8-" style="vertical-align:baseline;">
<td class="td11" id="TBL-3-8-1" style="white-space:nowrap; text-align:left;">
<span class="verb">
<span class="cmtt-10"> n 
</span>
<span class="cmtt-10">  -&gt; 
</span>
</span>
<span class="cmti-10"> man 
</span>
</td>
</tr>
<tr id="TBL-3-9-" style="vertical-align:baseline;">
<td class="td11" id="TBL-3-9-1" style="white-space:nowrap; text-align:left;">
<span class="verb">
<span class="cmtt-10"> v 
</span>
<span class="cmtt-10">  -&gt; 
</span>
</span>
<span class="cmti-10"> shoots 
</span>
</td>
</tr>
</table>
</div>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> What are the ingredients of this little grammar? Well, first note that it contains three types of symbol. There’s 
<span class="verb">
<span class="cmtt-10"> -&gt; 
</span>
</span> , which is used to define the rules. Then there are the symbols written like this: 
<span class="verb">
<span class="cmtt-10"> s 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> np 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> vp 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> det 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> n 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> v 
</span>
</span> . These symbols are called non-terminal symbols; we’ll soon learn why. Each of these symbols has a traditional meaning in linguistics: 
<span class="verb">
<span class="cmtt-10"> s 
</span>
</span> is short for sentence, 
<span class="verb">
<span class="cmtt-10"> np 
</span>
</span> is short for noun phrase, 
<span class="verb">
<span class="cmtt-10"> vp 
</span>
</span> is short for verb phrase, and 
<span class="verb">
<span class="cmtt-10"> det 
</span>
</span> is short for determiner. That is, each of these symbols is shorthand for a grammatical category. Finally there are the symbols in italics: 
<span class="cmti-10"> a, the, woman, man 
</span> , and 
<span class="cmti-10"> shoots 
</span> . These are terminal symbols, though a computer scientist might call them the alphabet, and linguists might call them lexical items. We’ll usually just call them words. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> This grammar contains nine context free rules. A context free rule consists of a single non-terminal symbol, followed by 
<span class="verb">
<span class="cmtt-10"> -&gt; 
</span>
</span> , followed by a finite sequence made up of terminal and/or non-terminal symbols. All nine items listed above have this form, so they are all legitimate context free rules. What do these rules mean? They tell us how different grammatical categories can be built up. Read 
<span class="verb">
<span class="cmtt-10"> -&gt; 
</span>
</span> as 
<span class="cmti-10"> can consist of 
</span> , or 
<span class="cmti-10"> can be built out of 
</span> . For example, the first rule tells us that a sentence can consist of a noun phrase followed by a verb phrase. The third rule tells us that a verb phrase can consist of a verb followed by a noun phrase, while the fourth rule tells us that there is another way to build a verb phrase: simply use a verb. The last five rules tell us that 
<span class="cmti-10"> a 
</span> and 
<span class="cmti-10"> the 
</span> are determiners, that 
<span class="cmti-10"> man 
</span> and 
<span class="cmti-10"> woman 
</span> are nouns, and that 
<span class="cmti-10"> shoots 
</span> is a verb. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Now consider the string of words 
<span class="cmti-10"> a woman shoots a man 
</span> . Is this grammatical according to our little grammar? And if it is, what structure does it have? The following tree answers both questions: 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="quote">
<!--l. 110-->
<p class="noindent">
<span class="cmtt-10"> s 
</span>
<span class="cmtt-10"> np 
</span>
<span class="cmtt-10"> det 
</span>
<span class="cmtt-10"> a 
</span>
<span class="cmtt-10"> n 
</span>
<span class="cmtt-10"> woman 
</span>
<span class="cmtt-10"> vp 
</span>
<span class="cmtt-10"> v 
</span>
<span class="cmtt-10"> shoots 
</span>
<span class="cmtt-10"> np 
</span>
<span class="cmtt-10"> det 
</span>
<span class="cmtt-10"> a 
</span>
<span class="cmtt-10"> n 
</span>
<span class="cmtt-10"> man 
</span>
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Right at the top we have a node marked 
<span class="verb">
<span class="cmtt-10"> s 
</span>
</span> . This node has two daughters, one marked 
<span class="verb">
<span class="cmtt-10"> np 
</span>
</span> , and one marked 
<span class="verb">
<span class="cmtt-10"> vp 
</span>
</span> . Note that this part of the diagram agrees with the first rule of the grammar, which says that an 
<span class="verb">
<span class="cmtt-10"> s 
</span>
</span> can be built out of an 
<span class="verb">
<span class="cmtt-10"> np 
</span>
</span> and a 
<span class="verb">
<span class="cmtt-10"> vp 
</span>
</span> . (A linguist would say that this part of the tree is licensed by the first rule.) In fact, as you can see, 
<span class="cmti-10"> every 
</span> part of the tree is licensed by one of our rules. For example, the two nodes marked 
<span class="verb">
<span class="cmtt-10"> np 
</span>
</span> are licensed by the rule that says that an 
<span class="verb">
<span class="cmtt-10"> np 
</span>
</span> can consist of a 
<span class="verb">
<span class="cmtt-10"> det 
</span>
</span> followed by an 
<span class="verb">
<span class="cmtt-10"> n 
</span>
</span> . And, right at the bottom of the diagram, all the words in 
<span class="cmti-10"> a woman shoots a man 
</span> are licensed by a rule. Incidentally, note that the terminal symbols only decorate the nodes right at the bottom of the tree (the terminal nodes) while non-terminal symbols only decorate nodes that are higher up in the tree (the non-terminal nodes). 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Such a tree is called a parse tree. Parse trees are important because they give us two kinds of information. Firstly, they give us information about strings. Secondly, they give us information about structure. This is an important distinction to grasp, so let’s have a closer look, and learn some important terminology while we are doing so. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> First, if we are given a string of words, and a grammar, and it turns out that we 
<span class="cmti-10"> can 
</span> build a parse tree like the one above (that is, a tree that has 
<span class="verb">
<span class="cmtt-10"> s 
</span>
</span> at the top node, and every node in the tree is licensed by the grammar, and the string of words we were given is listed in the correct order along the terminal nodes) then we say that the string is grammatical (according to the given grammar). For example, the string 
<span class="cmti-10"> a woman shoots a man 
</span> is grammatical according to our little grammar (and indeed, any reasonable grammar of English would classify it as grammatical). On the other hand, if there isn’t any such tree, the string is ungrammatical (according to the given grammar). For example, the string 
<span class="cmti-10"> woman a woman man a shoots 
</span> is ungrammatical according to our little grammar (and any reasonable grammar of English would classify it as ungrammatical). The language generated by a grammar consists of all the strings that the grammar classifies as grammatical. For example, 
<span class="cmti-10"> a woman shoots a 
</span>
<span class="cmti-10"> man 
</span> also belongs to the language generated by our little grammar, and so does 
<span class="cmti-10"> a man shoots the woman 
</span> . A context free recogniser is a program which correctly tells us whether or not a string belongs to the language generated by a context free grammar. To put it another way, a recogniser is a program that correctly classifies strings as grammatical or ungrammatical (relative to some grammar). 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> But often, in both linguistics and computer science, we are not merely interested in whether a string is grammatical or not, we also want to know 
<span class="cmti-10"> why 
</span> it is grammatical. More precisely, we often want to know what its structure is, and this is exactly the information a parse tree gives us. For example, the above parse tree shows us how the words in 
<span class="cmti-10"> a woman shoots a man 
</span> fit together, piece by piece, to form the sentence. This kind of information would be important if we were using this sentence in some application and needed to say what it actually meant (that is, if we wanted to do semantics). A context free parser is a program which correctly decides whether a string belongs to the language generated by a context free grammar 
<span class="cmti-10"> and also tells us what its structure is 
</span> . That is, whereas a recogniser merely says “Yes, grammatical” or “No, ungrammatical” to each string, a parser actually builds the associated parse tree and gives it to us. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> It remains to explain one final concept, namely what a context free language is. (Don’t get confused: we’ve told you what a context free 
<span class="cmti-10"> grammar 
</span> is, but not what a context free 
<span class="cmti-10"> language 
</span> is.) Quite simply, a context free language is a language that can be generated by a context free grammar. Some languages are context free, and some are not. For example, it seems plausible that English is a context free language. That is, it is probably possible to write a context free grammar that generates all (and only) the sentences that native speakers find acceptable. On the other hand, some dialects of Swiss-German are 
<span class="cmti-10"> not 
</span> context free. It can be proved mathematically that no context free grammar can generate all (and only) the sentences that native speakers of Swiss-German find acceptable. 
<span class="footnote-mark">
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-html46">
<sup class="textsuperscript"> 1 
</sup>
</a>
</span>
<a id="x45-62001f1">
</a> So if you wanted to write a grammar for such dialects, you would have to employ additional grammatical mechanisms, not merely context free rules. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<h4 class="likesubsectionHead">
<a id="x45-630007.1">
</a> CFG recognition using append 
</h4>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> That’s the theory, but how do we work with context free grammars in Prolog? To make things concrete: suppose we are given a context free grammar. How can we write a recogniser for it? And how can we write a parser for it? In this chapter we’ll look at the first question in detail. We’ll first show how (rather naive) recognisers can be written in Prolog, and then show how more sophisticated recognisers can be written with the help of difference lists. This discussion will lead us to definite clause grammars, Prolog’s built-in grammar tool. In the following chapter we’ll look at definite clause grammars in more detail, and learn (among other things) how to use them to define parsers. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> So: given a context free grammar, how do we define a recogniser in Prolog? In fact, Prolog offers a very direct answer to this question: we can simply write down Prolog clauses that correspond, in an obvious way, to the grammar rules. That is, we can simply turn the grammar into Prolog. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Here’s a simple (though as we shall learn, inefficient) way of doing this. We shall use lists to represent strings. For example, we shall use the list 
<span class="verb">
<span class="cmtt-10"> [a,woman,shoots,a,man] 
</span>
</span> to represent the string 
<span class="cmti-10"> a woman shoots a man 
</span> . Now, we have already said that the 
<span class="verb">
<span class="cmtt-10"> -&gt; 
</span>
</span> symbol used in context free grammars means 
<span class="cmti-10"> can 
</span>
<span class="cmti-10"> consist of 
</span> , or 
<span class="cmti-10"> can be built out of 
</span> , and this idea is easily modelled using lists. For example, the rule 
<span class="verb">
<span class="cmtt-10"> s 
</span>
<span class="cmtt-10">  -&gt; 
</span>
<span class="cmtt-10">  np 
</span>
<span class="cmtt-10">  vp 
</span>
</span> can be thought of as saying: a list of words is an 
<span class="verb">
<span class="cmtt-10"> s 
</span>
</span> list if it is the result of concatenating an 
<span class="verb">
<span class="cmtt-10"> np 
</span>
</span> list with a 
<span class="verb">
<span class="cmtt-10"> vp 
</span>
</span> list. As we know how to concatenate lists in Prolog (we can use 
<span class="verb">
<span class="cmtt-10"> append/3 
</span>
</span> ), it should be easy to turn these kinds of rules into Prolog. And what about the rules that tell us about individual words? Even easier: we can simply view 
<span class="verb">
<span class="cmtt-10"> n 
</span>
<span class="cmtt-10">  -&gt; 
</span>
</span>
<span class="cmti-10"> woman 
</span> as saying that the list 
<span class="verb">
<span class="cmtt-10"> [woman] 
</span>
</span> is an 
<span class="verb">
<span class="cmtt-10"> n 
</span>
</span> list. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> If we turn these ideas into Prolog, this is what we get: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb306">
<a id="x45-63002r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  s(Z):- 
</span>
<span class="cmtt-10">  np(X), 
</span>
<span class="cmtt-10">  vp(Y), 
</span>
<span class="cmtt-10">  append(X,Y,Z). 
</span>
<br class="fancyvrb"/>
<a id="x45-63004r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x45-63006r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  np(Z):- 
</span>
<span class="cmtt-10">  det(X), 
</span>
<span class="cmtt-10">  n(Y), 
</span>
<span class="cmtt-10">  append(X,Y,Z). 
</span>
<br class="fancyvrb"/>
<a id="x45-63008r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x45-63010r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  vp(Z):- 
</span>
<span class="cmtt-10">  v(X), 
</span>
<span class="cmtt-10">  np(Y), 
</span>
<span class="cmtt-10">  append(X,Y,Z). 
</span>
<br class="fancyvrb"/>
<a id="x45-63012r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x45-63014r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  vp(Z):- 
</span>
<span class="cmtt-10">  v(Z). 
</span>
<br class="fancyvrb"/>
<a id="x45-63016r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x45-63018r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  det([the]). 
</span>
<br class="fancyvrb"/>
<a id="x45-63020r10">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  det([a]). 
</span>
<br class="fancyvrb"/>
<a id="x45-63022r11">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x45-63024r12">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  n([woman]). 
</span>
<br class="fancyvrb"/>
<a id="x45-63026r13">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  n([man]). 
</span>
<br class="fancyvrb"/>
<a id="x45-63028r14">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x45-63030r15">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  v([shoots]). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> The correspondence between the CFG rules and the Prolog code should be clear. And to use this program as a recogniser, we simply pose the obvious queries. For example: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb307">
<a id="x45-63032r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  s([a,woman,shoots,a,man]). 
</span>
<br class="fancyvrb"/>
<a id="x45-63034r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> In fact, because this is a simple declarative Prolog program, we can do more than this: we can also generate all the sentences this grammar produces. Our little grammar generates 20 sentences. Here are the first five: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb308">
<a id="x45-63036r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  s(X). 
</span>
<br class="fancyvrb"/>
<a id="x45-63038r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x45-63040r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [the,woman,shoots,the,woman] 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x45-63042r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x45-63044r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [the,woman,shoots,the,man] 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x45-63046r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x45-63048r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [the,woman,shoots,a,woman] 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x45-63050r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x45-63052r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [the,woman,shoots,a,man] 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x45-63054r10">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x45-63056r11">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [the,woman,shoots] 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Moreover, we’re not restricted to posing questions about sentences: we can ask about other grammatical categories. For example: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb309">
<a id="x45-63058r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  np([a,woman]). 
</span>
<br class="fancyvrb"/>
<a id="x45-63060r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> And we can generate noun phrases with the following query. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb310">
<a id="x45-63062r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  np(X). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Now this is rather nice. We have a simple, easy to understand program which corresponds with our CFG in an obvious way. Moreover, if we added more rules to our CFG, it would be easy to alter the program to cope with the new rules. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> But there is a problem: the program doesn’t use the input sentence to guide the search. Make a trace for the query 
<span class="verb">
<span class="cmtt-10"> s([a,man,shoots]) 
</span>
</span> and you will see that the program chooses noun phrases and verb phrases and only afterwards checks whether these can be combined to form the sentence 
<span class="verb">
<span class="cmtt-10"> [a,man,shoots] 
</span>
</span> . For example, Prolog will find that 
<span class="verb">
<span class="cmtt-10"> [the,woman] 
</span>
</span> is a noun phrase and 
<span class="verb">
<span class="cmtt-10"> [shoots,the,woman] 
</span>
</span> a verb phrase and only then will it check whether concatenating these lists happens to yield 
<span class="verb">
<span class="cmtt-10"> [a,man,shoots] 
</span>
</span> , which of course it won’t. So, Prolog starts to backtrack, and the next thing it will try is whether concatenating the noun phrase 
<span class="verb">
<span class="cmtt-10"> [the,woman] 
</span>
</span> and the verb phrase 
<span class="verb">
<span class="cmtt-10"> [shoots,the,man] 
</span>
</span> happens to yield 
<span class="verb">
<span class="cmtt-10"> [a,man,shoots] 
</span>
</span> , another non-starter. It will go on like this until it (finally) produces the noun phrase 
<span class="verb">
<span class="cmtt-10"> [a,man] 
</span>
</span> and the verb phrase 
<span class="verb">
<span class="cmtt-10"> [shoots] 
</span>
</span> . The problem is that the goals 
<span class="verb">
<span class="cmtt-10"> np(X) 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> vp(Y) 
</span>
</span> are called with uninstantiated variables as arguments. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> So, how about changing the rules in such a way that 
<span class="verb">
<span class="cmtt-10"> append 
</span>
</span> becomes the first goal: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb311">
<a id="x45-63064r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  s(Z):- 
</span>
<span class="cmtt-10">  append(X,Y,Z), 
</span>
<span class="cmtt-10">  np(X), 
</span>
<span class="cmtt-10">  vp(Y). 
</span>
<br class="fancyvrb"/>
<a id="x45-63066r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x45-63068r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  np(Z):- 
</span>
<span class="cmtt-10">  append(X,Y,Z), 
</span>
<span class="cmtt-10">  det(X), 
</span>
<span class="cmtt-10">  n(Y). 
</span>
<br class="fancyvrb"/>
<a id="x45-63070r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x45-63072r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  vp(Z):- 
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  append(X,Y,Z), 
</span>
<span class="cmtt-10">  v(X), 
</span>
<span class="cmtt-10">  np(Y). 
</span>
<br class="fancyvrb"/>
<a id="x45-63074r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x45-63076r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  vp(Z):- 
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  v(Z). 
</span>
<br class="fancyvrb"/>
<a id="x45-63078r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x45-63080r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  det([the]). 
</span>
<br class="fancyvrb"/>
<a id="x45-63082r10">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  det([a]). 
</span>
<br class="fancyvrb"/>
<a id="x45-63084r11">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x45-63086r12">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  n([woman]). 
</span>
<br class="fancyvrb"/>
<a id="x45-63088r13">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  n([man]). 
</span>
<br class="fancyvrb"/>
<a id="x45-63090r14">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x45-63092r15">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  v([shoots]). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Here we first use 
<span class="verb">
<span class="cmtt-10"> append/3 
</span>
</span> to split up the input list. This instantiates the variables 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> Y 
</span>
</span> , so that the other goals are all called with instantiated arguments. However, this program is still not very appealing: it uses 
<span class="verb">
<span class="cmtt-10"> append/3 
</span>
</span> a lot and, even worse, it uses 
<span class="verb">
<span class="cmtt-10"> append/3 
</span>
</span> with uninstantiated variables in the first two arguments. We saw in the previous chapter that this is a source of inefficiency. And indeed, the performance of this recogniser is very bad. It is revealing to trace through what actually happens when this program analyses a sentence such as 
<span class="cmti-10"> a woman shoots a 
</span>
<span class="cmti-10"> man 
</span> . As you will see, relatively few of the steps are devoted to the real task of recognising the sentences: most are devoted to using 
<span class="verb">
<span class="cmtt-10"> append/3 
</span>
</span> to decompose lists. This isn’t much of a problem for our little grammar, but it certainly would be if we were working with a more realistic grammar capable of generating a large number of sentences. We need to do something about this. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent">
</p>
</div>
<div class="nb-cell html" name="htm1">
<h4 class="likesubsectionHead">
<a id="x45-640007.1">
</a> CFG recognition using difference lists 
</h4>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> A more efficient implementation can be obtained by making use of 
<span class="cmti-10"> difference lists 
</span> . This is a sophisticated (and, once you’ve grasped it, beautiful) Prolog technique that can be used for a variety of purposes. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> The key idea underlying difference lists is to represent the information about grammatical categories not as a single list, but as the difference between two lists. For example, instead of representing 
<span class="cmti-10"> a woman shoots a man 
</span> as 
<span class="verb">
<span class="cmtt-10"> [a,woman,shoots,a,man] 
</span>
</span> we can represent it as the pair of lists 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb312">
<a id="x45-64002r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  [a,woman,shoots,a,man] 
</span>
<span class="cmtt-10">  []. 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Think of the first list as 
<span class="cmti-10"> what needs to be consumed 
</span> (or if you prefer: the 
<span class="cmti-10"> input list 
</span> ), and the second list as 
<span class="cmti-10"> what we should leave behind 
</span> (or: the 
<span class="cmti-10"> output list 
</span> ). Viewed from this (rather procedural) perspective the difference list 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb313">
<a id="x45-64004r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  [a,woman,shoots,a,man] 
</span>
<span class="cmtt-10">  []. 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> represents the sentence 
<span class="cmti-10"> a woman shoots a man 
</span> because it says: 
<span class="cmti-10"> If I consume all the 
</span>
<span class="cmti-10"> symbols on the left, and leave behind the symbols on the right, then I have the 
</span>
<span class="cmti-10"> sentence I am interested in. 
</span> That is, the sentence we are interested in is the difference between the contents of these two lists. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> That’s all we need to know about difference lists to rewrite our recogniser. If we simply bear in mind the idea of consuming something, and leaving something behind in mind, we obtain the following recogniser: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb314">
<a id="x45-64006r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  s(X,Z):- 
</span>
<span class="cmtt-10">  np(X,Y), 
</span>
<span class="cmtt-10">  vp(Y,Z). 
</span>
<br class="fancyvrb"/>
<a id="x45-64008r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x45-64010r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  np(X,Z):- 
</span>
<span class="cmtt-10">  det(X,Y), 
</span>
<span class="cmtt-10">  n(Y,Z). 
</span>
<br class="fancyvrb"/>
<a id="x45-64012r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x45-64014r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  vp(X,Z):- 
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  v(X,Y), 
</span>
<span class="cmtt-10">  np(Y,Z). 
</span>
<br class="fancyvrb"/>
<a id="x45-64016r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x45-64018r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  vp(X,Z):- 
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  v(X,Z). 
</span>
<br class="fancyvrb"/>
<a id="x45-64020r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x45-64022r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  det([the|W],W). 
</span>
<br class="fancyvrb"/>
<a id="x45-64024r10">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  det([a|W],W). 
</span>
<br class="fancyvrb"/>
<a id="x45-64026r11">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x45-64028r12">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  n([woman|W],W). 
</span>
<br class="fancyvrb"/>
<a id="x45-64030r13">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  n([man|W],W). 
</span>
<br class="fancyvrb"/>
<a id="x45-64032r14">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x45-64034r15">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  v([shoots|W],W). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Consider these rules carefully. For example, the 
<span class="verb">
<span class="cmtt-10"> s 
</span>
</span> rule says: 
<span class="cmti-10"> I know that the pair of 
</span>
<span class="cmti-10"> lists 
</span>
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span>
<span class="cmti-10"> and 
</span>
<span class="verb">
<span class="cmtt-10"> Z 
</span>
</span>
<span class="cmti-10"> represents a sentence if (1) I can consume 
</span>
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span>
<span class="cmti-10"> and leave behind a 
</span>
<span class="verb">
<span class="cmtt-10"> Y 
</span>
</span> , 
<span class="cmti-10"> and 
</span>
<span class="cmti-10"> the pair 
</span>
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span>
<span class="cmti-10"> and 
</span>
<span class="verb">
<span class="cmtt-10"> Y 
</span>
</span>
<span class="cmti-10"> represents a noun phrase, and (2) I can then go on to consume 
</span>
<span class="verb">
<span class="cmtt-10"> Y 
</span>
</span>
<span class="cmti-10"> leaving Z behind 
</span> , 
<span class="cmti-10"> and the pair 
</span>
<span class="verb">
<span class="cmtt-10"> Y 
</span>
</span>
<span class="verb">
<span class="cmtt-10"> Z 
</span>
</span>
<span class="cmti-10"> represents a verb phrase 
</span> . The 
<span class="verb">
<span class="cmtt-10"> np 
</span>
</span> rule and the second of the 
<span class="verb">
<span class="cmtt-10"> vp 
</span>
</span> rules work similarly. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Moreover, the same idea underlies the way this grammar handles the words. For example 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb315">
<a id="x45-64036r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  n([man|W],W). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> means we are handling 
<span class="cmti-10"> man 
</span> as the difference between 
<span class="verb">
<span class="cmtt-10"> [man|W] 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> W 
</span>
</span> . After all, the difference between what is consumed and what is left behind is precisely the word 
<span class="verb">
<span class="cmtt-10"> man 
</span>
</span> . 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Now, at first this code may be harder to grasp than our previous recogniser. But note that we have gained something important: 
<span class="cmti-10"> we haven’t used 
</span>
<span class="verb">
<span class="cmtt-10"> append/3 
</span>
</span> . In the difference list based recogniser, it simply isn’t needed, and this makes a big difference. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> How do we use this recogniser? Well, here’s how to recognise sentences: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb316">
<a id="x45-64038r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  s([a,woman,shoots,a,man],[]). 
</span>
<br class="fancyvrb"/>
<a id="x45-64040r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> This asks whether we can get an 
<span class="verb">
<span class="cmtt-10"> s 
</span>
</span> by consuming the symbols in 
<span class="verb">
<span class="cmtt-10"> [a,woman,shoots,a,man] 
</span>
</span> , leaving nothing behind. Similarly, to generate all the sentences in the grammar, we ask 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb317">
<a id="x45-64042r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  s(X,[]). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> This asks: what values can you give to 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> , such that we get an 
<span class="verb">
<span class="cmtt-10"> s 
</span>
</span> by consuming the symbols in 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> , leaving nothing behind? 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> The queries for other grammatical categories also work the same way. For example, to find out if 
<span class="cmti-10"> a woman 
</span> is a noun phrase we ask: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb318">
<a id="x45-64044r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  np([a,woman],[]). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> And we generate all the noun phrases in the grammar as follows: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb319">
<a id="x45-64046r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  np(X,[]). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> You should trace what happens when this program analyses a sentence such as 
<span class="cmti-10"> a 
</span>
<span class="cmti-10"> woman shoots a man 
</span> . As you will see, it is a lot more efficient than our 
<span class="verb">
<span class="cmtt-10"> append/3 
</span>
</span> based program. Moreover, as no use is made of 
<span class="verb">
<span class="cmtt-10"> append/3 
</span>
</span> , the trace is a lot easier to grasp. So we have taken a big step forward. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> On the other hand, it has to be admitted that the second recogniser is not as easy to understand, at least at first, and it’s a pain having to keep track of all those difference list variables. If only it were possible to have a recogniser as simple as the first and as efficient as the second. And in fact, it 
<span class="cmti-10"> is 
</span> possible: this is where DCGs come in. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse29"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse28"> front 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch7"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent">
<a id="taillpn-htmlse28">
</a>
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse30"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse28"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse28"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=#taillpn-htmlse29"> tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch7"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<h3 class="sectionHead">
<span class="titlemark"> 7.2 
</span>
<a id="x47-650007.2">
</a> Definite Clause Grammars 
</h3>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> So, what are DCGs? Quite simply, a nice notation for writing grammars that hides the underlying difference list variables. Let’s look at three examples. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent">
</p>
</div>
<div class="nb-cell html" name="htm1">
<h4 class="likesubsectionHead">
<a id="x47-660007.2">
</a> A first example 
</h4>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> As our first example, here’s our little grammar written as a DCG: 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb320">
<a id="x47-66002r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  s 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  np,vp. 
</span>
<br class="fancyvrb"/>
<a id="x47-66004r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x47-66006r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  np 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  det,n. 
</span>
<br class="fancyvrb"/>
<a id="x47-66008r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x47-66010r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  vp 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  v,np. 
</span>
<br class="fancyvrb"/>
<a id="x47-66012r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  vp 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  v. 
</span>
<br class="fancyvrb"/>
<a id="x47-66014r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x47-66016r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  det 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [the]. 
</span>
<br class="fancyvrb"/>
<a id="x47-66018r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  det 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [a]. 
</span>
<br class="fancyvrb"/>
<a id="x47-66020r10">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x47-66022r11">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  n 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [woman]. 
</span>
<br class="fancyvrb"/>
<a id="x47-66024r12">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  n 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [man]. 
</span>
<br class="fancyvrb"/>
<a id="x47-66026r13">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x47-66028r14">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  v 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [shoots]. 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> The link with the original context free grammar should be transparent: this is definitely the most user-friendly notation we have used yet. But how do we use this DCG? In fact, we use it in 
<span class="cmti-10"> exactly 
</span> the same way as we used our difference list recogniser. For example, to find out whether 
<span class="cmti-10"> a woman shoots a man 
</span> is a sentence, we pose the query: 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb321">
<a id="x47-66030r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  s([a,woman,shoots,a,man],[]). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> That is, just as in the difference list recogniser, we ask whether we can get an 
<span class="verb">
<span class="cmtt-10"> s 
</span>
</span> by consuming the symbols in 
<span class="verb">
<span class="cmtt-10"> [a,woman,shoots,a,man] 
</span>
</span> , leaving nothing behind. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Similarly, to generate all the sentences in the grammar, we pose the query: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb322">
<a id="x47-66032r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  s(X,[]). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> This asks what values we can give to 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> , such that we get an 
<span class="verb">
<span class="cmtt-10"> s 
</span>
</span> by consuming the symbols in 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> , leaving nothing behind. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Moreover, the queries for other grammatical categories also work the same way. For example, to find out if 
<span class="cmti-10"> a woman 
</span> is a noun phrase we pose the query: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb323">
<a id="x47-66034r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  np([a,woman],[]). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> And we generate all the noun phrases in the grammar as follows: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb324">
<a id="x47-66036r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  np(X,[]). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> What’s going on? Quite simply, this DCG 
<span class="cmti-10"> is 
</span> our difference list recogniser! To put it another way, DCG notation is essentially syntactic sugar, user-friendly notation that lets us write grammars in a natural way. But Prolog translates this notation into the kinds of difference lists discussed before. So we have the best of both worlds: a nice simple notation for working with, and the efficiency of difference lists. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> There is an easy way to see what Prolog translates DCG rules into. Suppose you are working with the DCG just given (that is, suppose that Prolog has already consulted the rules). Then if you pose the query: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb325">
<a id="x47-66038r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  listing(s). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> you will get the response 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb326">
<a id="x47-66040r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  s(A,B) 
</span>
<span class="cmtt-10">  :- 
</span>
<br class="fancyvrb"/>
<a id="x47-66042r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  np(A,C), 
</span>
<br class="fancyvrb"/>
<a id="x47-66044r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  vp(C,B). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> This is what Prolog has translated 
<span class="verb">
<span class="cmtt-10"> s 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  np,vp 
</span>
</span> into. Note that (apart from the choice of variables) this is exactly the difference list rule we used in our second recogniser. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Similarly, if you pose the query 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb327">
<a id="x47-66046r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  listing(np). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> you will get 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb328">
<a id="x47-66048r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  np(A,B) 
</span>
<span class="cmtt-10">  :- 
</span>
<br class="fancyvrb"/>
<a id="x47-66050r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  det(A,C), 
</span>
<br class="fancyvrb"/>
<a id="x47-66052r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  n(C,B). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> This is what Prolog has translated 
<span class="verb">
<span class="cmtt-10"> np 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  det,n 
</span>
</span> into. Again (apart from the choice of variables) this is the difference list rule we used in our second recogniser. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> To get a complete listing of the translations of all the rules, simply type 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb329">
<a id="x47-66054r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  listing. 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> There is one thing you may observe. Some Prolog implementations translate rules such as 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb330">
<a id="x47-66056r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  det 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [the]. 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> not into 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb331">
<a id="x47-66058r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  det([the|W],W). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> which was the form we used in our difference list recogniser, but into 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb332">
<a id="x47-66060r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  det(A,B) 
</span>
<span class="cmtt-10">  :- 
</span>
<br class="fancyvrb"/>
<a id="x47-66062r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ’C’(A,the,B). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> But although the notation is different, the idea is the same. This says you can get a list 
<span class="verb">
<span class="cmtt-10"> B 
</span>
</span> from a list 
<span class="verb">
<span class="cmtt-10"> A 
</span>
</span> by consuming a 
<span class="verb">
<span class="cmtt-10"> the 
</span>
</span> . That is, once again this is a difference list representation. Note that 
<span class="verb">
<span class="cmtt-10"> ’C’ 
</span>
</span> is an atom. 
<a id="dx47-66063">
</a>
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent">
</p>
</div>
<div class="nb-cell html" name="htm1">
<h4 class="likesubsectionHead">
<a id="x47-670007.2">
</a> Adding recursive rules 
</h4>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Our original context free grammar generated only 20 sentences. However it is easy to write context free grammars that generate infinitely many sentences: simply use recursive rules. Here’s an example. Let’s add the following rules to our little grammar: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="center">
<!--l. 616-->
<p class="noindent">
</p>
<div class="tabular">
<table cellpadding="0" cellspacing="0" class="tabular" id="TBL-4">
<colgroup id="TBL-4-1g">
<col id="TBL-4-1"/>
</colgroup>
<tr id="TBL-4-1-" style="vertical-align:baseline;">
<td class="td11" id="TBL-4-1-1" style="white-space:nowrap; text-align:left;">
<span class="verb">
<span class="cmtt-10"> s 
</span>
<span class="cmtt-10">  -&gt; 
</span>
<span class="cmtt-10">  s 
</span>
<span class="cmtt-10">  conj 
</span>
<span class="cmtt-10">  s 
</span>
</span>
</td>
</tr>
<tr id="TBL-4-2-" style="vertical-align:baseline;">
<td class="td11" id="TBL-4-2-1" style="white-space:nowrap; text-align:left;">
<span class="verb">
<span class="cmtt-10"> conj 
</span>
<span class="cmtt-10">  -&gt; 
</span>
</span>
<span class="cmti-10"> and 
</span>
</td>
</tr>
<tr id="TBL-4-3-" style="vertical-align:baseline;">
<td class="td11" id="TBL-4-3-1" style="white-space:nowrap; text-align:left;">
<span class="verb">
<span class="cmtt-10"> conj 
</span>
<span class="cmtt-10">  -&gt; 
</span>
</span>
<span class="cmti-10"> or 
</span>
</td>
</tr>
<tr id="TBL-4-4-" style="vertical-align:baseline;">
<td class="td11" id="TBL-4-4-1" style="white-space:nowrap; text-align:left;">
<span class="verb">
<span class="cmtt-10"> conj 
</span>
<span class="cmtt-10">  -&gt; 
</span>
</span>
<span class="cmti-10"> but 
</span>
</td>
</tr>
</table>
</div>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> This rule allows us to join as many sentences together as we like using the words 
<span class="cmti-10"> and 
</span> , 
<span class="cmti-10"> but 
</span> , and 
<span class="cmti-10"> or 
</span> . So this grammar classifies sentences such as 
<span class="cmti-10"> The woman shoots the man 
</span>
<span class="cmti-10"> or the man shoots the woman 
</span> as grammatical. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Now, in principle it is easy to turn this grammar into a DCG. We need merely add the rules 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb333">
<a id="x47-67002r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  s 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  s,conj,s. 
</span>
<br class="fancyvrb"/>
<a id="x47-67004r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x47-67006r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  conj 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [and]. 
</span>
<br class="fancyvrb"/>
<a id="x47-67008r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  conj 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [or]. 
</span>
<br class="fancyvrb"/>
<a id="x47-67010r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  conj 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [but]. 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> But there is a problem lurking under the surface. What does Prolog actually 
<span class="cmti-10"> do 
</span> with this DCG? Let’s have a look. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> First, let’s add the new rules at the 
<span class="cmti-10"> beginning 
</span> of the knowledge base, before the rule 
<span class="verb">
<span class="cmtt-10"> s 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  np,vp 
</span>
</span> . What happens if we then pose the query 
<span class="verb">
<span class="cmtt-10"> s([a,woman,shoots],[]) 
</span>
</span> ? Prolog immediately goes into a loop. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Can you see why? The point is this. Prolog translates DCG rules into ordinary Prolog rules. If we place the recursive rule 
<span class="verb">
<span class="cmtt-10"> s 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  s,conj,s 
</span>
</span> in the knowledge base before the non-recursive rule 
<span class="verb">
<span class="cmtt-10"> s 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  np,vp 
</span>
</span> then the knowledge base will contain the following two Prolog rules, in this order: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb334">
<a id="x47-67012r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  s(A, 
</span>
<span class="cmtt-10">  B) 
</span>
<span class="cmtt-10">  :- 
</span>
<br class="fancyvrb"/>
<a id="x47-67014r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  s(A, 
</span>
<span class="cmtt-10">  C), 
</span>
<br class="fancyvrb"/>
<a id="x47-67016r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  conj(C, 
</span>
<span class="cmtt-10">  D), 
</span>
<br class="fancyvrb"/>
<a id="x47-67018r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  s(D, 
</span>
<span class="cmtt-10">  B). 
</span>
<br class="fancyvrb"/>
<a id="x47-67020r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x47-67022r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  s(A, 
</span>
<span class="cmtt-10">  B) 
</span>
<span class="cmtt-10">  :- 
</span>
<br class="fancyvrb"/>
<a id="x47-67024r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  np(A, 
</span>
<span class="cmtt-10">  C), 
</span>
<br class="fancyvrb"/>
<a id="x47-67026r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  vp(C, 
</span>
<span class="cmtt-10">  B). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Now, from a declarative perspective this is fine, but from a procedural perspective this is fatal. When it tries to use the first rule, Prolog immediately encounters the goal 
<span class="verb">
<span class="cmtt-10"> s(A,C) 
</span>
</span> , which it then tries to satisfy using the first rule, whereupon it immediately encounters the goal 
<span class="verb">
<span class="cmtt-10"> s(A, 
</span>
<span class="cmtt-10">  C) 
</span>
</span> , which it then tries to satisfy using the first rule, whereupon it immediately encounters the goal 
<span class="verb">
<span class="cmtt-10"> s(A, 
</span>
<span class="cmtt-10">  C) 
</span>
</span> , and so on. In short, it goes into an infinite loop and does no useful work. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> So let’s add the recursive rule 
<span class="verb">
<span class="cmtt-10"> s 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  s,conj,s 
</span>
</span> at the end of the knowledge base, so that Prolog always encounters the translation of the non-recursive rule first. What happens now, when we pose the query 
<span class="verb">
<span class="cmtt-10"> s([a,woman,shoots],[]) 
</span>
</span> ? Well, now Prolog handles this and gives an answer. But what happens when we pose the query 
<span class="verb">
<span class="cmtt-10"> s([woman,shoot],[]) 
</span>
</span> ? Note that this is an ungrammatical sentence that is not accepted by our grammar. Once again, Prolog gets into an infinite loop. Since it is impossible to recognise 
<span class="verb">
<span class="cmtt-10"> [woman,shoot] 
</span>
</span> as a sentence consisting of a noun phrase and a verb phrase, Prolog tries to analyse it with the rule 
<span class="verb">
<span class="cmtt-10"> s 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  s,conj,s 
</span>
</span> , and ends up in the same unending loop as before. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> In short, we are having the same problems that we met when we discussed recursion, and rule and goal ordering, in Chapter  
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch3"> 3 
<!--tex4ht:ref: CHAPTER3 -->
</a> . In a nutshell, 
<span class="verb">
<span class="cmtt-10"> s 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  s,conj,s 
</span>
</span> translates into a left-recursive rule, and that’s bad news. Moreover, as we saw earlier, we 
<span class="cmti-10"> can’t 
</span> fix such problems simply by tinkering with the rule ordering: the way out of such difficulties is to change the goal order of the recursive rule so that the recursive goal is not the first one in the body of the rule. That is, ideally we should rewrite the rule so that it is no longer left-recursive. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Nice idea, but unfortunately, it is not an option here. Why not? Because the order of the goals determines the order of the words in the sentence! It makes an important difference, for example, whether our grammar accepts 
<span class="cmti-10"> the 
</span>
<span class="cmti-10"> woman shoots the man and the man shoots the woman 
</span> ( 
<span class="verb">
<span class="cmtt-10"> s 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  s,conj,s 
</span>
</span> ) or whether it accepts 
<span class="cmti-10"> and the woman shoots the man the man shoots the woman 
</span> ( 
<span class="verb">
<span class="cmtt-10"> s 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  conj,s,s 
</span>
</span> ). 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> But there is a way out. The standard solution is to introduce a new non-terminal symbol and rewrite the DCG. We could, for example, use the category 
<span class="verb">
<span class="cmtt-10"> simple_s 
</span>
</span> for sentences without embedded sentences. Our grammar would then look like this: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb335">
<a id="x47-67028r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  s 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  simple_s. 
</span>
<br class="fancyvrb"/>
<a id="x47-67030r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  s 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  simple_s,conj,s. 
</span>
<br class="fancyvrb"/>
<a id="x47-67032r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  simple_s 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  np,vp. 
</span>
<br class="fancyvrb"/>
<a id="x47-67034r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  np 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  det,n. 
</span>
<br class="fancyvrb"/>
<a id="x47-67036r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  vp 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  v,np. 
</span>
<br class="fancyvrb"/>
<a id="x47-67038r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  vp 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  v. 
</span>
<br class="fancyvrb"/>
<a id="x47-67040r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  det 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [the]. 
</span>
<br class="fancyvrb"/>
<a id="x47-67042r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  det 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [a]. 
</span>
<br class="fancyvrb"/>
<a id="x47-67044r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  n 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [woman]. 
</span>
<br class="fancyvrb"/>
<a id="x47-67046r10">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  n 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [man]. 
</span>
<br class="fancyvrb"/>
<a id="x47-67048r11">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  v 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [shoots]. 
</span>
<br class="fancyvrb"/>
<a id="x47-67050r12">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  conj 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [and]. 
</span>
<br class="fancyvrb"/>
<a id="x47-67052r13">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  conj 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [or]. 
</span>
<br class="fancyvrb"/>
<a id="x47-67054r14">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  conj 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [but]. 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> As you should check, Prolog doesn’t get into infinite loops with this grammar as it did with the previous one, so from a computational perspective the solution is satisfactory. But it leaves something to be desired from a linguistic perspective. The DCG that looped was at least faithful to the linguistic intuitions about the structure of sentences made using 
<span class="cmti-10"> and 
</span> , 
<span class="cmti-10"> but 
</span> , and 
<span class="cmti-10"> or 
</span> . The new DCG imposes an additional layer of structure that is motivated by processing rather than linguistic considerations; we are no longer simply turning grammars into Prolog. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> The moral is: DCGs aren’t magic. They are a nice notation, but you can’t expect to write down an arbitrary CFG as a DCG and have it run without problems. DCG rules are ordinary Prolog rules in disguise, and this means that you must pay attention to what your Prolog interpreter is going to do with them. And in particular, you have to keep an eye out for left-recursion. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent">
</p>
</div>
<div class="nb-cell html" name="htm1">
<h4 class="likesubsectionHead">
<a id="x47-680007.2">
</a> A DCG for a simple formal language 
</h4>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> As our last example, we shall define a DCG for the formal language 
<span class="cmmi-10"> a 
</span>
<sup>
<span class="cmmi-7"> n 
</span>
</sup>
<span class="cmmi-10"> b 
</span>
<sup>
<span class="cmmi-7"> n 
</span>
</sup> . What is this language? And what is a formal language anyway? 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> A formal language is simply a set of strings. The term “formal language” is intended to contrast with the term “natural language”: whereas natural languages are languages that human beings actually use, formal languages are mathematical objects that computer scientists, logicians, and mathematicians define and study for various purposes. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> A simple example of a formal language is 
<span class="cmmi-10"> a 
</span>
<sup>
<span class="cmmi-7"> n 
</span>
</sup>
<span class="cmmi-10"> b 
</span>
<sup>
<span class="cmmi-7"> n 
</span>
</sup> . The words in this language are built up from two symbols: the symbol 
<span class="cmti-10"> a 
</span> and the symbol 
<span class="cmti-10"> b 
</span> . In fact, the language 
<span class="cmmi-10"> a 
</span>
<sup>
<span class="cmmi-7"> n 
</span>
</sup>
<span class="cmmi-10"> b 
</span>
<sup>
<span class="cmmi-7"> n 
</span>
</sup> consists of all strings made up from these two symbols that have the following form: the string must consist of an unbroken block of 
<span class="cmti-10"> a 
</span> s of length 
<span class="cmti-10"> n 
</span> , followed by an unbroken block of 
<span class="cmti-10"> b 
</span> s of length 
<span class="cmti-10"> n 
</span> , and nothing else. So the strings 
<span class="cmti-10"> ab 
</span> , 
<span class="cmti-10"> aabb 
</span> , 
<span class="cmti-10"> aaabbb 
</span> and 
<span class="cmti-10"> aaaabbbb 
</span> all belong to 
<span class="cmmi-10"> a 
</span>
<sup>
<span class="cmmi-7"> n 
</span>
</sup>
<span class="cmmi-10"> b 
</span>
<sup>
<span class="cmmi-7"> n 
</span>
</sup> . (Note that the empty string belongs to 
<span class="cmmi-10"> a 
</span>
<sup>
<span class="cmmi-7"> n 
</span>
</sup>
<span class="cmmi-10"> b 
</span>
<sup>
<span class="cmmi-7"> n 
</span>
</sup> too: after all, the empty string consists of a block of 
<span class="cmti-10"> a 
</span> s of length zero followed by a block of 
<span class="cmti-10"> b 
</span> s of length zero.) On the other hand, 
<span class="cmti-10"> aba 
</span> and 
<span class="cmti-10"> abba 
</span> do not belong to 
<span class="cmmi-10"> a 
</span>
<sup>
<span class="cmmi-7"> n 
</span>
</sup>
<span class="cmmi-10"> b 
</span>
<sup>
<span class="cmmi-7"> n 
</span>
</sup> . 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Now, it is easy to write a context free grammar that generates this language: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="center">
<!--l. 767-->
<p class="noindent">
</p>
<div class="tabular">
<table cellpadding="0" cellspacing="0" class="tabular" id="TBL-5">
<colgroup id="TBL-5-1g">
<col id="TBL-5-1"/>
</colgroup>
<tr id="TBL-5-1-" style="vertical-align:baseline;">
<td class="td11" id="TBL-5-1-1" style="white-space:nowrap; text-align:left;">
<span class="verb">
<span class="cmtt-10"> s 
</span>
<span class="cmtt-10">  -&gt; 
</span>
<span class="cmtt-10">   
</span>
</span>
<span class="cmmi-10"> ϵ 
</span>
</td>
</tr>
<tr id="TBL-5-2-" style="vertical-align:baseline;">
<td class="td11" id="TBL-5-2-1" style="white-space:nowrap; text-align:left;">
<span class="verb">
<span class="cmtt-10"> s 
</span>
<span class="cmtt-10">  -&gt; 
</span>
<span class="cmtt-10">  l 
</span>
<span class="cmtt-10">  s 
</span>
<span class="cmtt-10">  r 
</span>
</span>
</td>
</tr>
<tr id="TBL-5-3-" style="vertical-align:baseline;">
<td class="td11" id="TBL-5-3-1" style="white-space:nowrap; text-align:left;">
<span class="verb">
<span class="cmtt-10"> l 
</span>
<span class="cmtt-10">  -&gt; 
</span>
<span class="cmtt-10">  a 
</span>
<span class="cmtt-10">   
</span>
</span>
</td>
</tr>
<tr id="TBL-5-4-" style="vertical-align:baseline;">
<td class="td11" id="TBL-5-4-1" style="white-space:nowrap; text-align:left;">
<span class="verb">
<span class="cmtt-10"> r 
</span>
<span class="cmtt-10">  -&gt; 
</span>
<span class="cmtt-10">  b 
</span>
</span>
</td>
</tr>
</table>
</div>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> The first rule says that an 
<span class="cmti-10"> s 
</span> can be realised as nothing at all. The second rule says that an 
<span class="cmti-10"> s 
</span> can be made up of an 
<span class="cmti-10"> l 
</span> (for left) element, followed by an 
<span class="cmti-10"> s 
</span> , followed by an 
<span class="cmti-10"> r 
</span> (for right) element. The last two rules say that 
<span class="cmti-10"> l 
</span> elements and 
<span class="cmti-10"> r 
</span> elements can be realised as 
<span class="cmti-10"> a 
</span> s and 
<span class="cmti-10"> b 
</span> s respectively. It should be clear that this grammar really does generate all and only the elements of 
<span class="cmmi-10"> a 
</span>
<sup>
<span class="cmmi-7"> n 
</span>
</sup>
<span class="cmmi-10"> b 
</span>
<sup>
<span class="cmmi-7"> n 
</span>
</sup> , including the empty string. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Moreover, it is easy to turn this grammar into DCG. We can do so as follows: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb336">
<a id="x47-68002r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  s 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  []. 
</span>
<br class="fancyvrb"/>
<a id="x47-68004r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  s 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  l,s,r. 
</span>
<br class="fancyvrb"/>
<a id="x47-68006r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x47-68008r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  l 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [a]. 
</span>
<br class="fancyvrb"/>
<a id="x47-68010r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  r 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [b]. 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Note that the second rule is recursive (but, thankfully, not left recursive). And in fact this DCG works exactly as we would hope. For example, to the query 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb337">
<a id="x47-68012r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  s([a,a,a,b,b,b],[]). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> we get the answer yes, while to the query 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb338">
<a id="x47-68014r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  s([a,a,a,b,b,b,b],[]). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> we get the answer no. The query 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb339">
<a id="x47-68016r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  s(X,[]). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> enumerates the strings in the language, starting from 
<span class="verb">
<span class="cmtt-10"> [] 
</span>
</span> . 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse30"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse28"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse28"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse29"> front 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch7"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent">
<a id="taillpn-htmlse29">
</a>
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse31"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse29"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse29"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=#taillpn-htmlse30"> tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch7"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<h3 class="sectionHead">
<span class="titlemark"> 7.3 
</span>
<a id="x48-690007.3">
</a> <strong>Exercise</strong>s 
</h3>
</div>
<div class="nb-cell html" name="htm1">
<div class="newtheorem">
<!--l. 812-->
<p class="noindent">
<span class="head">
<span class="cmbx-10"> <strong>Exercise</strong>
</span>
<span class="cmbx-10">  7.1 
</span>
</span>
<a id="x48-690011">
</a>
<span class="cmti-10"> Suppose we are working with the following DCG: 
</span>
</p>
<div class="fancyvrb" id="fancyvrb340">
<a id="x48-69003r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  s 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  foo,bar,wiggle. 
</span>
<br class="fancyvrb"/>
<a id="x48-69005r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  foo 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [choo]. 
</span>
<br class="fancyvrb"/>
<a id="x48-69007r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  foo 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  foo,foo. 
</span>
<br class="fancyvrb"/>
<a id="x48-69009r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  bar 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  mar,zar. 
</span>
<br class="fancyvrb"/>
<a id="x48-69011r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  mar 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  me,my. 
</span>
<br class="fancyvrb"/>
<a id="x48-69013r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  me 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [i]. 
</span>
<br class="fancyvrb"/>
<a id="x48-69015r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  my 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [am]. 
</span>
<br class="fancyvrb"/>
<a id="x48-69017r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  zar 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  blar,car. 
</span>
<br class="fancyvrb"/>
<a id="x48-69019r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  blar 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [a]. 
</span>
<br class="fancyvrb"/>
<a id="x48-69021r10">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  car 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [train]. 
</span>
<br class="fancyvrb"/>
<a id="x48-69023r11">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  wiggle 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [toot]. 
</span>
<br class="fancyvrb"/>
<a id="x48-69025r12">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  wiggle 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  wiggle,wiggle. 
</span>
</div>
<!--l. 827-->
<p class="noindent">
<span class="cmti-10"> Write down the ordinary Prolog rules that correspond to these DCG rules. What are the 
</span>
<span class="cmti-10"> first three responses that Prolog gives to the query 
</span>
<span class="verb">
<span class="cmtt-10"> s(X,[]) 
</span>
</span>
<span class="cmti-10"> ? 
</span>
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<div class="newtheorem">
<!--l. 834-->
<p class="noindent">
<span class="head">
<span class="cmbx-10"> <strong>Exercise</strong>
</span>
<span class="cmbx-10">  7.2 
</span>
</span>
<a id="x48-690262">
</a>
<span class="cmti-10"> The formal language 
</span>
<span class="cmmi-10"> a 
</span>
<sup>
<span class="cmmi-7"> n 
</span>
</sup>
<span class="cmmi-10"> b 
</span>
<sup>
<span class="cmmi-7"> n 
</span>
</sup>
<span class="cmsy-10"> −{ 
</span>
<span class="cmmi-10"> ϵ 
</span>
<span class="cmsy-10"> } 
</span>
<span class="cmti-10"> consists of all the strings in 
</span>
<span class="cmmi-10"> a 
</span>
<sup>
<span class="cmmi-7"> n 
</span>
</sup>
<span class="cmmi-10"> b 
</span>
<sup>
<span class="cmmi-7"> n 
</span>
</sup>
<span class="cmti-10"> except the empty string. Write a DCG that generates this language. 
</span>
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<div class="newtheorem">
<!--l. 840-->
<p class="noindent">
<span class="head">
<span class="cmbx-10"> <strong>Exercise</strong>
</span>
<span class="cmbx-10">  7.3 
</span>
</span>
<a id="x48-690273">
</a>
<span class="cmti-10"> Let 
</span>
<span class="cmmi-10"> a 
</span>
<sup>
<span class="cmmi-7"> n 
</span>
</sup>
<span class="cmmi-10"> b 
</span>
<sup>
<span class="cmr-7"> 2 
</span>
<span class="cmmi-7"> n 
</span>
</sup>
<span class="cmti-10"> be the formal language which contains all strings of 
</span>
<span class="cmti-10"> the following form: an unbroken block of 
</span> a 
<span class="cmti-10"> s of length 
</span> n 
<span class="cmti-10"> followed by an unbroken 
</span>
<span class="cmti-10"> block of 
</span> b 
<span class="cmti-10"> s of length 
</span> 2n 
<span class="cmti-10"> , and nothing else. For example, 
</span> abb 
<span class="cmti-10"> , 
</span> aabbbb 
<span class="cmti-10"> , and 
</span> aaabbbbbb 
<span class="cmti-10"> belong to 
</span>
<span class="cmmi-10"> a 
</span>
<sup>
<span class="cmmi-7"> n 
</span>
</sup>
<span class="cmmi-10"> b 
</span>
<sup>
<span class="cmr-7"> 2 
</span>
<span class="cmmi-7"> n 
</span>
</sup>
<span class="cmti-10"> , and so does the empty string. Write a DCG that 
</span>
<span class="cmti-10"> generates this language. 
</span>
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse31"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse29"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse29"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse30"> front 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch7"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent">
<a id="taillpn-htmlse30">
</a>
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse30"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse30"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=#taillpn-htmlse31"> tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch7"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<h3 class="sectionHead">
<span class="titlemark"> 7.4 
</span>
<a id="x49-700007.4">
</a> Practical Session 
</h3>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> The purpose of this session is to help you get familiar with DCGs, difference lists, and the relation between them, and to give you some experience in writing basic DCGs. As you will learn in the following chapter, there is more to DCGs than the ideas just discussed. Nonetheless, what you have learned so far is certainly the core, and it is important that you are comfortable with the basic ideas before moving on. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> First some keyboard exercises: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<ol class="enumerate1">
<li class="enumerate" id="x49-70002x1"> Type in or download the simple 
<span class="verb">
<span class="cmtt-10"> append/3 
</span>
</span> based recognisers discussed in the text, and then run some traces. As you will see, we were not exaggerating when we said that their performance is poor. Even for such simple sentences as 
<span class="cmti-10"> The woman shot a man 
</span> you will see that the traces are long and difficult to follow. 
</li>
<li class="enumerate" id="x49-70004x2"> Next, type in or download our second recogniser, the one based on difference lists, and run more traces. As you will see, there is a dramatic gain in efficiency. Moreover, you will see that the traces are 
<span class="cmti-10"> very 
</span> simple to understand, especially when compared with the monsters produced by the 
<span class="verb">
<span class="cmtt-10"> append/3 
</span>
</span> based implementations. 
</li>
<li class="enumerate" id="x49-70006x3"> Next, type in or download the DCG discussed in the text. Type 
<span class="verb">
<span class="cmtt-10"> listing 
</span>
</span> so that you can see what Prolog translates the rules to. How does your system translate rules of the form 
<a id="dx49-70007">
</a>
<span class="verb">
<span class="cmtt-10"> Det 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [the] 
</span>
</span> ? That is, does it translate them to rules like 
<span class="verb">
<span class="cmtt-10"> det([the|X],X) 
</span>
</span> , or does is make use of rules containing the 
<span class="cmtt-10"> ’C’ 
</span> predicate? 
</li>
<li class="enumerate" id="x49-70009x4"> Now run some traces. Apart from variable names, the traces you observe here should be very similar to the traces you observed when running the difference list recogniser. 
</li>
</ol>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> And now it’s time to write some DCGs: 
</p>
</div>

<div class="nb-cell html" name="htm1">
<ol class="enumerate1">
<li class="enumerate" id="x49-70011x1"> The formal language 
<span class="cmti-10"> Even 
</span> is very simple: it consists of all strings containing an even number of 
<span class="cmti-10"> a 
</span> s, and nothing else. Note that the empty string 
<span class="cmmi-10"> ϵ 
</span> belongs to 
<span class="cmti-10"> Even 
</span> . Write a DCG that generates 
<span class="cmti-10"> Even 
</span> . 
</li>
<li class="enumerate" id="x49-70013x2"> The formal language 
<span class="cmmi-10"> a 
</span>
<sup>
<span class="cmmi-7"> n 
</span>
</sup>
<span class="cmmi-10"> b 
</span>
<sup>
<span class="cmr-7"> 2 
</span>
<span class="cmmi-7"> m 
</span>
</sup>
<span class="cmmi-10"> c 
</span>
<sup>
<span class="cmr-7"> 2 
</span>
<span class="cmmi-7"> m 
</span>
</sup>
<span class="cmmi-10"> d 
</span>
<sup>
<span class="cmmi-7"> n 
</span>
</sup> consists of all strings of the following form: an unbroken block of 
<span class="cmti-10"> a 
</span> s followed by an unbroken block of 
<span class="cmti-10"> b 
</span> s followed by an unbroken block of 
<span class="cmti-10"> c 
</span> s followed by an unbroken block of 
<span class="cmti-10"> d 
</span> s, such that the 
<span class="cmti-10"> a 
</span> and 
<span class="cmti-10"> d 
</span> blocks are exactly the same length, and the 
<span class="cmti-10"> b 
</span> and 
<span class="cmti-10"> c 
</span> blocks are also exactly the same length and furthermore consist of an even number of 
<span class="cmti-10"> b 
</span> s and 
<span class="cmti-10"> c 
</span> s respectively. For example, 
<span class="cmmi-10"> ϵ 
</span> , 
<span class="cmti-10"> abbccd 
</span> , and 
<span class="cmti-10"> aabbbbccccdd 
</span> all belong to 
<span class="cmmi-10"> a 
</span>
<sup>
<span class="cmmi-7"> n 
</span>
</sup>
<span class="cmmi-10"> b 
</span>
<sup>
<span class="cmr-7"> 2 
</span>
<span class="cmmi-7"> m 
</span>
</sup>
<span class="cmmi-10"> c 
</span>
<sup>
<span class="cmr-7"> 2 
</span>
<span class="cmmi-7"> m 
</span>
</sup>
<span class="cmmi-10"> d 
</span>
<sup>
<span class="cmmi-7"> n 
</span>
</sup> . Write a DCG that generates this language. 
</li>
<li class="enumerate" id="x49-70015x3"> The language that logicians call “propositional logic over the propositional symbols 
<span class="cmti-10"> p 
</span> , 
<span class="cmti-10"> q 
</span> , and 
<span class="cmti-10"> r 
</span> ” can be defined by the following context free grammar: 
<div class="center">
<!--l. 911-->
<p class="noindent">
</p>
<div class="tabular">
<table cellpadding="0" cellspacing="0" class="tabular" id="TBL-6">
<colgroup id="TBL-6-1g">
<col id="TBL-6-1"/>
</colgroup>
<tr id="TBL-6-1-" style="vertical-align:baseline;">
<td class="td11" id="TBL-6-1-1" style="white-space:nowrap; text-align:left;">
<span class="verb">
<span class="cmtt-10"> prop 
</span>
<span class="cmtt-10">  -&gt; 
</span>
<span class="cmtt-10">  p 
</span>
</span>
</td>
</tr>
<tr id="TBL-6-2-" style="vertical-align:baseline;">
<td class="td11" id="TBL-6-2-1" style="white-space:nowrap; text-align:left;">
<span class="verb">
<span class="cmtt-10"> prop 
</span>
<span class="cmtt-10">  -&gt; 
</span>
<span class="cmtt-10">  q 
</span>
</span>
</td>
</tr>
<tr id="TBL-6-3-" style="vertical-align:baseline;">
<td class="td11" id="TBL-6-3-1" style="white-space:nowrap; text-align:left;">
<span class="verb">
<span class="cmtt-10"> prop 
</span>
<span class="cmtt-10">  -&gt; 
</span>
<span class="cmtt-10">  r 
</span>
</span>
</td>
</tr>
<tr id="TBL-6-4-" style="vertical-align:baseline;">
<td class="td11" id="TBL-6-4-1" style="white-space:nowrap; text-align:left;">
<span class="verb">
<span class="cmtt-10"> prop 
</span>
<span class="cmtt-10">  -&gt; 
</span>
</span>
<span class="cmsy-10"> ¬ 
</span>
<span class="verb">
<span class="cmtt-10">  prop 
</span>
</span>
</td>
</tr>
<tr id="TBL-6-5-" style="vertical-align:baseline;">
<td class="td11" id="TBL-6-5-1" style="white-space:nowrap; text-align:left;">
<span class="verb">
<span class="cmtt-10"> prop 
</span>
<span class="cmtt-10">  -&gt; 
</span>
</span>
<span class="verb">
<span class="cmtt-10"> (prop 
</span>
<span class="cmtt-10">   
</span>
</span>
<span class="cmsy-10"> ∧ 
</span>
<span class="verb">
<span class="cmtt-10">  prop) 
</span>
</span>
</td>
</tr>
<tr id="TBL-6-6-" style="vertical-align:baseline;">
<td class="td11" id="TBL-6-6-1" style="white-space:nowrap; text-align:left;">
<span class="verb">
<span class="cmtt-10"> prop 
</span>
<span class="cmtt-10">  -&gt; 
</span>
</span>
<span class="verb">
<span class="cmtt-10"> (prop 
</span>
<span class="cmtt-10">   
</span>
</span>
<span class="cmsy-10"> ∨ 
</span>
<span class="verb">
<span class="cmtt-10">  prop) 
</span>
</span>
</td>
</tr>
<tr id="TBL-6-7-" style="vertical-align:baseline;">
<td class="td11" id="TBL-6-7-1" style="white-space:nowrap; text-align:left;">
<span class="verb">
<span class="cmtt-10"> prop 
</span>
<span class="cmtt-10">  -&gt; 
</span>
</span>
<span class="verb">
<span class="cmtt-10"> (prop 
</span>
<span class="cmtt-10">   
</span>
</span>
<span class="cmsy-10"> → 
</span>
<span class="verb">
<span class="cmtt-10">  prop) 
</span>
</span>
</td>
</tr>
</table>
</div>
</div>
<!--l. 921-->
<p class="noindent"> Write a DCG that generates this language. Actually, because we don’t know about Prolog operators yet, you will have to make a few rather clumsy looking compromises. For example, instead of getting it to recognise 
</p>
<div class="center">
<!--l. 925-->
<p class="noindent">
</p>
<div class="tabular">
<table cellpadding="0" cellspacing="0" class="tabular" id="TBL-7">
<colgroup id="TBL-7-1g">
<col id="TBL-7-1"/>
</colgroup>
<tr id="TBL-7-1-" style="vertical-align:baseline;">
<td class="td11" id="TBL-7-1-1" style="white-space:nowrap; text-align:left;">
<span class="cmsy-10"> ¬ 
</span>
<span class="verb">
<span class="cmtt-10"> (p 
</span>
<span class="cmtt-10">   
</span>
</span>
<span class="cmsy-10"> → 
</span>
<span class="verb">
<span class="cmtt-10">  q) 
</span>
</span>
</td>
</tr>
</table>
</div>
</div>
<!--l. 927-->
<p class="noindent"> you will have to get it recognise things like 
</p>
<div class="center">
<!--l. 928-->
<p class="noindent">
</p>
<div class="tabular">
<table cellpadding="0" cellspacing="0" class="tabular" id="TBL-8">
<colgroup id="TBL-8-1g">
<col id="TBL-8-1"/>
</colgroup>
<tr id="TBL-8-1-" style="vertical-align:baseline;">
<td class="td11" id="TBL-8-1-1" style="white-space:nowrap; text-align:left;">
<span class="verb">
<span class="cmtt-10"> [not, 
</span>
<span class="cmtt-10">  ’(’, 
</span>
<span class="cmtt-10">  p, 
</span>
<span class="cmtt-10">  implies, 
</span>
<span class="cmtt-10">  q, 
</span>
<span class="cmtt-10">  ’)’] 
</span>
</span>
</td>
</tr>
</table>
</div>
</div>
<!--l. 930-->
<p class="noindent"> instead. We will learn in Chapter  
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch9"> 9 
<!--tex4ht:ref: CHAPTER9 -->
</a> how to deal with propositional logic somewhat more naturally; in the meantime, write a DCG that accepts a clumsy looking version of this language. Use 
<span class="cmti-10"> or 
</span> for 
<span class="cmsy-10"> ∨ 
</span> , and 
<span class="cmti-10"> and 
</span> for 
<span class="cmsy-10"> ∧ 
</span> . 
</p>
</li>
</ol>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse30"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse30"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse31"> front 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch7"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent">
<a id="taillpn-htmlse31">
</a>
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse33"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=#taillpn-htmlse32"> tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch8"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<h3 class="sectionHead">
<span class="titlemark"> 8.1 
</span>
<a id="x51-720008.1">
</a> Extra Arguments 
</h3>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> In the previous chapter we introduced basic DCG notation. But DCGs offer more than we’ve seen so far. For a start, DCGs allow us to specify extra arguments. Extra arguments can be used for many purposes; we’ll examine three. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent">
</p>
</div>
<div class="nb-cell html" name="htm1">
<h4 class="likesubsectionHead">
<a id="x51-730008.1">
</a> Context free grammars with features 
</h4>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> As a first example, let’s see how extra arguments can be used to add 
<span class="cmti-10"> features 
</span> to context-free grammars. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Here’s the DCG we worked with in the previous chapter: 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb341">
<a id="x51-73002r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  s 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  np,vp. 
</span>
<br class="fancyvrb"/>
<a id="x51-73004r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x51-73006r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  np 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  det,n. 
</span>
<br class="fancyvrb"/>
<a id="x51-73008r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x51-73010r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  vp 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  v,np. 
</span>
<br class="fancyvrb"/>
<a id="x51-73012r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  vp 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  v. 
</span>
<br class="fancyvrb"/>
<a id="x51-73014r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x51-73016r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  det 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [the]. 
</span>
<br class="fancyvrb"/>
<a id="x51-73018r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  det 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [a]. 
</span>
<br class="fancyvrb"/>
<a id="x51-73020r10">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x51-73022r11">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  n 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [woman]. 
</span>
<br class="fancyvrb"/>
<a id="x51-73024r12">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  n 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [man]. 
</span>
<br class="fancyvrb"/>
<a id="x51-73026r13">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x51-73028r14">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  v 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [shoots]. 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Now, suppose we wanted to deal with sentences like “She shoots him”, and “He shoots her”. What should we do? Well, obviously we should add rules saying that “he”, “she”, “him”, and “her” are pronouns: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb342">
<a id="x51-73030r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  pro 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [he]. 
</span>
<br class="fancyvrb"/>
<a id="x51-73032r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  pro 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [she]. 
</span>
<br class="fancyvrb"/>
<a id="x51-73034r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  pro 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [him]. 
</span>
<br class="fancyvrb"/>
<a id="x51-73036r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  pro 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [her]. 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Furthermore, we should add a rule saying that noun phrases can be pronouns: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb343">
<a id="x51-73038r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  np 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  pro. 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> In this new DCG any good? Well, up to a point, it works. For example: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb344">
<a id="x51-73040r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  s([she,shoots,him],[]). 
</span>
<br class="fancyvrb"/>
<a id="x51-73042r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> But there’s an obvious problem. The DCG will also accept a lot of sentences that are clearly wrong, such as “A woman shoots she”, “Her shoots a man”, and “Her shoots she”: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb345">
<a id="x51-73044r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  s([a,woman,shoots,she],[]). 
</span>
<br class="fancyvrb"/>
<a id="x51-73046r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x51-73048r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x51-73050r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  s([her,shoots,a,man],[]). 
</span>
<br class="fancyvrb"/>
<a id="x51-73052r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x51-73054r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x51-73056r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  s([her,shoots,she],[]). 
</span>
<br class="fancyvrb"/>
<a id="x51-73058r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> That is, the grammar doesn’t know that “she” and “he” are 
<span class="cmti-10"> subject 
</span> pronouns and cannot be used in 
<span class="cmti-10"> object 
</span> position; thus “A woman shoots she” is bad because it violates this basic fact about English. Moreover, the grammar doesn’t know that “her” and “him” are 
<span class="cmti-10"> object 
</span> pronouns and cannot be used in 
<span class="cmti-10"> subject 
</span> position; thus “Her shoots a man” is bad because it violates this constraint. As for “Her shoots she”, this manages to get both matters wrong at once. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Now, it’s pretty obvious 
<span class="cmti-10"> what 
</span> we have to do to put this right: we need to extend the DCG with information about which pronouns can occur in subject position and which in object position. The interesting question: 
<span class="cmti-10"> how 
</span> exactly are we to do this? First let’s look at a naive way of correcting this, namely adding new rules: 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb346">
<a id="x51-73060r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  s 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  np_subject,vp. 
</span>
<br class="fancyvrb"/>
<a id="x51-73062r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x51-73064r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  np_subject 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  det,n. 
</span>
<br class="fancyvrb"/>
<a id="x51-73066r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  np_object 
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  det,n. 
</span>
<br class="fancyvrb"/>
<a id="x51-73068r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  np_subject 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  pro_subject. 
</span>
<br class="fancyvrb"/>
<a id="x51-73070r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  np_object 
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  pro_object. 
</span>
<br class="fancyvrb"/>
<a id="x51-73072r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x51-73074r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  vp 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  v,np_object. 
</span>
<br class="fancyvrb"/>
<a id="x51-73076r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  vp 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  v. 
</span>
<br class="fancyvrb"/>
<a id="x51-73078r10">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x51-73080r11">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  det 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [the]. 
</span>
<br class="fancyvrb"/>
<a id="x51-73082r12">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  det 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [a]. 
</span>
<br class="fancyvrb"/>
<a id="x51-73084r13">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x51-73086r14">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  n 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [woman]. 
</span>
<br class="fancyvrb"/>
<a id="x51-73088r15">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  n 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [man]. 
</span>
<br class="fancyvrb"/>
<a id="x51-73090r16">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x51-73092r17">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  pro_subject 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [he]. 
</span>
<br class="fancyvrb"/>
<a id="x51-73094r18">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  pro_subject 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [she]. 
</span>
<br class="fancyvrb"/>
<a id="x51-73096r19">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  pro_object 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [him]. 
</span>
<br class="fancyvrb"/>
<a id="x51-73098r20">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  pro_object 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [her]. 
</span>
<br class="fancyvrb"/>
<a id="x51-73100r21">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x51-73102r22">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  v 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [shoots]. 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Now this solution “works”. For example, 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb347">
<a id="x51-73104r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  s([her,shoots,she],[]). 
</span>
<br class="fancyvrb"/>
<a id="x51-73106r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  no 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> But neither computer scientists nor linguists would consider this a good solution. The trouble is, a small addition to the lexicon has led to quite a big change in the DCG. Let’s face it: “she” and “her” (and “he” and “him”) are the same in a lot of respects. But to deal with the property in which they differ (namely, in which position they can occur in sentences) we’ve had to make big changes to the grammar: in particular, we’ve doubled the number of noun phrase rules. If we had to make further changes (for example, to cope with plural noun phrases) things would get even worse. What we really need is a more delicate programming mechanism that allows us to cope with such facts without being forced to add rules all the time. And here’s where the extra arguments come into play. Look at the following grammar: 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb348">
<a id="x51-73108r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  s 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  np(subject),vp. 
</span>
<br class="fancyvrb"/>
<a id="x51-73110r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x51-73112r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  np(_) 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  det,n. 
</span>
<br class="fancyvrb"/>
<a id="x51-73114r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  np(X) 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  pro(X). 
</span>
<br class="fancyvrb"/>
<a id="x51-73116r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x51-73118r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  vp 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  v,np(object). 
</span>
<br class="fancyvrb"/>
<a id="x51-73120r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  vp 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  v. 
</span>
<br class="fancyvrb"/>
<a id="x51-73122r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x51-73124r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  det 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [the]. 
</span>
<br class="fancyvrb"/>
<a id="x51-73126r10">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  det 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [a]. 
</span>
<br class="fancyvrb"/>
<a id="x51-73128r11">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x51-73130r12">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  n 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [woman]. 
</span>
<br class="fancyvrb"/>
<a id="x51-73132r13">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  n 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [man]. 
</span>
<br class="fancyvrb"/>
<a id="x51-73134r14">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x51-73136r15">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  pro(subject) 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [he]. 
</span>
<br class="fancyvrb"/>
<a id="x51-73138r16">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  pro(subject) 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [she]. 
</span>
<br class="fancyvrb"/>
<a id="x51-73140r17">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  pro(object) 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [him]. 
</span>
<br class="fancyvrb"/>
<a id="x51-73142r18">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  pro(object) 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [her]. 
</span>
<br class="fancyvrb"/>
<a id="x51-73144r19">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x51-73146r20">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  v 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [shoots]. 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> The key thing to note is that this new grammar contains only one new noun phrase rule. In fact, it is very similar to the first grammar that we wrote, except that now the symbol 
<span class="verb">
<span class="cmtt-10"> np 
</span>
</span> is associated with a new argument, either 
<span class="verb">
<span class="cmtt-10"> subject 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> object 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> _ 
</span>
</span> or 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> . A linguist would say that we’ve added features to distinguish various kinds of noun phrase. In particular, note the four rules for the pronouns. Here we’ve used the extra argument to state which pronouns can occur in subject position, and which can occur in object position. Thus these rules are the most fundamental, for they give us the basic facts about how these pronouns can be used. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> So what do the other rules do? Well, intuitively, the rule 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb349">
<a id="x51-73148r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  np(X) 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  pro(X). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> uses the extra argument (the variable 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> ) to pass these basic facts about pronouns up to noun phrases built out of them: because the variable 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> is used as the extra argument for both the np and the pronoun, Prolog unification will guarantee that they will be given the same value. In particular, if the pronoun we use is “she” (in which case 
<span class="verb">
<span class="cmtt-10"> X=subject 
</span>
</span> ), then the np will (through its extra argument 
<span class="verb">
<span class="cmtt-10"> X=subject 
</span>
</span> ) be marked as a subject np. On the other hand, if the pronoun we use is “her” (in which case 
<span class="verb">
<span class="cmtt-10"> X=object 
</span>
</span> ), then the extra argument for np will be marked 
<span class="verb">
<span class="cmtt-10"> X=object 
</span>
</span> too. And this, of course, is exactly the behaviour we want. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> On the other hand, although noun phrases built using the rule 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb350">
<a id="x51-73150r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  np(_) 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  det,n. 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> also have an extra argument, we’ve used the anonymous variable as its value. Essentially this means 
<span class="cmti-10"> can be either 
</span> , which is correct, for expressions built using this rule (such as “the man” and “a woman”) can be used in both subject and object position. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Now consider the rule 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb351">
<a id="x51-73152r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  vp 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  v,np(object). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> This says that to apply this rule we need to use a noun phrase whose extra argument unifies with 
<span class="verb">
<span class="cmtt-10"> object 
</span>
</span> . This can be 
<span class="cmti-10"> either 
</span> noun phrases built from object pronouns 
<span class="cmti-10"> or 
</span> noun phrases such as “the man” and “a woman” which have the anonymous variable as the value of the extra argument. Crucially, pronouns marked has having 
<span class="verb">
<span class="cmtt-10"> subject 
</span>
</span> as the value of the extra argument 
<span class="cmti-10"> can’t 
</span> be used here: the atoms 
<span class="verb">
<span class="cmtt-10"> object 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> subject 
</span>
</span> don’t unify. Note that the rule 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb352">
<a id="x51-73154r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  s 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  np(subject),vp. 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> works in an analogous fashion to prevent noun phrases made of object pronouns from ending up in subject position. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> This works. You can check it out by posing the query: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb353">
<a id="x51-73156r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  s(X,[]). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> As you step through the responses, you’ll see that only acceptable English is generated. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> But while the intuitive explanation just given is correct, what’s 
<span class="cmti-10"> really 
</span> going on? The key thing to remember is that DCG rules are just a convenient abbreviation. For example, the rule 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb354">
<a id="x51-73158r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  s 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  np,vp. 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> is really syntactic sugar for 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb355">
<a id="x51-73160r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  s(A,B) 
</span>
<span class="cmtt-10">  :- 
</span>
<br class="fancyvrb"/>
<a id="x51-73162r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  np(A,C), 
</span>
<br class="fancyvrb"/>
<a id="x51-73164r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  vp(C,B). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> That is, as we learned in the previous chapter, the DCG notation is a way of hiding the two arguments responsible for the difference list representation, so that we don’t have to think about them. We work with the nice user-friendly notation, and Prolog translates it into the clauses just given. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Ok, so we obviously need to ask what 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb356">
<a id="x51-73166r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  s 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  np(subject),vp. 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> translates into. Here’s the answer: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb357">
<a id="x51-73168r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  s(A,B) 
</span>
<span class="cmtt-10">  :- 
</span>
<br class="fancyvrb"/>
<a id="x51-73170r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  np(subject,A,C), 
</span>
<br class="fancyvrb"/>
<a id="x51-73172r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  vp(C,B). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> As should now be clear, the name “extra argument” is a good one: as this translation makes clear, the 
<span class="verb">
<span class="cmtt-10"> subject 
</span>
</span> symbol really 
<span class="cmti-10"> is 
</span> just one more argument in an ordinary Prolog rule. Similarly, our noun phrase DCG rules translate into 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb358">
<a id="x51-73174r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  np(A,B,C) 
</span>
<span class="cmtt-10">  :- 
</span>
<br class="fancyvrb"/>
<a id="x51-73176r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  det(B,D), 
</span>
<br class="fancyvrb"/>
<a id="x51-73178r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  n(D,C). 
</span>
<br class="fancyvrb"/>
<a id="x51-73180r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  np(A,B,C) 
</span>
<span class="cmtt-10">  :- 
</span>
<br class="fancyvrb"/>
<a id="x51-73182r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  pro(A,B,C). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Note that both rules have 
<span class="cmti-10"> three 
</span> arguments. The first, 
<span class="verb">
<span class="cmtt-10"> A 
</span>
</span> , is the extra argument, and the last two are the ordinary, hidden DCG arguments (the two hidden arguments are always the last two arguments). 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Incidentally, how do you think we would use the grammar to list the grammatical noun phrases? Well, if we had been working with the DCG rule 
<span class="verb">
<span class="cmtt-10"> np 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  det,n 
</span>
</span> (that is, a rule with no extra arguments) we would have made the query 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb359">
<a id="x51-73184r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  np(NP,[]). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> So, in view of what we have just learned about extra arguments, it’s not too surprising that we need to pose the query 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb360">
<a id="x51-73186r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  np(X,NP,[]). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> when working with our new DCG. And here’s what the response would be: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb361">
<a id="x51-73188r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  _2625 
</span>
<br class="fancyvrb"/>
<a id="x51-73190r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  NP 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [the,woman] 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x51-73192r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x51-73194r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  _2625 
</span>
<br class="fancyvrb"/>
<a id="x51-73196r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  NP 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [the,man] 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x51-73198r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x51-73200r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  _2625 
</span>
<br class="fancyvrb"/>
<a id="x51-73202r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  NP 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [a,woman] 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x51-73204r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x51-73206r10">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  _2625 
</span>
<br class="fancyvrb"/>
<a id="x51-73208r11">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  NP 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [a,man] 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x51-73210r12">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x51-73212r13">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  subject 
</span>
<br class="fancyvrb"/>
<a id="x51-73214r14">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  NP 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [he] 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x51-73216r15">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x51-73218r16">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  subject 
</span>
<br class="fancyvrb"/>
<a id="x51-73220r17">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  NP 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [she] 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x51-73222r18">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x51-73224r19">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  object 
</span>
<br class="fancyvrb"/>
<a id="x51-73226r20">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  NP 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [him] 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x51-73228r21">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x51-73230r22">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  object 
</span>
<br class="fancyvrb"/>
<a id="x51-73232r23">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  NP 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [her] 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x51-73234r24">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x51-73236r25">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  no 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> One final remark: don’t be misled by this simplicity of our example grammar. Extra arguments can be used to cope with some complex syntactic problems. DCGs are no longer the state-of-the-art grammar development tools they once were, but they’re not toys either. Once you know about writing DCGs with extra arguments, you can write some fairly sophisticated grammars. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent">
</p>
</div>
<div class="nb-cell html" name="htm1">
<h4 class="likesubsectionHead">
<a id="x51-740008.1">
</a> Building parse trees 
</h4>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> So far, the programs we have discussed have been able to 
<span class="cmti-10"> recognise 
</span> grammatical structure (that is, they could correctly answer yes or no when asked whether the input was a sentence, a noun phrase, and so on) and to 
<span class="cmti-10"> generate 
</span> grammatical output. This is pleasant, but we would also like to be able to 
<span class="cmti-10"> parse 
</span> . That is, we would like our programs not only to tell us 
<span class="cmti-10"> which 
</span> sentences are grammatical, but also to give us an analysis of their structure. In particular, we would like to see the trees the grammar assigns to sentences. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Well, using only standard Prolog tools we can’t actually draw nice pictures of trees, but we 
<span class="cmti-10"> can 
</span> build data structures which describe trees in a clear way. For example, corresponding to the tree 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="quote">
<!--l. 365-->
<p class="noindent">
<span class="cmtt-10"> s 
</span>
<span class="cmtt-10"> np 
</span>
<span class="cmtt-10"> det 
</span>
<span class="cmtt-10"> a 
</span>
<span class="cmtt-10"> n 
</span>
<span class="cmtt-10"> woman 
</span>
<span class="cmtt-10"> vp 
</span>
<span class="cmtt-10"> v 
</span>
<span class="cmtt-10"> shoots 
</span>
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> we could have the following term: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb362">
<a id="x51-74002r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  s(np(det(a),n(woman)),vp(v(shoots))). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Sure: it doesn’t 
<span class="cmti-10"> look 
</span> as nice, but all the information in the picture is there. And, with the aid of a decent graphics package, it would be easy to turn this term into a picture. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> But how do we get DCGs to build such terms? Actually, it’s pretty easy. After all, in effect a DCG has to work out what the tree structure is when recognising a sentence. So we just need to find a way of keeping track of the structure that the DCG finds. We do this by adding extra arguments. Here’s how: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb363">
<a id="x51-74004r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  s(s(NP,VP)) 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  np(NP),vp(VP). 
</span>
<br class="fancyvrb"/>
<a id="x51-74006r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x51-74008r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  np(np(DET,N)) 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  det(DET),n(N). 
</span>
<br class="fancyvrb"/>
<a id="x51-74010r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x51-74012r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  vp(vp(V,NP)) 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  v(V),np(NP). 
</span>
<br class="fancyvrb"/>
<a id="x51-74014r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  vp(vp(V)) 
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  v(V). 
</span>
<br class="fancyvrb"/>
<a id="x51-74016r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x51-74018r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  det(det(the)) 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [the]. 
</span>
<br class="fancyvrb"/>
<a id="x51-74020r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  det(det(a)) 
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [a]. 
</span>
<br class="fancyvrb"/>
<a id="x51-74022r10">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x51-74024r11">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  n(n(woman)) 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [woman]. 
</span>
<br class="fancyvrb"/>
<a id="x51-74026r12">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  n(n(man)) 
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [man]. 
</span>
<br class="fancyvrb"/>
<a id="x51-74028r13">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x51-74030r14">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  v(v(shoots)) 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [shoots]. 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> What’s going on here? Essentially we are building the parse trees for the syntactic categories on the left hand side of the rules out of the parse trees for the syntactic categories on the right hand side of the rules. Consider the rule 
<span class="verb">
<span class="cmtt-10"> vp(vp(V,NP)) 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  v(V),np(NP) 
</span>
</span> . When we make a query using this DCG, the 
<span class="verb">
<span class="cmtt-10"> V 
</span>
</span> in 
<span class="verb">
<span class="cmtt-10"> v(V) 
</span>
</span> and the 
<span class="verb">
<span class="cmtt-10"> NP 
</span>
</span> in 
<span class="verb">
<span class="cmtt-10"> np(NP) 
</span>
</span> will be instantiated to terms representing parse trees. For example, perhaps 
<span class="verb">
<span class="cmtt-10"> V 
</span>
</span> will be instantiated to 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb364">
<a id="x51-74032r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  v(shoots) 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> and 
<span class="verb">
<span class="cmtt-10"> NP 
</span>
</span> will be instantiated to 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb365">
<a id="x51-74034r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  np(det(a),n(woman)). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> What is the term corresponding to a vp made out of these two structures? Obviously it should be this: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb366">
<a id="x51-74036r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  vp(v(shoots),np(det(a),n(woman))). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> And this is precisely what the extra argument 
<span class="verb">
<span class="cmtt-10"> vp(V,NP) 
</span>
</span> given in the rule 
<span class="verb">
<span class="cmtt-10"> vp(vp(V,NP)) 
</span>
<span class="cmtt-10">  --&gt; 
</span>
</span>
<span class="verb">
<span class="cmtt-10"> v(V),np(NP) 
</span>
</span> returns to us: a term whose functor is 
<span class="verb">
<span class="cmtt-10"> vp 
</span>
</span> , and whose first and second arguments are the values of 
<span class="verb">
<span class="cmtt-10"> V 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> NP 
</span>
</span> respectively. To put it informally: it plugs the 
<span class="verb">
<span class="cmtt-10"> V 
</span>
</span> and the 
<span class="verb">
<span class="cmtt-10"> NP 
</span>
</span> terms together under a 
<span class="verb">
<span class="cmtt-10"> vp 
</span>
</span> functor. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> To parse the sentence “A woman shoots” we pose the query: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb367">
<a id="x51-74038r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  s(T,[a,woman,shoots],[]). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> That is, we ask for the extra argument 
<span class="verb">
<span class="cmtt-10"> T 
</span>
</span> to be instantiated to a parse tree for the sentence. And we get: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb368">
<a id="x51-74040r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  T 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  s(np(det(a),n(woman)),vp(v(shoots))) 
</span>
<br class="fancyvrb"/>
<a id="x51-74042r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Furthermore, we can generate all parse trees by making the following query: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb369">
<a id="x51-74044r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  s(T,S,[]). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> The first three responses are: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb370">
<a id="x51-74046r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  T 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  s(np(det(the),n(woman)), 
</span>
<br class="fancyvrb"/>
<a id="x51-74048r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  vp(v(shoots),np(det(the),n(woman)))) 
</span>
<br class="fancyvrb"/>
<a id="x51-74050r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  S 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [the,woman,shoots,the,woman] 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x51-74052r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x51-74054r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  T 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  s(np(det(the),n(woman)), 
</span>
<br class="fancyvrb"/>
<a id="x51-74056r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  vp(v(shoots),np(det(the),n(man)))) 
</span>
<br class="fancyvrb"/>
<a id="x51-74058r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  S 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [the,woman,shoots,the,man] 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x51-74060r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x51-74062r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  T 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  s(np(det(the),n(woman)), 
</span>
<br class="fancyvrb"/>
<a id="x51-74064r10">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  vp(v(shoots),np(det(a),n(woman)))) 
</span>
<br class="fancyvrb"/>
<a id="x51-74066r11">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  S 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [the,woman,shoots,a,woman] 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> In short, we have just seen an elegant (and useful) example of how to build structure using unification. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Extra arguments can also be used to build semantic representations. Now, we did not say anything about what the words in our little DCG mean. In fact, nowadays a lot is known about the semantics of natural languages, and it is surprisingly easy to build semantic representations which partially capture the meaning of sentences or even entire discourses. Such representations are usually expressions of some formal language (for example first-order logic, discourse representation structures, or a database query language) and they are usually built up compositionally. That is, the meaning of each word is expressed in the formal language; this meaning is given as an extra argument in the DCG entries for the individual words. Then, for each rule in the grammar, an extra argument shows how to combine the meaning of the two subcomponents. For example, to the rule 
<span class="verb">
<span class="cmtt-10"> s 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  np, 
</span>
<span class="cmtt-10">  vp 
</span>
</span> we would add an extra argument stating how to combine the 
<span class="verb">
<span class="cmtt-10"> np 
</span>
</span> meaning and the 
<span class="verb">
<span class="cmtt-10"> vp 
</span>
</span> meaning to form the 
<span class="verb">
<span class="cmtt-10"> s 
</span>
</span> meaning. Although somewhat more complex, the semantic construction process is quite like the way we built up the parse tree for the sentence from the parse tree of its subparts. 
<span class="footnote-mark">
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-html52">
<sup class="textsuperscript"> 1 
</sup>
</a>
</span>
<a id="x51-74067f1">
</a>
</p>
</div>
<div class="nb-cell html" name="htm1">
<h4 class="likesubsectionHead">
<a id="x51-750008.1">
</a> Beyond context free languages 
</h4>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> In the previous chapter we introduced DCGs as a useful Prolog tool for representing and working with context free grammars. Now, this is certainly a good way of thinking about DCGs, but it’s not the whole story. For the fact of the matter is: DCGs can deal with a lot more than just context free languages. The extra arguments we have been discussing (and indeed, the extra goals we shall introduce shortly) give us the tools for coping with any computable language whatsoever. We shall illustrate this by presenting a simple DCG for the formal language 
<span class="cmmi-10"> a 
</span>
<sup>
<span class="cmmi-7"> n 
</span>
</sup>
<span class="cmmi-10"> b 
</span>
<sup>
<span class="cmmi-7"> n 
</span>
</sup>
<span class="cmmi-10"> c 
</span>
<sup>
<span class="cmmi-7"> n 
</span>
</sup>
<span class="cmsy-10"> \{ 
</span>
<span class="cmmi-10"> ϵ 
</span>
<span class="cmsy-10"> } 
</span> . 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> The formal language 
<span class="cmmi-10"> a 
</span>
<sup>
<span class="cmmi-7"> n 
</span>
</sup>
<span class="cmmi-10"> b 
</span>
<sup>
<span class="cmmi-7"> n 
</span>
</sup>
<span class="cmmi-10"> c 
</span>
<sup>
<span class="cmmi-7"> n 
</span>
</sup>
<span class="cmsy-10"> \{ 
</span>
<span class="cmmi-10"> ϵ 
</span>
<span class="cmsy-10"> } 
</span> consists of all non-null strings made up of 
<span class="verb">
<span class="cmtt-10"> a 
</span>
</span> s, 
<span class="verb">
<span class="cmtt-10"> b 
</span>
</span> s, and 
<span class="verb">
<span class="cmtt-10"> c 
</span>
</span> s which consist of an unbroken block of 
<span class="verb">
<span class="cmtt-10"> a 
</span>
</span> s, followed by an unbroken block of 
<span class="verb">
<span class="cmtt-10"> b 
</span>
</span> s, followed by an unbroken block of 
<span class="verb">
<span class="cmtt-10"> c 
</span>
</span> s, all three blocks having the same length. For example, 
<span class="verb">
<span class="cmtt-10"> abc 
</span>
</span> , and 
<span class="verb">
<span class="cmtt-10"> aabbcc 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> aaabbbccc 
</span>
</span> all belong to 
<span class="cmmi-10"> a 
</span>
<sup>
<span class="cmmi-7"> n 
</span>
</sup>
<span class="cmmi-10"> b 
</span>
<sup>
<span class="cmmi-7"> n 
</span>
</sup>
<span class="cmmi-10"> c 
</span>
<sup>
<span class="cmmi-7"> n 
</span>
</sup>
<span class="cmsy-10"> \{ 
</span>
<span class="cmmi-10"> ϵ 
</span>
<span class="cmsy-10"> } 
</span> . 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> The interesting thing about this language is that it is 
<span class="cmti-10"> not 
</span> context free. Try whatever you like, you will not succeed in writing a context free grammar that generates precisely these strings. Proving this would take us too far afield, but the proof is not particularly difficult, and you can find it in many books on formal language theory. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> On the other hand, as we shall now see, it is very easy to write a DCG that generates this language. Just as we did in the previous chapter, we shall represent strings as lists; for example, the string 
<span class="verb">
<span class="cmtt-10"> abc 
</span>
</span> will be represented using the list 
<span class="verb">
<span class="cmtt-10"> [a,b,c] 
</span>
</span> . Given this convention, here’s the DCG we need: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb371">
<a id="x51-75002r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  s(Count) 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  ablock(Count),bblock(Count),cblock(Count). 
</span>
<br class="fancyvrb"/>
<a id="x51-75004r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x51-75006r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ablock(0) 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  []. 
</span>
<br class="fancyvrb"/>
<a id="x51-75008r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ablock(succ(Count)) 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [a],ablock(Count). 
</span>
<br class="fancyvrb"/>
<a id="x51-75010r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x51-75012r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  bblock(0) 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  []. 
</span>
<br class="fancyvrb"/>
<a id="x51-75014r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  bblock(succ(Count)) 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [b],bblock(Count). 
</span>
<br class="fancyvrb"/>
<a id="x51-75016r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x51-75018r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  cblock(0) 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  []. 
</span>
<br class="fancyvrb"/>
<a id="x51-75020r10">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  cblock(succ(Count)) 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [c],cblock(Count). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> The idea underlying this DCG is fairly simple: we use an extra argument to keep track of the length of the blocks. The 
<span class="verb">
<span class="cmtt-10"> s 
</span>
</span> rule simply says that we want a block of 
<span class="verb">
<span class="cmtt-10"> a 
</span>
</span> s followed by a block of 
<span class="verb">
<span class="cmtt-10"> b 
</span>
</span> s followed by block of 
<span class="verb">
<span class="cmtt-10"> c 
</span>
</span> s, and all three blocks are to have the same length, namely 
<span class="verb">
<span class="cmtt-10"> Count 
</span>
</span> . 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> What should the values of 
<span class="verb">
<span class="cmtt-10"> Count 
</span>
</span> be? The obvious answer is: 
<span class="verb">
<span class="cmtt-10"> 1 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> 2 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> 3 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> 4 
</span>
</span> , and so on. But as yet we don’t know how to mix DCGs and arithmetic, so this isn’t very helpful. Fortunately, as this DCG shows, there’s an easier (and more elegant) way. Represent the number 0 by 
<span class="verb">
<span class="cmtt-10"> 0 
</span>
</span> , the number 1 by 
<span class="verb">
<span class="cmtt-10"> succ(0) 
</span>
</span> , the number 2 by 
<span class="verb">
<span class="cmtt-10"> succ(succ(0)) 
</span>
</span> , the number 3 by 
<span class="verb">
<span class="cmtt-10"> succ(succ(succ(0))) 
</span>
</span> , and so on, just as we did it in Chapter 3 (as we said in Chapter 3, you can read 
<span class="verb">
<span class="cmtt-10"> succ 
</span>
</span> as “successor of”). This choice of notation enables us to count using unification. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> And this is precisely what our new DCG does. For example, suppose we pose the following query: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb372">
<a id="x51-75022r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  s(Count,L,[]). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> which asks Prolog to generate the lists 
<span class="verb">
<span class="cmtt-10"> L 
</span>
</span> of symbols that belong to this language, and to give the value of 
<span class="verb">
<span class="cmtt-10"> Count 
</span>
</span> needed to produce each item. Then the first four responses are: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb373">
<a id="x51-75024r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Count 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  0 
</span>
<br class="fancyvrb"/>
<a id="x51-75026r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  L 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [] 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x51-75028r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x51-75030r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Count 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  succ(0) 
</span>
<br class="fancyvrb"/>
<a id="x51-75032r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  L 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [a, 
</span>
<span class="cmtt-10">  b, 
</span>
<span class="cmtt-10">  c] 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x51-75034r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x51-75036r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Count 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  succ(succ(0)) 
</span>
<br class="fancyvrb"/>
<a id="x51-75038r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  L 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [a, 
</span>
<span class="cmtt-10">  a, 
</span>
<span class="cmtt-10">  b, 
</span>
<span class="cmtt-10">  b, 
</span>
<span class="cmtt-10">  c, 
</span>
<span class="cmtt-10">  c] 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x51-75040r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x51-75042r10">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Count 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  succ(succ(succ(0))) 
</span>
<br class="fancyvrb"/>
<a id="x51-75044r11">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  L 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [a, 
</span>
<span class="cmtt-10">  a, 
</span>
<span class="cmtt-10">  a, 
</span>
<span class="cmtt-10">  b, 
</span>
<span class="cmtt-10">  b, 
</span>
<span class="cmtt-10">  b, 
</span>
<span class="cmtt-10">  c, 
</span>
<span class="cmtt-10">  c, 
</span>
<span class="cmtt-10">  c] 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> The value of 
<span class="verb">
<span class="cmtt-10"> Count 
</span>
</span> clearly corresponds to the length of the blocks. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> So: DCGs are not just a tool for working with context free grammars. They are strictly more powerful than that, and (as we’ve just seen) part of the extra power comes from the use of extra arguments. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse33"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse32"> front 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch8"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent">
<a id="taillpn-htmlse32">
</a>
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse34"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse32"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse32"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=#taillpn-htmlse33"> tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch8"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<h3 class="sectionHead">
<span class="titlemark"> 8.2 
</span>
<a id="x53-760008.2">
</a> Extra Goals 
</h3>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Any DCG rule is really syntactic sugar for an ordinary Prolog rule. So it’s not really too surprising that we’re allowed to make use of extra arguments. Similarly, it shouldn’t come as too much of a surprise that we can call any Prolog predicate whatsoever from the right hand side of a DCG rule. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> The DCG of the previous section can, for example, be adapted to work with Prolog numbers (instead of the successor representation of numbers) by using calls to Prolog’s built-in arithmetic functionality. We simply count how many 
<span class="verb">
<span class="cmtt-10"> a 
</span>
</span> s, 
<span class="verb">
<span class="cmtt-10"> b 
</span>
</span> s, and 
<span class="verb">
<span class="cmtt-10"> c 
</span>
</span> s have been generated. Here’s the code: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb374">
<a id="x53-76002r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  s 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  ablock(Count),bblock(Count),cblock(Count). 
</span>
<br class="fancyvrb"/>
<a id="x53-76004r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x53-76006r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ablock(0) 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  []. 
</span>
<br class="fancyvrb"/>
<a id="x53-76008r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ablock(NewCount) 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [a],ablock(Count), 
</span>
<br class="fancyvrb"/>
<a id="x53-76010r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  {NewCount 
</span>
<span class="cmtt-10">  is 
</span>
<span class="cmtt-10">  Count 
</span>
<span class="cmtt-10">  + 
</span>
<span class="cmtt-10">  1}. 
</span>
<br class="fancyvrb"/>
<a id="x53-76012r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x53-76014r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  bblock(0) 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  []. 
</span>
<br class="fancyvrb"/>
<a id="x53-76016r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  bblock(NewCount) 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [b],bblock(Count), 
</span>
<br class="fancyvrb"/>
<a id="x53-76018r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  {NewCount 
</span>
<span class="cmtt-10">  is 
</span>
<span class="cmtt-10">  Count 
</span>
<span class="cmtt-10">  + 
</span>
<span class="cmtt-10">  1}. 
</span>
<br class="fancyvrb"/>
<a id="x53-76020r10">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x53-76022r11">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  cblock(0) 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  []. 
</span>
<br class="fancyvrb"/>
<a id="x53-76024r12">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  cblock(NewCount) 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [c],cblock(Count), 
</span>
<br class="fancyvrb"/>
<a id="x53-76026r13">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  {NewCount 
</span>
<span class="cmtt-10">  is 
</span>
<span class="cmtt-10">  Count 
</span>
<span class="cmtt-10">  + 
</span>
<span class="cmtt-10">  1}. 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> As this example suggests, extra goals can be written (anywhere) on the right side of a DCG rule, but must be placed between curly brackets. When Prolog encounters such curly brackets while translating a DCG into its internal representation, it just takes the extra goals specified between the curly brackets over into the translation. So, the second rule for the non-terminal 
<span class="verb">
<span class="cmtt-10"> ablock 
</span>
</span> above would be translated as follows: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb375">
<a id="x53-76028r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ablock(NewCount,A,B):- 
</span>
<br class="fancyvrb"/>
<a id="x53-76030r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ’C’(A, 
</span>
<span class="cmtt-10">  a, 
</span>
<span class="cmtt-10">  C), 
</span>
<br class="fancyvrb"/>
<a id="x53-76032r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ablock(Count, 
</span>
<span class="cmtt-10">  C, 
</span>
<span class="cmtt-10">  B), 
</span>
<br class="fancyvrb"/>
<a id="x53-76034r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  NewCount 
</span>
<span class="cmtt-10">  is 
</span>
<span class="cmtt-10">  Count 
</span>
<span class="cmtt-10">  + 
</span>
<span class="cmtt-10">  1. 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Incidentally, if you play around with this DCG, you will find that there are actually some problems with it. In contrast to the one that we saw in the last section, this new version only works correctly when used in the recognition mode. If you try to generate with it, it will at some point enter an infinite loop. We won’t bother to fix this problem here (apart from anything else, we find the earlier 
<span class="verb">
<span class="cmtt-10"> succ 
</span>
</span> based approach more elegant). 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> The possibility of adding arbitrary Prolog goals to the right hand side of DCG rules, makes DCGs very powerful (it means that we can do anything that we can do in plain Prolog). In general, however, this capability is not used much, which tends to suggest that the basic DCG notation is well designed. There is, however, one classic application for extra goals in computational linguistics: with the help of extra goals, we can neatly separate grammar rules and lexical information. Let’s see how. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent">
</p>
</div>
<div class="nb-cell html" name="htm1">
<h4 class="likesubsectionHead">
<a id="x53-770008.2">
</a> Separating rules and lexicon 
</h4>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> We are going to separate rules and lexicon. That is, we are going to eliminate all mention of individual words in our DCGs and instead record all the information about individual words separately in a lexicon. To see what is meant by this, let’s return to our basic grammar: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb376">
<a id="x53-77002r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  np 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  det,n. 
</span>
<br class="fancyvrb"/>
<a id="x53-77004r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x53-77006r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  vp 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  v,np. 
</span>
<br class="fancyvrb"/>
<a id="x53-77008r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  vp 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  v. 
</span>
<br class="fancyvrb"/>
<a id="x53-77010r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x53-77012r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  det 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [the]. 
</span>
<br class="fancyvrb"/>
<a id="x53-77014r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  det 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [a]. 
</span>
<br class="fancyvrb"/>
<a id="x53-77016r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x53-77018r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  n 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [woman]. 
</span>
<br class="fancyvrb"/>
<a id="x53-77020r10">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  n 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [man]. 
</span>
<br class="fancyvrb"/>
<a id="x53-77022r11">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x53-77024r12">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  v 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [shoots]. 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> We are now going to write a DCG that generates exactly the same language, but in which no rule mentions any individual word. All the information about individual words will be recorded separately. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Here is an example of a (very simple) lexicon. Lexical entries are encoded by using a predicate 
<span class="verb">
<span class="cmtt-10"> lex/2 
</span>
</span> whose first argument is a word, and whose second argument is a syntactic category. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb377">
<a id="x53-77026r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  lex(the,det). 
</span>
<br class="fancyvrb"/>
<a id="x53-77028r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  lex(a,det). 
</span>
<br class="fancyvrb"/>
<a id="x53-77030r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  lex(woman,n). 
</span>
<br class="fancyvrb"/>
<a id="x53-77032r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  lex(man,n). 
</span>
<br class="fancyvrb"/>
<a id="x53-77034r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  lex(shoots,v). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> And here is a simple grammar that could go with this lexicon. In essence it’s the same as the previous one. In fact, the only rules that have changed are those that mentioned specific words, that is, the 
<span class="verb">
<span class="cmtt-10"> det 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> n 
</span>
</span> , and 
<span class="verb">
<span class="cmtt-10"> v 
</span>
</span> rules. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb378">
<a id="x53-77036r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  np 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  det,n. 
</span>
<br class="fancyvrb"/>
<a id="x53-77038r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x53-77040r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  vp 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  v,np. 
</span>
<br class="fancyvrb"/>
<a id="x53-77042r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  vp 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  v. 
</span>
<br class="fancyvrb"/>
<a id="x53-77044r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x53-77046r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  det 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [Word],{lex(Word,det)}. 
</span>
<br class="fancyvrb"/>
<a id="x53-77048r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  n 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [Word],{lex(Word,n)}. 
</span>
<br class="fancyvrb"/>
<a id="x53-77050r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  v 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [Word],{lex(Word,v)}. 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Consider the new 
<span class="verb">
<span class="cmtt-10"> det 
</span>
</span> rule. This rule part says “a 
<span class="verb">
<span class="cmtt-10"> det 
</span>
</span> can consist of a list containing a single element 
<span class="verb">
<span class="cmtt-10"> Word 
</span>
</span> ” (note that 
<span class="verb">
<span class="cmtt-10"> Word 
</span>
</span> is a variable). Then the extra goal adds the crucial stipulation: “so long as 
<span class="verb">
<span class="cmtt-10"> Word 
</span>
</span> unifies with something that is listed in the lexicon as a determiner”. With our present lexicon, this means that 
<span class="verb">
<span class="cmtt-10"> Word 
</span>
</span> must be matched either with the word “a” or “the”. So this single rule replaces the two previous DCG rules for 
<span class="verb">
<span class="cmtt-10"> det 
</span>
</span> . 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> This explains the “how” of separating rules from lexicon, but it doesn’t explain the “why”. Is it really so important? Is this new way of writing DCGs really that much better? 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> The answer is an unequivocal yes! It’s 
<span class="cmti-10"> much 
</span> better, and for at least two reasons. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> The first reason is theoretical. Arguably rules should not mention specific lexical items. The purpose of rules is to list 
<span class="cmti-10"> general 
</span> syntactic facts, such as the fact that sentence can be made up of a noun phrase followed by a verb phrase. The rules for 
<span class="verb">
<span class="cmtt-10"> s 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> np 
</span>
</span> , and 
<span class="verb">
<span class="cmtt-10"> vp 
</span>
</span> describe such general syntactic facts, but the old rules for 
<span class="verb">
<span class="cmtt-10"> det 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> n 
</span>
</span> , and 
<span class="verb">
<span class="cmtt-10"> v 
</span>
</span> don’t. Instead, the old rules simply list particular facts: that “a” is a determiner, that “the” is a determiner, and so on. From theoretical perspective it is much neater to have a single rule that says “anything is a determiner (or a noun, or a verb, or any other grammatical category) if it is listed as such in the lexicon”. And this, of course, is precisely what our new DCG rules say. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> The second reason is more practical. One of the key lessons computational linguists have learnt over the last twenty or so years is that the lexicon is by far the most interesting, important (and expensive!) repository of linguistic knowledge. Bluntly, if you want to get to grips with natural language from a computational perspective, you need to know a lot of words, and you need to know a lot about them. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Now, our little lexicon, with its simple two-place 
<span class="verb">
<span class="cmtt-10"> lex 
</span>
</span> entries, is a toy. But a real lexicon is (most emphatically!) not. A real lexicon is likely to be very large (it may contain hundreds of thousands of words) and moreover, the information associated with each word is likely to be very rich. Our 
<span class="verb">
<span class="cmtt-10"> lex 
</span>
</span> entries give only the syntactical category of each word, but a real lexicon will give much more, such as information about its phonological, morphological, semantic, and pragmatic properties. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Because real lexicons are big and complex, from a software engineering perspective it is best to write simple grammars that have a simple, well-defined way, of pulling out the information they need from vast lexicons. That is, grammars should be thought of as separate entities which can access the information contained in lexicons. We can then use specialised mechanisms for efficiently storing the lexicon and retrieving data from it. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Our new DCG rules, though simple, illustrate the basic idea. The new rules really do just list general syntactic facts, and the extra goals act as an interface to our lexicon that lets the rules find exactly the information they need. Furthermore, we now take advantage of Prolog’s first argument indexing which makes looking up a word in the lexicon more efficient. First argument indexing is a technique for making Prolog’s knowledge base access more efficient. If in the query the first argument is instantiated it allows Prolog to ignore all clauses where the first argument’s functor and arity is different. This means, for example, that we can get all the possible categories of 
<span class="verb">
<span class="cmtt-10"> man 
</span>
</span> immediately without having to even look at the lexicon entries for all the other hundreds or thousands of words that we might have in our lexicon. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse34"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse32"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse32"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse33"> front 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch8"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent">
<a id="taillpn-htmlse33">
</a>
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse35"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse33"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse33"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=#taillpn-htmlse34"> tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch8"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<h3 class="sectionHead">
<span class="titlemark"> 8.3 
</span>
<a id="x54-780008.3">
</a> Concluding Remarks 
</h3>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> We now have a fairly useful picture of what DCGs are and what they can do for us. To conclude, let’s think about them from a somewhat higher level, from both a formal and a linguistic perspective. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> First the formal remarks. For the most part, we have presented DCGs as a simple tool for encoding context free grammars (or context free grammars enriched with features such as 
<span class="cmti-10"> subject 
</span> and 
<span class="cmti-10"> object 
</span> ). But DCGs go beyond this. We saw that it was possible to write a DCG that generated a language that was not context free. In fact, 
<span class="cmti-10"> any program whatsoever 
</span> can be written in DCG notation. That is, DCGs are a full-fledged programming language in their own right (they are Turing-complete, to use the proper terminology). And although DCGs are usually associated with linguistic applications, they can be useful for other purposes. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> How good are DCGs from a linguistic perspective? Well, mixed. At one stage (in the early 1980s) they were pretty much state of the art. They made it possible to code complex grammars in a clear way, and to explore the interplay of syntactic and semantic ideas. Certainly any history of parsing in computational linguistics would give DCGs an honourable mention. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Nonetheless, DCGs have drawbacks. For a start, their tendency to loop when the goal ordering is wrong (we saw an example in the previous chapter when we added a left-recursive rule for conjunctions) is annoying; we 
<span class="cmti-10"> don’t 
</span> want to think about such issues when writing serious grammars. Furthermore, while the ability to add extra arguments is useful, if we need to use lots of them (and for big grammars we will) it is a rather clumsy mechanism. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> It is important to notice, however, that these problems come up because of the way Prolog interprets DCG rules. They are not inherent to the DCG notation. Any of you who have studied parsing algorithms probably know that all top-down parsers loop on left-recursive grammars. So, it is not surprising that Prolog, which interprets DCGs in a top-down fashion, loops on the left-recursive grammar rule 
<span class="verb">
<span class="cmtt-10"> s 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  s 
</span>
<span class="cmtt-10">  conj 
</span>
<span class="cmtt-10">  s 
</span>
</span> . If we used a different strategy to interpret DCGs, for example a bottom-up strategy, we would not run into the same problem. Similarly, if we didn’t use Prolog’s built-in interpretation of DCGs, we could use the extra arguments for a more sophisticated specification of features, one that would facilitate the use of large feature structures. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Summing up, nowadays DCGs are probably best viewed as a nice notation for defining context free grammars enhanced with some features, a notation that (ignoring left-recursion) doubles as a parser/recogniser. That is, they are best viewed as a convenient tool for testing new grammatical ideas, or for implementing reasonably complex grammars for particular applications. DCGs are no longer state of the art, but they are useful. Even if you have never programmed before, simply by using what you have learned so far you are ready to start experimenting with reasonably sophisticated grammar writing. With a conventional programming language (such as C++ or Java) it simply wouldn’t be possible to reach this stage so soon. Things would be easier in functional languages (such as Lisp, Caml, or Haskell), but even so, it is doubtful whether beginners could do so much so early. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse35"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse33"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse33"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse34"> front 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch8"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent">
<a id="taillpn-htmlse34">
</a>
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse36"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse34"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse34"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=#taillpn-htmlse35"> tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch8"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<h3 class="sectionHead">
<span class="titlemark"> 8.4 
</span>
<a id="x55-790008.4">
</a> <strong>Exercise</strong>s 
</h3>
</div>
<div class="nb-cell html" name="htm1">
<div class="newtheorem">
<!--l. 824-->
<p class="noindent">
<span class="head">
<span class="cmbx-10"> <strong>Exercise</strong>
</span>
<span class="cmbx-10">  8.1 
</span>
</span>
<a id="x55-790011">
</a>
<span class="cmti-10"> Here’s our basic DCG: 
</span>
</p>
<div class="fancyvrb" id="fancyvrb379">
<a id="x55-79003r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  s 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  np,vp. 
</span>
<br class="fancyvrb"/>
<a id="x55-79005r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x55-79007r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  np 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  det,n. 
</span>
<br class="fancyvrb"/>
<a id="x55-79009r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x55-79011r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  vp 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  v,np. 
</span>
<br class="fancyvrb"/>
<a id="x55-79013r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  vp 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  v. 
</span>
<br class="fancyvrb"/>
<a id="x55-79015r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x55-79017r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  det 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [the]. 
</span>
<br class="fancyvrb"/>
<a id="x55-79019r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  det 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [a]. 
</span>
<br class="fancyvrb"/>
<a id="x55-79021r10">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x55-79023r11">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  n 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [woman]. 
</span>
<br class="fancyvrb"/>
<a id="x55-79025r12">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  n 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [man]. 
</span>
<br class="fancyvrb"/>
<a id="x55-79027r13">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  n 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [apple]. 
</span>
<br class="fancyvrb"/>
<a id="x55-79029r14">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  n 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [pear]. 
</span>
<br class="fancyvrb"/>
<a id="x55-79031r15">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x55-79033r16">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  v 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  [eats]. 
</span>
</div>
<!--l. 845-->
<p class="indent">
<span class="cmti-10"> Suppose we add the noun “men” (which is plural) and the verb “know”. Then we 
</span>
<span class="cmti-10"> would want a DCG which says that “The men eat” is ok, “The man eats” is ok, “The 
</span>
<span class="cmti-10"> men eats” is not ok, and “The man eat” is not ok. Change the DCG so that it 
</span>
<span class="cmti-10"> correctly handles these sentences. Use an extra argument to cope with the 
</span>
<span class="cmti-10"> singular/plural distinction. 
</span>
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<div class="newtheorem">
<!--l. 855-->
<p class="noindent">
<span class="head">
<span class="cmbx-10"> <strong>Exercise</strong>
</span>
<span class="cmbx-10">  8.2 
</span>
</span>
<a id="x55-790342">
</a>
<span class="cmti-10"> In the text, we only gave examples of DCG rules with one extra 
</span>
<span class="cmti-10"> argument, but in fact you can add as many extra arguments as you like. Here’s a 
</span>
<span class="cmti-10"> DCG rule with three extra arguments: 
</span>
</p>
<div class="fancyvrb" id="fancyvrb380">
<a id="x55-79036r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  kanga(V,R,Q) 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  roo(V,R),jumps(Q,Q),{marsupial(V,R,Q)}. 
</span>
</div>
<!--l. 863-->
<p class="noindent">
<span class="cmti-10"> Translate it into the form Prolog uses. 
</span>
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse36"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse34"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse34"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse35"> front 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch8"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent">
<a id="taillpn-htmlse35">
</a>
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse35"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse35"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=#taillpn-htmlse36"> tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch8"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<h3 class="sectionHead">
<span class="titlemark"> 8.5 
</span>
<a id="x56-800008.5">
</a> Practical Session 
</h3>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> The purpose of Practical Session 8 is to help you get familiar with DCGs that make use of additional arguments and goals. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> First some keyboard exercises: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<ol class="enumerate1">
<li class="enumerate" id="x56-80002x1"> Trace some examples using the DCG which uses extra arguments to handle the subject/object distinction, the DCG which produces parses, and the DCG which uses extra goals to separate lexicon and rules. Make sure you fully understand the way all three DCGs work. 
</li>
<li class="enumerate" id="x56-80004x2"> Carry out traces on the DCG for 
<span class="cmmi-10"> a 
</span>
<sup>
<span class="cmmi-7"> n 
</span>
</sup>
<span class="cmmi-10"> b 
</span>
<sup>
<span class="cmmi-7"> n 
</span>
</sup>
<span class="cmmi-10"> c 
</span>
<sup>
<span class="cmmi-7"> n 
</span>
</sup> given in the text (the one that gave the 
<span class="verb">
<span class="cmtt-10"> Count 
</span>
</span> variable the values 
<span class="verb">
<span class="cmtt-10"> 0 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> succ(0) 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> succ(succ(0)) 
</span>
</span> , and so on). Try cases where the three blocks of 
<span class="verb">
<span class="cmtt-10"> a 
</span>
</span> s, 
<span class="verb">
<span class="cmtt-10"> b 
</span>
</span> s, and 
<span class="verb">
<span class="cmtt-10"> c 
</span>
</span> s are indeed of the same length as well as queries where this is not the case. 
</li>
</ol>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Now for some programming. We suggest the following mini-project, which draws on all you have learned so far. Incidentally, in the Practical Session at the end of Chapter 12 we will be asking to extend this work even further, so do take this project seriously. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<ol class="enumerate1">
<li class="enumerate" id="x56-80006x1"> First, bring together all the things we have learned about DCGs for English into one DCG. In particular, in the text we saw how to use extra arguments to deal with the subject/object distinction, and in the exercises you were asked to use additional arguments to deal with the singular/plural distinction. Write a DCG which handles both. Moreover, write the DCG in such a way that it will produce parse trees, and makes use of a separate lexicon. 
</li>
<li class="enumerate" id="x56-80008x2"> Once you have done this, extend the DCG so that noun phrases can be modified by adjectives and simple prepositional phrases (that is, it should be able to handle noun phrases such as “the small frightened woman on the table” or “the big fat cow under the shower”). Then, further extend it so that the distinction between first, second, and third person pronouns is correctly handled (both in subject and object form). 
</li>
</ol>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse35"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse35"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse36"> front 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch8"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent">
<a id="taillpn-htmlse36">
</a>
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse38"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=#taillpn-htmlse37"> tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch9"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<h3 class="sectionHead">
<span class="titlemark"> 9.1 
</span>
<a id="x58-820009.1">
</a> Comparing Terms 
</h3>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Prolog contains an important predicate for comparing terms, namely the identity predicate 
<span class="verb">
<span class="cmtt-10"> ==/2 
</span>
</span> . As its name suggests, this tests whether two terms are identical. However 
<span class="verb">
<span class="cmtt-10"> ==/2 
</span>
</span> does 
<span class="cmti-10"> not 
</span> instantiate variables, thus it is not the same as the unification predicate 
<span class="verb">
<span class="cmtt-10"> =/2 
</span>
</span> . 
<a id="dx58-82001">
</a> Let’s look at some examples. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb381">
<a id="x58-82003r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  a 
</span>
<span class="cmtt-10">  == 
</span>
<span class="cmtt-10">  a. 
</span>
<br class="fancyvrb"/>
<a id="x58-82005r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x58-82007r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x58-82009r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  a 
</span>
<span class="cmtt-10">  == 
</span>
<span class="cmtt-10">  b. 
</span>
<br class="fancyvrb"/>
<a id="x58-82011r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  no 
</span>
<br class="fancyvrb"/>
<a id="x58-82013r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x58-82015r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  a 
</span>
<span class="cmtt-10">  == 
</span>
<span class="cmtt-10">  ’a’. 
</span>
<br class="fancyvrb"/>
<a id="x58-82017r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> The reason Prolog gives these answers should be clear, though pay attention to the last one. It tells us that, as far as Prolog is concerned, 
<span class="verb">
<span class="cmtt-10"> a 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> ’a’ 
</span>
</span> are the same object. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Now let’s look at examples involving variables, and explicitly compare 
<span class="verb">
<span class="cmtt-10"> == 
</span>
</span> with the unification predicate 
<span class="verb">
<span class="cmtt-10"> = 
</span>
</span> . 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb382">
<a id="x58-82019r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  X==Y. 
</span>
<br class="fancyvrb"/>
<a id="x58-82021r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  no 
</span>
<br class="fancyvrb"/>
<a id="x58-82023r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x58-82025r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  X=Y. 
</span>
<br class="fancyvrb"/>
<a id="x58-82027r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  _2808 
</span>
<br class="fancyvrb"/>
<a id="x58-82029r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Y 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  _2808 
</span>
<br class="fancyvrb"/>
<a id="x58-82031r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> In these queries, 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> Y 
</span>
</span> are 
<span class="cmti-10"> uninstantiated 
</span> variables; we haven’t given them any value. Thus the first answer is correct: 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> Y 
</span>
</span> are 
<span class="cmti-10"> not 
</span> identical objects, so the 
<span class="verb">
<span class="cmtt-10"> == 
</span>
</span> test fails. On the other hand, the use of 
<span class="verb">
<span class="cmtt-10"> = 
</span>
</span> succeeds, for 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> Y 
</span>
</span> can be unified. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Let’s now look at queries involving 
<span class="cmti-10"> instantiated 
</span> variables: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb383">
<a id="x58-82033r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  a=X, 
</span>
<span class="cmtt-10">  a==X. 
</span>
<br class="fancyvrb"/>
<a id="x58-82035r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x58-82037r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  a 
</span>
<br class="fancyvrb"/>
<a id="x58-82039r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> The first conjunct, 
<span class="verb">
<span class="cmtt-10"> a=X 
</span>
</span> , binds 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> to 
<span class="verb">
<span class="cmtt-10"> a 
</span>
</span> . Thus when 
<span class="verb">
<span class="cmtt-10"> a==X 
</span>
</span> is evaluated, the left hand side and right hand sides are exactly the same Prolog object, and 
<span class="verb">
<span class="cmtt-10"> a==X 
</span>
</span> succeeds. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> A similar thing happens in the following query: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb384">
<a id="x58-82041r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  X=Y, 
</span>
<span class="cmtt-10">  X==Y. 
</span>
<br class="fancyvrb"/>
<a id="x58-82043r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x58-82045r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  _4500 
</span>
<br class="fancyvrb"/>
<a id="x58-82047r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Y 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  _4500 
</span>
<br class="fancyvrb"/>
<a id="x58-82049r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> The conjunct 
<span class="verb">
<span class="cmtt-10"> X=Y 
</span>
</span> first unifies the variables 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> Y 
</span>
</span> . Thus when the second conjunct 
<span class="verb">
<span class="cmtt-10"> X==Y 
</span>
</span> is evaluated, the two variables are exactly the same Prolog object, and the second conjunct succeeds as well. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> It should now be clear that 
<span class="verb">
<span class="cmtt-10"> = 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> == 
</span>
</span> are different, nonetheless there is an important relation between them: 
<span class="verb">
<span class="cmtt-10"> == 
</span>
</span> can be viewed as a stronger test for equality between terms than 
<span class="verb">
<span class="cmtt-10"> = 
</span>
</span> . That is, if 
<span class="verb">
<span class="cmtt-10"> term1 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> term 
</span>
</span> are Prolog terms, and the query 
<span class="verb">
<span class="cmtt-10"> term1 
</span>
<span class="cmtt-10">  == 
</span>
<span class="cmtt-10">  term2 
</span>
</span> succeeds, then the query 
<span class="verb">
<span class="cmtt-10"> term1 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  term2 
</span>
</span> will succeed too. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Another predicate worth knowing about is 
<span class="verb">
<span class="cmtt-10"> \== 
</span>
</span> . This predicate is defined so that it succeeds in precisely those cases where 
<span class="verb">
<span class="cmtt-10"> == 
</span>
</span> fails. That is, it succeeds whenever two terms are 
<span class="cmti-10"> not 
</span>
<a id="dx58-82050">
</a> identical, and fails otherwise. For example: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb385">
<a id="x58-82052r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  a 
</span>
<span class="cmtt-10">  \== 
</span>
<span class="cmtt-10">  a. 
</span>
<br class="fancyvrb"/>
<a id="x58-82054r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  no 
</span>
<br class="fancyvrb"/>
<a id="x58-82056r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x58-82058r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  a 
</span>
<span class="cmtt-10">  \== 
</span>
<span class="cmtt-10">  b. 
</span>
<br class="fancyvrb"/>
<a id="x58-82060r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x58-82062r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x58-82064r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  a 
</span>
<span class="cmtt-10">  \== 
</span>
<span class="cmtt-10">  ’a’. 
</span>
<br class="fancyvrb"/>
<a id="x58-82066r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  no 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> These answers should be understandable: they are simply the opposite of the answers we got above when we used 
<span class="verb">
<span class="cmtt-10"> == 
</span>
</span> . Now consider: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb386">
<a id="x58-82068r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  \== 
</span>
<span class="cmtt-10">  a. 
</span>
<br class="fancyvrb"/>
<a id="x58-82070r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x58-82072r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  _3719 
</span>
<br class="fancyvrb"/>
<a id="x58-82074r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Why this response? Well, we know from above that the query 
<span class="verb">
<span class="cmtt-10"> X==a 
</span>
</span>
<span class="cmti-10"> fails 
</span> (recall the way 
<span class="verb">
<span class="cmtt-10"> == 
</span>
</span> treats uninstantiated variables). Thus the query 
<span class="verb">
<span class="cmtt-10"> X\==a 
</span>
</span> should 
<span class="cmti-10"> succeed 
</span> , and it does. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Similarly: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb387">
<a id="x58-82076r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  \== 
</span>
<span class="cmtt-10">  Y. 
</span>
<br class="fancyvrb"/>
<a id="x58-82078r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x58-82080r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  _798 
</span>
<br class="fancyvrb"/>
<a id="x58-82082r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Y 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  _799 
</span>
<br class="fancyvrb"/>
<a id="x58-82084r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Again, we know from above that the query 
<span class="verb">
<span class="cmtt-10"> X==Y 
</span>
</span> fails, thus the query 
<span class="verb">
<span class="cmtt-10"> X\==Y 
</span>
</span> succeeds. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse38"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse37"> front 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch9"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent">
<a id="taillpn-htmlse37">
</a>
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse39"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse37"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse37"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=#taillpn-htmlse38"> tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch9"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<h3 class="sectionHead">
<span class="titlemark"> 9.2 
</span>
<a id="x59-830009.2">
</a> Terms with a Special Notation 
</h3>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Sometimes terms look different to us, but Prolog regards them as identical. For example, when we compare 
<span class="verb">
<span class="cmtt-10"> a 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> ’a’ 
</span>
</span> , we see two distinct strings of symbols, but Prolog treats them as the same. And in fact there are many other cases where Prolog regards two strings as being exactly the same term. Why? Because it makes programming more pleasant. Sometimes the notation Prolog likes isn’t as user-friendly as the notation we would choose. So it is nice to be able to write programs in the notation we find natural, and to let Prolog run them in the notation it prefers. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent">
</p>
</div>
<div class="nb-cell html" name="htm1">
<h4 class="likesubsectionHead">
<a id="x59-840009.2">
</a> Arithmetic terms 
</h4>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> The arithmetic predicates introduced earlier are a good example of this. As was mentioned in Chapter  
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch5"> 5 
<!--tex4ht:ref: CHAPTER5 -->
</a> , 
<span class="verb">
<span class="cmtt-10"> + 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> - 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> * 
</span>
</span> , and 
<span class="verb">
<span class="cmtt-10"> / 
</span>
</span> are 
<span class="cmti-10"> functors 
</span> , and arithmetic expressions such as 
<span class="verb">
<span class="cmtt-10">  2+3 
</span>
</span> are 
<span class="cmti-10"> terms 
</span> . And this is not an analogy. Apart from the fact that it can evaluate them with the help of the 
<span class="verb">
<span class="cmtt-10"> is/2 
</span>
</span> predicate, Prolog views strings of symbols such as 
<span class="verb">
<span class="cmtt-10"> 2+3 
</span>
</span> as being identical with ordinary complex terms. The following queries make this clear: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb388">
<a id="x59-84002r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  2+3 
</span>
<span class="cmtt-10">  == 
</span>
<span class="cmtt-10">  +(2,3). 
</span>
<br class="fancyvrb"/>
<a id="x59-84004r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x59-84006r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x59-84008r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  +(2,3) 
</span>
<span class="cmtt-10">  == 
</span>
<span class="cmtt-10">  2+3. 
</span>
<br class="fancyvrb"/>
<a id="x59-84010r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x59-84012r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x59-84014r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  2-3 
</span>
<span class="cmtt-10">  == 
</span>
<span class="cmtt-10">  -(2,3). 
</span>
<br class="fancyvrb"/>
<a id="x59-84016r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x59-84018r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x59-84020r10">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  *(2,3) 
</span>
<span class="cmtt-10">  == 
</span>
<span class="cmtt-10">  2*3. 
</span>
<br class="fancyvrb"/>
<a id="x59-84022r11">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x59-84024r12">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x59-84026r13">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  2*(7+2) 
</span>
<span class="cmtt-10">  == 
</span>
<span class="cmtt-10">  *(2,+(7,2)). 
</span>
<br class="fancyvrb"/>
<a id="x59-84028r14">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> In short, the familiar arithmetic notation is there for 
<span class="cmti-10"> our 
</span> convenience. Prolog doesn’t regard it as different from the usual term notation. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Similar remarks to the arithmetic comparison predicates 
<span class="verb">
<span class="cmtt-10"> &lt; 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> =&lt; 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> =:= 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> =\= 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> &gt; 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> &gt;= 
</span>
</span> : 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb389">
<a id="x59-84030r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  (2 
</span>
<span class="cmtt-10">  &lt; 
</span>
<span class="cmtt-10">  3) 
</span>
<span class="cmtt-10">  == 
</span>
<span class="cmtt-10">  &lt;(2,3). 
</span>
<br class="fancyvrb"/>
<a id="x59-84032r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x59-84034r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x59-84036r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  (2 
</span>
<span class="cmtt-10">  =&lt; 
</span>
<span class="cmtt-10">  3) 
</span>
<span class="cmtt-10">  == 
</span>
<span class="cmtt-10">  =&lt;(2,3). 
</span>
<br class="fancyvrb"/>
<a id="x59-84038r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x59-84040r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x59-84042r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  (2 
</span>
<span class="cmtt-10">  =:= 
</span>
<span class="cmtt-10">  3) 
</span>
<span class="cmtt-10">  == 
</span>
<span class="cmtt-10">  =:=(2,3). 
</span>
<br class="fancyvrb"/>
<a id="x59-84044r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x59-84046r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x59-84048r10">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  (2 
</span>
<span class="cmtt-10">  =\= 
</span>
<span class="cmtt-10">  3) 
</span>
<span class="cmtt-10">  == 
</span>
<span class="cmtt-10">  =\=(2,3). 
</span>
<br class="fancyvrb"/>
<a id="x59-84050r11">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x59-84052r12">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x59-84054r13">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  (2 
</span>
<span class="cmtt-10">  &gt; 
</span>
<span class="cmtt-10">  3) 
</span>
<span class="cmtt-10">  == 
</span>
<span class="cmtt-10">  &gt;(2,3). 
</span>
<br class="fancyvrb"/>
<a id="x59-84056r14">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x59-84058r15">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x59-84060r16">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  (2 
</span>
<span class="cmtt-10">  &gt;= 
</span>
<span class="cmtt-10">  3) 
</span>
<span class="cmtt-10">  == 
</span>
<span class="cmtt-10">  &gt;=(2,3). 
</span>
<br class="fancyvrb"/>
<a id="x59-84062r17">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> These example show why it’s nice to have the user-friendly notation (would you want to have to work with expressions like 
<span class="verb">
<span class="cmtt-10"> =:=(2,3) 
</span>
</span> ?). Note, by the way, that we enclosed the left hand arguments in brackets. For example, we didn’t ask 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb390">
<a id="x59-84064r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  2 
</span>
<span class="cmtt-10">  =:= 
</span>
<span class="cmtt-10">  3 
</span>
<span class="cmtt-10">  == 
</span>
<span class="cmtt-10">  =:=(2,3). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> we asked 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb391">
<a id="x59-84066r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  (2 
</span>
<span class="cmtt-10">  =:= 
</span>
<span class="cmtt-10">  3) 
</span>
<span class="cmtt-10">  == 
</span>
<span class="cmtt-10">  =:=(2,3). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Why? Well, Prolog finds the query 
<span class="verb">
<span class="cmtt-10"> 2 
</span>
<span class="cmtt-10">  =:= 
</span>
<span class="cmtt-10">  3 
</span>
<span class="cmtt-10">  == 
</span>
<span class="cmtt-10">  =:=(2,3) 
</span>
</span> confusing, and let’s face it, can you blame it? It’s not sure whether to bracket this expression as 
<span class="verb">
<span class="cmtt-10"> (2 
</span>
<span class="cmtt-10">  =:= 
</span>
<span class="cmtt-10">  3) 
</span>
<span class="cmtt-10">  == 
</span>
<span class="cmtt-10">  =:=(2,3) 
</span>
</span> (which is what we want), or as 
<span class="verb">
<span class="cmtt-10"> 2 
</span>
<span class="cmtt-10">  =:= 
</span>
<span class="cmtt-10">  (3 
</span>
<span class="cmtt-10">  == 
</span>
<span class="cmtt-10">  =:=(2,3)) 
</span>
</span> . So we need to state the grouping explicitly. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> One final remark. We have now introduced three rather similar looking symbols, namely 
<span class="verb">
<span class="cmtt-10"> = 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> == 
</span>
</span> , and 
<span class="verb">
<span class="cmtt-10"> =:= 
</span>
</span> (and indeed, there are also 
<span class="verb">
<span class="cmtt-10"> \= 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> \== 
</span>
</span> , and 
<span class="verb">
<span class="cmtt-10"> =\= 
</span>
</span> ). Here’s a summary: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="center">
<!--l. 216-->
<p class="noindent">
</p>
<div class="tabular">
<table cellpadding="0" cellspacing="0" class="tabular" id="TBL-9">
<colgroup id="TBL-9-1g">
<col id="TBL-9-1"/>
<col id="TBL-9-2"/>
</colgroup>
<tr id="TBL-9-1-" style="vertical-align:baseline;">
<td class="td11" id="TBL-9-1-1" style="white-space:nowrap; text-align:left;">
<span class="verb">
<span class="cmtt-10"> = 
</span>
</span>
</td>
<td class="td11" id="TBL-9-1-2" style="white-space:nowrap; text-align:left;"> The unification predicate. 
</td>
</tr>
<tr id="TBL-9-2-" style="vertical-align:baseline;">
<td class="td11" id="TBL-9-2-1" style="white-space:nowrap; text-align:left;">
</td>
<td class="td11" id="TBL-9-2-2" style="white-space:nowrap; text-align:left;"> Succeeds if it can unify its arguments, fails otherwise. 
</td>
</tr>
<tr id="TBL-9-3-" style="vertical-align:baseline;">
<td class="td11" id="TBL-9-3-1" style="white-space:nowrap; text-align:left;">
<span class="verb">
<span class="cmtt-10"> \= 
</span>
</span>
</td>
<td class="td11" id="TBL-9-3-2" style="white-space:nowrap; text-align:left;"> The negation of the unification predicate. 
</td>
</tr>
<tr id="TBL-9-4-" style="vertical-align:baseline;">
<td class="td11" id="TBL-9-4-1" style="white-space:nowrap; text-align:left;">
</td>
<td class="td11" id="TBL-9-4-2" style="white-space:nowrap; text-align:left;"> Succeeds if 
<span class="verb">
<span class="cmtt-10"> = 
</span>
</span> fails, and vice-versa. 
</td>
</tr>
<tr id="TBL-9-5-" style="vertical-align:baseline;">
<td class="td11" id="TBL-9-5-1" style="white-space:nowrap; text-align:left;">
<span class="verb">
<span class="cmtt-10"> == 
</span>
</span>
</td>
<td class="td11" id="TBL-9-5-2" style="white-space:nowrap; text-align:left;"> The identity predicate. 
</td>
</tr>
<tr id="TBL-9-6-" style="vertical-align:baseline;">
<td class="td11" id="TBL-9-6-1" style="white-space:nowrap; text-align:left;">
</td>
<td class="td11" id="TBL-9-6-2" style="white-space:nowrap; text-align:left;"> Succeeds if its arguments are identical, fails otherwise. 
</td>
</tr>
<tr id="TBL-9-7-" style="vertical-align:baseline;">
<td class="td11" id="TBL-9-7-1" style="white-space:nowrap; text-align:left;">
<span class="verb">
<span class="cmtt-10"> \== 
</span>
</span>
</td>
<td class="td11" id="TBL-9-7-2" style="white-space:nowrap; text-align:left;"> The negation of the identity predicate. 
</td>
</tr>
<tr id="TBL-9-8-" style="vertical-align:baseline;">
<td class="td11" id="TBL-9-8-1" style="white-space:nowrap; text-align:left;">
</td>
<td class="td11" id="TBL-9-8-2" style="white-space:nowrap; text-align:left;"> Succeeds if 
<span class="verb">
<span class="cmtt-10"> == 
</span>
</span> fails, and vice-versa. 
</td>
</tr>
<tr id="TBL-9-9-" style="vertical-align:baseline;">
<td class="td11" id="TBL-9-9-1" style="white-space:nowrap; text-align:left;">
<span class="verb">
<span class="cmtt-10"> =:= 
</span>
</span>
</td>
<td class="td11" id="TBL-9-9-2" style="white-space:nowrap; text-align:left;"> The arithmetic equality predicate. 
</td>
</tr>
<tr id="TBL-9-10-" style="vertical-align:baseline;">
<td class="td11" id="TBL-9-10-1" style="white-space:nowrap; text-align:left;">
</td>
<td class="td11" id="TBL-9-10-2" style="white-space:nowrap; text-align:left;"> Succeeds if its arguments evaluate to the same integer. 
</td>
</tr>
<tr id="TBL-9-11-" style="vertical-align:baseline;">
<td class="td11" id="TBL-9-11-1" style="white-space:nowrap; text-align:left;">
<span class="verb">
<span class="cmtt-10"> =\= 
</span>
</span>
</td>
<td class="td11" id="TBL-9-11-2" style="white-space:nowrap; text-align:left;"> The arithmetic inequality predicate. 
</td>
</tr>
<tr id="TBL-9-12-" style="vertical-align:baseline;">
<td class="td11" id="TBL-9-12-1" style="white-space:nowrap; text-align:left;">
</td>
<td class="td11" id="TBL-9-12-2" style="white-space:nowrap; text-align:left;"> Succeeds if its arguments evaluate to different integers. 
</td>
</tr>
</table>
</div>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent">
</p>
</div>
<div class="nb-cell html" name="htm1">
<h4 class="likesubsectionHead">
<a id="x59-850009.2">
</a> Lists as terms 
</h4>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Lists are another good example of Prolog working with one internal representation, while giving us another, more user-friendly, notation to work with. Let’s start with a quick look at the user-friendly list notation it provides (that is, the square brackets 
<span class="verb">
<span class="cmtt-10"> [ 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> ] 
</span>
</span> ). In fact, because Prolog also offers the 
<span class="verb">
<span class="cmtt-10"> | 
</span>
</span> constructor, there are many ways of writing the same list, even at the user-friendly level: 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb392">
<a id="x59-85002r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  [a,b,c,d] 
</span>
<span class="cmtt-10">  == 
</span>
<span class="cmtt-10">  [a|[b,c,d]]. 
</span>
<br class="fancyvrb"/>
<a id="x59-85004r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x59-85006r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x59-85008r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  [a,b,c,d] 
</span>
<span class="cmtt-10">  == 
</span>
<span class="cmtt-10">  [a,b|[c,d]]. 
</span>
<br class="fancyvrb"/>
<a id="x59-85010r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x59-85012r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x59-85014r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  [a,b,c,d] 
</span>
<span class="cmtt-10">  == 
</span>
<span class="cmtt-10">  [a,b,c|[d]]. 
</span>
<br class="fancyvrb"/>
<a id="x59-85016r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x59-85018r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x59-85020r10">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  [a,b,c,d] 
</span>
<span class="cmtt-10">  == 
</span>
<span class="cmtt-10">  [a,b,c,d|[]]. 
</span>
<br class="fancyvrb"/>
<a id="x59-85022r11">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> But how does Prolog view lists internally? In fact, it sees lists as terms which are built out of two special terms, namely 
<span class="verb">
<span class="cmtt-10"> [] 
</span>
</span> , which represents the empty list, and “ 
<span class="verb">
<span class="cmtt-10"> . 
</span>
</span> ” (the full-stop), a functor of 
<a id="dx59-85023">
</a> arity 2 which is used to build non-empty lists. The terms 
<span class="verb">
<span class="cmtt-10"> [] 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> . 
</span>
</span> are called list constructors. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> This is how these constructors are used to build lists. Needless to say, the definition is recursive: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<ul class="itemize1">
<li class="itemize"> The empty list is the term [ 
<span class="cmmi-10">   
</span> ]. It has length 0. 
</li>
<li class="itemize"> A non-empty list is any term of the form 
<span class="cmmi-10"> . 
</span> ( 
<span class="cmti-10"> term 
</span>
<span class="cmmi-10"> , 
</span>
<span class="cmti-10"> list 
</span> ), where 
<span class="cmti-10"> term 
</span> is any Prolog term, and 
<span class="cmti-10"> list 
</span> is any list. If 
<span class="cmti-10"> list 
</span> has length 
<span class="cmmi-10"> n 
</span> , then 
<span class="cmmi-10"> . 
</span> ( 
<span class="cmti-10"> term 
</span>
<span class="cmmi-10"> , 
</span>
<span class="cmti-10"> list 
</span> ) has length 
<span class="cmmi-10"> n 
</span> + 1. 
</li>
</ul>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Let’s make sure we fully understand this definition by working our way through a few examples. 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb393">
<a id="x59-85025r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  .(a,[]) 
</span>
<span class="cmtt-10">  == 
</span>
<span class="cmtt-10">  [a]. 
</span>
<br class="fancyvrb"/>
<a id="x59-85027r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x59-85029r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x59-85031r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  .(f(d,e),[]) 
</span>
<span class="cmtt-10">  == 
</span>
<span class="cmtt-10">  [f(d,e)]. 
</span>
<br class="fancyvrb"/>
<a id="x59-85033r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x59-85035r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x59-85037r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  .(a,.(b,[])) 
</span>
<span class="cmtt-10">  == 
</span>
<span class="cmtt-10">  [a,b]. 
</span>
<br class="fancyvrb"/>
<a id="x59-85039r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x59-85041r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x59-85043r10">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  .(a,.(b,.(f(d,e),[]))) 
</span>
<span class="cmtt-10">  == 
</span>
<span class="cmtt-10">  [a,b,f(d,e)]. 
</span>
<br class="fancyvrb"/>
<a id="x59-85045r11">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x59-85047r12">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x59-85049r13">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  .(.(a,[]),[]) 
</span>
<span class="cmtt-10">  == 
</span>
<span class="cmtt-10">  [[a]]. 
</span>
<br class="fancyvrb"/>
<a id="x59-85051r14">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x59-85053r15">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x59-85055r16">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  .(.(.(a,[]),[]),[]) 
</span>
<span class="cmtt-10">  == 
</span>
<span class="cmtt-10">  [[[a]]]. 
</span>
<br class="fancyvrb"/>
<a id="x59-85057r17">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x59-85059r18">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x59-85061r19">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  .(.(a,.(b,[])),[]) 
</span>
<span class="cmtt-10">  == 
</span>
<span class="cmtt-10">  [[a,b]]. 
</span>
<br class="fancyvrb"/>
<a id="x59-85063r20">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x59-85065r21">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x59-85067r22">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  .(.(a,.(b,[])),.(c,[])) 
</span>
<span class="cmtt-10">  == 
</span>
<span class="cmtt-10">  [[a,b],c]. 
</span>
<br class="fancyvrb"/>
<a id="x59-85069r23">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x59-85071r24">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x59-85073r25">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  .(.(a,[]),.(b,.(c,[]))) 
</span>
<span class="cmtt-10">  == 
</span>
<span class="cmtt-10">  [[a],b,c]. 
</span>
<br class="fancyvrb"/>
<a id="x59-85075r26">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x59-85077r27">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x59-85079r28">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  .(.(a,[]),.(.(b,.(c,[])),[])) 
</span>
<span class="cmtt-10">  == 
</span>
<span class="cmtt-10">  [[a],[b,c]]. 
</span>
<br class="fancyvrb"/>
<a id="x59-85081r29">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Prolog’s internal notation for lists is not as user-friendly as the use of the square bracket notation. But it’s not as bad as it seems at first sight. In fact, it works similarly to the 
<span class="verb">
<span class="cmtt-10"> | 
</span>
</span> notation. It represents a list in two parts: its first element (the head), and a list representing the rest of the list (the tail). The trick is to read these terms as 
<span class="cmti-10"> trees 
</span> . The internal nodes of this tree are labeled with 
<span class="verb">
<span class="cmtt-10"> . 
</span>
</span> and all have two daughter nodes. The subtree under the left daughter represents the first element of the list and the subtree under the right daughter represents the rest of the list. For example, the tree representation of 
<span class="verb">
<span class="cmtt-10"> .(a,.(.(b,.(c,[])),.(d,[]))) 
</span>
</span> , that is, 
<span class="verb">
<span class="cmtt-10"> [a, 
</span>
<span class="cmtt-10">  [b,c], 
</span>
<span class="cmtt-10">  d] 
</span>
</span> , looks like this: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="center">
<!--l. 332-->
<p class="noindent">
</p>
<!--l. 333-->
<p class="noindent">
<img alt="*Pic not found*" src="html/listtree.eps.png"/>
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> One final remark. Prolog is very polite. Not only are you free to talk to it in the user-friendly notation, it will reply in the same way: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb394">
<a id="x59-85083r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  .(f(d,e),[]) 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  Y. 
</span>
<br class="fancyvrb"/>
<a id="x59-85085r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x59-85087r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Y 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [f(d,e)] 
</span>
<br class="fancyvrb"/>
<a id="x59-85089r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x59-85091r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x59-85093r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x59-85095r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  .(a,.(b,[])) 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  X, 
</span>
<span class="cmtt-10">  Z= 
</span>
<span class="cmtt-10">  .(.(c,[]),[]), 
</span>
<span class="cmtt-10">  W 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [1,2,X]. 
</span>
<br class="fancyvrb"/>
<a id="x59-85097r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x59-85099r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [a,b] 
</span>
<br class="fancyvrb"/>
<a id="x59-85101r10">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Z 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [[c]] 
</span>
<br class="fancyvrb"/>
<a id="x59-85103r11">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  W 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [1,2,[a,b]] 
</span>
<br class="fancyvrb"/>
<a id="x59-85105r12">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse39"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse37"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse37"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse38"> front 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch9"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent">
<a id="taillpn-htmlse38">
</a>
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse40"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse38"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse38"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=#taillpn-htmlse39"> tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch9"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<h3 class="sectionHead">
<span class="titlemark"> 9.3 
</span>
<a id="x60-860009.3">
</a> Examining Terms 
</h3>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> In this section, we will learn about some built-in predicates that let us examine terms more closely. First, we will look at predicates that test whether their arguments are terms of a certain type (for example, whether they are atoms or numbers). Then we will introduce predicates that tell us something about the internal structure of complex terms. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent">
</p>
</div>
<div class="nb-cell html" name="htm1">
<h4 class="likesubsectionHead">
<a id="x60-870009.3">
</a> Types of Terms 
</h4>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Remember what we said about Prolog terms in Chapter  
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch1"> 1 
<!--tex4ht:ref: CHAPTER1 -->
</a> : there are four different kinds, namely variables, atoms, numbers and complex terms. Furthermore, atoms and numbers are grouped together under the name constants, and constants and variables constitute the simple terms. The following tree diagram summarises this: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="center">
<!--l. 374-->
<p class="noindent">
</p>
<!--l. 381-->
<p class="noindent"> terms simple terms variables constants atoms numbers complex terms 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Sometimes it is useful to be able to determine what type a given term is. You might, for example, want to write a predicate that has to deal with different kinds of terms, but has to treat them in different ways. Prolog provides several built-in predicates that test whether a given term is of a certain type: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="center">
<!--l. 392-->
<p class="noindent">
</p>
<div class="tabular">
<table cellpadding="0" cellspacing="0" class="tabular" id="TBL-10">
<colgroup id="TBL-10-1g">
<col id="TBL-10-1"/>
<col id="TBL-10-2"/>
</colgroup>
<tr id="TBL-10-1-" style="vertical-align:baseline;">
<td class="td11" id="TBL-10-1-1" style="white-space:nowrap; text-align:left;">
<span class="verb">
<span class="cmtt-10"> atom/1 
</span>
</span>
</td>
<td class="td11" id="TBL-10-1-2" style="white-space:nowrap; text-align:left;"> Is the argument an atom? 
</td>
</tr>
<tr id="TBL-10-2-" style="vertical-align:baseline;">
<td class="td11" id="TBL-10-2-1" style="white-space:nowrap; text-align:left;">
<a id="dx60-87001">
</a>
<span class="verb">
<span class="cmtt-10"> integer/1 
</span>
</span>
</td>
<td class="td11" id="TBL-10-2-2" style="white-space:nowrap; text-align:left;"> Is the argument an integer? 
</td>
</tr>
<tr id="TBL-10-3-" style="vertical-align:baseline;">
<td class="td11" id="TBL-10-3-1" style="white-space:nowrap; text-align:left;">
<a id="dx60-87002">
</a>
<span class="verb">
<span class="cmtt-10"> float/1 
</span>
</span>
</td>
<td class="td11" id="TBL-10-3-2" style="white-space:nowrap; text-align:left;"> Is the argument a floating point number? 
</td>
</tr>
<tr id="TBL-10-4-" style="vertical-align:baseline;">
<td class="td11" id="TBL-10-4-1" style="white-space:nowrap; text-align:left;">
<a id="dx60-87003">
</a>
<span class="verb">
<span class="cmtt-10"> number/1 
</span>
</span>
</td>
<td class="td11" id="TBL-10-4-2" style="white-space:nowrap; text-align:left;"> Is the argument an integer or a floating point number? 
</td>
</tr>
<tr id="TBL-10-5-" style="vertical-align:baseline;">
<td class="td11" id="TBL-10-5-1" style="white-space:nowrap; text-align:left;">
<a id="dx60-87004">
</a>
<span class="verb">
<span class="cmtt-10"> atomic/1 
</span>
</span>
</td>
<td class="td11" id="TBL-10-5-2" style="white-space:nowrap; text-align:left;"> Is the argument a constant? 
</td>
</tr>
<tr id="TBL-10-6-" style="vertical-align:baseline;">
<td class="td11" id="TBL-10-6-1" style="white-space:nowrap; text-align:left;">
<a id="dx60-87005">
</a>
<span class="verb">
<span class="cmtt-10"> var/1 
</span>
</span>
</td>
<td class="td11" id="TBL-10-6-2" style="white-space:nowrap; text-align:left;"> Is the argument an uninstantiated variable? 
</td>
</tr>
<tr id="TBL-10-7-" style="vertical-align:baseline;">
<td class="td11" id="TBL-10-7-1" style="white-space:nowrap; text-align:left;">
<a id="dx60-87006">
</a>
<span class="verb">
<span class="cmtt-10"> nonvar/1 
</span>
</span>
</td>
<td class="td11" id="TBL-10-7-2" style="white-space:nowrap; text-align:left;"> Is the argument an instantiated variable or another term that is not an 
<span class="cmti-10"> un 
</span> instantiated variable? 
<a id="dx60-87007">
</a>
</td>
</tr>
</table>
</div>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Let’s see how they behave. 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb395">
<a id="x60-87009r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  atom(a). 
</span>
<br class="fancyvrb"/>
<a id="x60-87011r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x60-87013r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x60-87015r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  atom(7). 
</span>
<br class="fancyvrb"/>
<a id="x60-87017r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  no 
</span>
<br class="fancyvrb"/>
<a id="x60-87019r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x60-87021r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  atom(loves(vincent,mia)). 
</span>
<br class="fancyvrb"/>
<a id="x60-87023r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  no 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> These three examples behave exactly as we would expect. But what happens, when we call 
<span class="verb">
<span class="cmtt-10"> atom/1 
</span>
</span> with a variable as argument? 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb396">
<a id="x60-87025r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  atom(X). 
</span>
<br class="fancyvrb"/>
<a id="x60-87027r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  no 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> This makes sense, since an uninstantiated variable is not an atom. However if we instantiate 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> with an atom first and then ask 
<span class="verb">
<span class="cmtt-10"> atom(X) 
</span>
</span> , Prolog answers yes. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb397">
<a id="x60-87029r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  a, 
</span>
<span class="cmtt-10">  atom(X). 
</span>
<br class="fancyvrb"/>
<a id="x60-87031r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  a 
</span>
<br class="fancyvrb"/>
<a id="x60-87033r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> But it is important that the instantiation is done 
<span class="cmti-10"> before 
</span> the test: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb398">
<a id="x60-87035r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  atom(X), 
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  a. 
</span>
<br class="fancyvrb"/>
<a id="x60-87037r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  no 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> The predicates 
<span class="verb">
<span class="cmtt-10"> integer/1 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> float/1 
</span>
</span> behave analogously. Try some examples. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> The predicates 
<span class="verb">
<span class="cmtt-10"> number/1 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> atomic/1 
</span>
</span> behave disjunctively. First, 
<span class="verb">
<span class="cmtt-10"> number/1 
</span>
</span> tests whether a given term is either an integer or a float: that is, it will evaluate to true whenever either 
<span class="verb">
<span class="cmtt-10"> integer/1 
</span>
</span> or 
<span class="verb">
<span class="cmtt-10"> float/1 
</span>
</span> evaluate to true and it fails when both of them fail. As for 
<span class="verb">
<span class="cmtt-10"> atomic/1 
</span>
</span> , this tests whether a given term is a constant, that is, whether it is either an atom or a number. So 
<span class="verb">
<span class="cmtt-10"> atomic/1 
</span>
</span> will evaluate to true whenever either 
<span class="verb">
<span class="cmtt-10"> atom/1 
</span>
</span> or 
<span class="verb">
<span class="cmtt-10"> number/1 
</span>
</span> evaluate to true and it fails when both fail. 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb399">
<a id="x60-87039r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  atomic(mia). 
</span>
<br class="fancyvrb"/>
<a id="x60-87041r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x60-87043r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x60-87045r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  atomic(8). 
</span>
<br class="fancyvrb"/>
<a id="x60-87047r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x60-87049r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x60-87051r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  atomic(3.25). 
</span>
<br class="fancyvrb"/>
<a id="x60-87053r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x60-87055r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x60-87057r10">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  atomic(loves(vincent,mia)). 
</span>
<br class="fancyvrb"/>
<a id="x60-87059r11">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  no 
</span>
<br class="fancyvrb"/>
<a id="x60-87061r12">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x60-87063r13">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  atomic(X) 
</span>
<br class="fancyvrb"/>
<a id="x60-87065r14">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  no 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> What about variables? First there is the 
<span class="verb">
<span class="cmtt-10"> var/1 
</span>
</span> predicate. This tests whether the argument is an 
<span class="cmti-10"> uninstantiated 
</span> variable: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb400">
<a id="x60-87067r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  var(X) 
</span>
<br class="fancyvrb"/>
<a id="x60-87069r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x60-87071r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x60-87073r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  var(mia). 
</span>
<br class="fancyvrb"/>
<a id="x60-87075r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  no 
</span>
<br class="fancyvrb"/>
<a id="x60-87077r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x60-87079r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  var(8). 
</span>
<br class="fancyvrb"/>
<a id="x60-87081r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  no 
</span>
<br class="fancyvrb"/>
<a id="x60-87083r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x60-87085r10">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  var(3.25). 
</span>
<br class="fancyvrb"/>
<a id="x60-87087r11">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  no 
</span>
<br class="fancyvrb"/>
<a id="x60-87089r12">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x60-87091r13">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  var(loves(vincent,mia)). 
</span>
<br class="fancyvrb"/>
<a id="x60-87093r14">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  no 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Then there is the 
<span class="verb">
<span class="cmtt-10"> nonvar/1 
</span>
</span> predicate. This succeeds precisely when 
<span class="verb">
<span class="cmtt-10"> var/1 
</span>
</span> fails; that is, it tests whether its argument is 
<span class="cmti-10"> not 
</span> an uninstantiated variable: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb401">
<a id="x60-87095r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  nonvar(X) 
</span>
<br class="fancyvrb"/>
<a id="x60-87097r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  no 
</span>
<br class="fancyvrb"/>
<a id="x60-87099r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x60-87101r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  nonvar(mia). 
</span>
<br class="fancyvrb"/>
<a id="x60-87103r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x60-87105r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x60-87107r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  nonvar(8). 
</span>
<br class="fancyvrb"/>
<a id="x60-87109r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x60-87111r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x60-87113r10">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  nonvar(3.25). 
</span>
<br class="fancyvrb"/>
<a id="x60-87115r11">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x60-87117r12">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x60-87119r13">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  nonvar(loves(vincent,mia)). 
</span>
<br class="fancyvrb"/>
<a id="x60-87121r14">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Note that a complex term which contains uninstantiated variables is not itself an uninstantiated variable (it is a complex term). Therefore we have: 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb402">
<a id="x60-87123r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  var(loves(_,mia)). 
</span>
<br class="fancyvrb"/>
<a id="x60-87125r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  no 
</span>
<br class="fancyvrb"/>
<a id="x60-87127r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x60-87129r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  nonvar(loves(_,mia)). 
</span>
<br class="fancyvrb"/>
<a id="x60-87131r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> And when the variable 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> gets instantiated 
<span class="verb">
<span class="cmtt-10"> var(X) 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> nonvar(X) 
</span>
</span> behave differently depending on whether they are called before or after the instantiation: 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb403">
<a id="x60-87133r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  a, 
</span>
<span class="cmtt-10">  var(X). 
</span>
<br class="fancyvrb"/>
<a id="x60-87135r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  no 
</span>
<br class="fancyvrb"/>
<a id="x60-87137r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x60-87139r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  a, 
</span>
<span class="cmtt-10">  nonvar(X). 
</span>
<br class="fancyvrb"/>
<a id="x60-87141r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  a 
</span>
<br class="fancyvrb"/>
<a id="x60-87143r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x60-87145r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x60-87147r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  var(X), 
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  a. 
</span>
<br class="fancyvrb"/>
<a id="x60-87149r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  a 
</span>
<br class="fancyvrb"/>
<a id="x60-87151r10">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x60-87153r11">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x60-87155r12">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  nonvar(X), 
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  a. 
</span>
<br class="fancyvrb"/>
<a id="x60-87157r13">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  no 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent">
</p>
</div>
<div class="nb-cell html" name="htm1">
<h4 class="likesubsectionHead">
<a id="x60-880009.3">
</a> The Structure of Terms 
</h4>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Given a complex term of unknown structure (perhaps a complex term returned as the output of some predicate), what kind of information might we want to extract from it? The obvious response is: its functor, its arity, and what its arguments look like. Prolog provides built-in predicates that provide this information. Information about the functor 
<a id="dx60-88001">
</a> and arity is supplied by the predicate 
<span class="verb">
<span class="cmtt-10"> functor/3 
</span>
</span> . Given a complex term, 
<span class="verb">
<span class="cmtt-10"> functor/3 
</span>
</span> will tell us what its functor and arity are: 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb404">
<a id="x60-88003r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  functor(f(a,b),F,A). 
</span>
<br class="fancyvrb"/>
<a id="x60-88005r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  A 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  2 
</span>
<br class="fancyvrb"/>
<a id="x60-88007r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  F 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  f 
</span>
<br class="fancyvrb"/>
<a id="x60-88009r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x60-88011r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x60-88013r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  functor([a,b,c],X,Y). 
</span>
<br class="fancyvrb"/>
<a id="x60-88015r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  ’.’ 
</span>
<br class="fancyvrb"/>
<a id="x60-88017r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Y 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  2 
</span>
<br class="fancyvrb"/>
<a id="x60-88019r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Note that when asked about a list, Prolog returns the functor ., which is the functor it uses in its internal representation of lists. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> What happens when we use 
<span class="verb">
<span class="cmtt-10"> functor/3 
</span>
</span> with constants? Let’s try: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb405">
<a id="x60-88021r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  functor(mia,F,A). 
</span>
<br class="fancyvrb"/>
<a id="x60-88023r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  A 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  0 
</span>
<br class="fancyvrb"/>
<a id="x60-88025r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  F 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  mia 
</span>
<br class="fancyvrb"/>
<a id="x60-88027r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x60-88029r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x60-88031r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  functor(8,F,A). 
</span>
<br class="fancyvrb"/>
<a id="x60-88033r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  A 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  0 
</span>
<br class="fancyvrb"/>
<a id="x60-88035r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  F 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  8 
</span>
<br class="fancyvrb"/>
<a id="x60-88037r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x60-88039r10">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x60-88041r11">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  functor(3.25,F,A). 
</span>
<br class="fancyvrb"/>
<a id="x60-88043r12">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  A 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  0 
</span>
<br class="fancyvrb"/>
<a id="x60-88045r13">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  F 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  3.25 
</span>
<br class="fancyvrb"/>
<a id="x60-88047r14">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> So we can use the predicate 
<span class="verb">
<span class="cmtt-10"> functor/3 
</span>
</span> to find out the functor and the arity of a term, and this usage also works for the special case of 0 arity terms (constants). 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> We can also use 
<span class="verb">
<span class="cmtt-10"> functor/3 
</span>
</span> to 
<span class="cmti-10"> construct 
</span> terms. How? By specifying the second and third argument and leaving the first undetermined. The query 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb406">
<a id="x60-88049r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  functor(T,f,7). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> for example, returns the following answer: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb407">
<a id="x60-88051r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  T 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  f(_G286, 
</span>
<span class="cmtt-10">  _G287, 
</span>
<span class="cmtt-10">  _G288, 
</span>
<span class="cmtt-10">  _G289, 
</span>
<span class="cmtt-10">  _G290, 
</span>
<span class="cmtt-10">  _G291, 
</span>
<span class="cmtt-10">  _G292) 
</span>
<br class="fancyvrb"/>
<a id="x60-88053r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Note that either the first argument or the second and third argument have to be instantiated. For example, Prolog would answer with an error message to the query 
<span class="verb">
<span class="cmtt-10"> functor(T,f,N) 
</span>
</span> . And if you think about what the query means, Prolog is reacting in a sensible way. The query is asking Prolog to construct a complex term without telling it how many arguments to provide, which is not a very sensible request. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Now that we know about 
<span class="verb">
<span class="cmtt-10"> functor/3 
</span>
</span> , let’s put it to work. In the previous section, we discussed the built-in predicates that tested whether their argument was an atom, a number, a constant, or a variable. But there was no predicate that tested whether its argument was a complex term. To make the list complete, let’s define such a predicate. It is easy to do so using 
<span class="verb">
<span class="cmtt-10"> functor/3 
</span>
</span> . All we have to do is to check that there is a suitable functor, and that the input has arguments (that is, that its arity is greater than zero). Here is the definition: 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb408">
<a id="x60-88055r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  complexterm(X):- 
</span>
<br class="fancyvrb"/>
<a id="x60-88057r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  nonvar(X), 
</span>
<br class="fancyvrb"/>
<a id="x60-88059r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  functor(X,_,A), 
</span>
<br class="fancyvrb"/>
<a id="x60-88061r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  A 
</span>
<span class="cmtt-10">  &gt; 
</span>
<span class="cmtt-10">  0. 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> So much for functors — what about arguments? In addition to the 
<a id="dx60-88062">
</a> predicate 
<span class="verb">
<span class="cmtt-10"> functor/3 
</span>
</span> , Prolog supplies us with the predicate 
<span class="verb">
<span class="cmtt-10"> arg/3 
</span>
</span> which tells us about the arguments of complex terms. It takes a number 
<span class="cmti-10"> N 
</span> and a complex term 
<span class="cmti-10"> T 
</span> and returns the 
<span class="cmti-10"> Nth 
</span> argument of 
<span class="cmti-10"> T 
</span> in its third argument. It can be used to access the value of an argument 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb409">
<a id="x60-88064r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  arg(2,loves(vincent,mia),X). 
</span>
<br class="fancyvrb"/>
<a id="x60-88066r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  mia 
</span>
<br class="fancyvrb"/>
<a id="x60-88068r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> or to instantiate an argument 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb410">
<a id="x60-88070r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  arg(2,loves(vincent,X),mia). 
</span>
<br class="fancyvrb"/>
<a id="x60-88072r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  mia 
</span>
<br class="fancyvrb"/>
<a id="x60-88074r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Trying to access an argument which doesn’t exist, of course, fails: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb411">
<a id="x60-88076r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  arg(2,happy(yolanda),X). 
</span>
<br class="fancyvrb"/>
<a id="x60-88078r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  no 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> The predicates 
<span class="verb">
<span class="cmtt-10"> functor/3 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> arg/3 
</span>
</span> allow us to access all the basic information we need to know about complex terms. However Prolog also supplies a third built-in predicate for analysing term structure, namely 
<span class="verb">
<span class="cmtt-10"> ’=..’/2 
</span>
</span> . This takes a complex term and returns a list that has the functor as its head, and then all the arguments, in order, as the elements of the tail. So to the query 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb412">
<a id="x60-88080r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  ’=..’(loves(vincent,mia),X) 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Prolog will respond 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb413">
<a id="x60-88082r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [loves,vincent,mia] 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> This predicate (which is called univ) can also be used as an infix operator. Here are some examples showing various ways of using 
<a id="dx60-88083">
</a> this (very useful) tool: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb414">
<a id="x60-88085r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  cause(vincent,dead(zed)) 
</span>
<span class="cmtt-10">  =.. 
</span>
<span class="cmtt-10">  X. 
</span>
<br class="fancyvrb"/>
<a id="x60-88087r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [cause, 
</span>
<span class="cmtt-10">  vincent, 
</span>
<span class="cmtt-10">  dead(zed)] 
</span>
<br class="fancyvrb"/>
<a id="x60-88089r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x60-88091r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x60-88093r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  =.. 
</span>
<span class="cmtt-10">  [a,b(c),d]. 
</span>
<br class="fancyvrb"/>
<a id="x60-88095r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  a(b(c), 
</span>
<span class="cmtt-10">  d) 
</span>
<br class="fancyvrb"/>
<a id="x60-88097r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x60-88099r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x60-88101r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  footmassage(Y,mia) 
</span>
<span class="cmtt-10">  =.. 
</span>
<span class="cmtt-10">  X. 
</span>
<br class="fancyvrb"/>
<a id="x60-88103r10">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Y 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  _G303 
</span>
<br class="fancyvrb"/>
<a id="x60-88105r11">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [footmassage, 
</span>
<span class="cmtt-10">  _G303, 
</span>
<span class="cmtt-10">  mia] 
</span>
<br class="fancyvrb"/>
<a id="x60-88107r12">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Univ really comes into its own when something has to be done to all arguments of a complex term. Since it returns the arguments as a list, normal list processing strategies can be used to traverse the arguments. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent">
</p>
</div>
<div class="nb-cell html" name="htm1">
<h4 class="likesubsectionHead">
<a id="x60-890009.3">
</a> Strings 
</h4>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Strings are represented in Prolog by a list of character (ASCII) codes. However, it would be a right kerfuffle to use list notation for simple string manipulation, so Prolog also offers a user-friendly notation for strings: double quotes. Try the following query: 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb415">
<a id="x60-89002r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  S 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  "Vicky". 
</span>
<br class="fancyvrb"/>
<a id="x60-89004r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  S 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [86, 
</span>
<span class="cmtt-10">  105, 
</span>
<span class="cmtt-10">  99, 
</span>
<span class="cmtt-10">  107, 
</span>
<span class="cmtt-10">  121] 
</span>
<br class="fancyvrb"/>
<a id="x60-89006r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Here the variable 
<span class="cmtt-10"> S 
</span> unifies with the string 
<span class="cmtt-10"> "Vicky" 
</span> , which is a list containing of five numbers, each of them corresponding to the character codes of the single characters the strings is composed of. (For instance, 86 is the character code for the character V, 105 is the code for the character i, and so on.) 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> In other words, strings in Prolog are actually lists of numbers. Several standard predicates are supported by most Prolog dialects to work with strings. A particularly useful one is 
<span class="cmtt-10"> atom 
</span>
<span class="cmtt-10"> _codes/2 
</span> . This predicate converts an atom into a string. The following examples illustrate what 
<span class="cmtt-10"> atom 
</span>
<span class="cmtt-10"> _codes/2 
</span>
<a id="dx60-89007">
</a> can do for you: 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb416">
<a id="x60-89009r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  atom_codes(vicky,X). 
</span>
<br class="fancyvrb"/>
<a id="x60-89011r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [118, 
</span>
<span class="cmtt-10">  105, 
</span>
<span class="cmtt-10">  99, 
</span>
<span class="cmtt-10">  107, 
</span>
<span class="cmtt-10">  121] 
</span>
<br class="fancyvrb"/>
<a id="x60-89013r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x60-89015r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x60-89017r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  atom_codes(’Vicky’,X). 
</span>
<br class="fancyvrb"/>
<a id="x60-89019r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [86, 
</span>
<span class="cmtt-10">  105, 
</span>
<span class="cmtt-10">  99, 
</span>
<span class="cmtt-10">  107, 
</span>
<span class="cmtt-10">  121] 
</span>
<br class="fancyvrb"/>
<a id="x60-89021r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x60-89023r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x60-89025r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  atom_codes(’Vicky 
</span>
<span class="cmtt-10">  Pollard’,X). 
</span>
<br class="fancyvrb"/>
<a id="x60-89027r10">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [86, 
</span>
<span class="cmtt-10">  105, 
</span>
<span class="cmtt-10">  99, 
</span>
<span class="cmtt-10">  107, 
</span>
<span class="cmtt-10">  121, 
</span>
<span class="cmtt-10">  32, 
</span>
<span class="cmtt-10">  80, 
</span>
<span class="cmtt-10">  111, 
</span>
<span class="cmtt-10">  108|...] 
</span>
<br class="fancyvrb"/>
<a id="x60-89029r11">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> It also works the other way around: 
<span class="cmtt-10"> atom 
</span>
<span class="cmtt-10"> _codes/2 
</span> can also be used to generate atoms from strings. Suppose you want to duplicate an atom 
<span class="cmtt-10"> abc 
</span> into the atom abcabc. This is how you could do it: 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb417">
<a id="x60-89031r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  atom_codes(abc,X), 
</span>
<span class="cmtt-10">  append(X,X,L), 
</span>
<span class="cmtt-10">  atom_codes(N,L). 
</span>
<br class="fancyvrb"/>
<a id="x60-89033r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x60-89035r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [97, 
</span>
<span class="cmtt-10">  98, 
</span>
<span class="cmtt-10">  99] 
</span>
<br class="fancyvrb"/>
<a id="x60-89037r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  L 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [97, 
</span>
<span class="cmtt-10">  98, 
</span>
<span class="cmtt-10">  99, 
</span>
<span class="cmtt-10">  97, 
</span>
<span class="cmtt-10">  98, 
</span>
<span class="cmtt-10">  99] 
</span>
<br class="fancyvrb"/>
<a id="x60-89039r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  N 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  abcabc 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> One last thing you need to know about the 
<span class="cmtt-10"> atom 
</span>
<span class="cmtt-10"> _codes/2 
</span> predicate is that it is related to another other built-in predicate, namely 
<span class="cmtt-10"> number 
</span>
<span class="cmtt-10"> _codes/2 
</span>
<a id="dx60-89040">
</a> . This predicate behaves in a similar way, but, as the names suggest, only works for numbers. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse40"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse38"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse38"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse39"> front 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch9"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent">
<a id="taillpn-htmlse39">
</a>
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse41"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse39"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse39"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=#taillpn-htmlse40"> tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch9"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<h3 class="sectionHead">
<span class="titlemark"> 9.4 
</span>
<a id="x61-900009.4">
</a> Operators 
</h3>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> As we have seen, in certain cases (for example, when performing arithmetic) Prolog lets us use operator notations that are more user-friendly than its own internal representations. Indeed, as we shall now see, Prolog even has a mechanism for letting us define our own operators. In this section we’ll first take a closer look at the properties of operators, and then learn how to define our own. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent">
</p>
</div>
<div class="nb-cell html" name="htm1">
<h4 class="likesubsectionHead">
<a id="x61-910009.4">
</a> Properties of operators 
</h4>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Let’s start with an example from arithmetic. Internally, Prolog uses the expression 
<span class="verb">
<span class="cmtt-10"> is(11,+(2,*(3,3))) 
</span>
</span> , but we are free to write the functors 
<span class="verb">
<span class="cmtt-10"> * 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> + 
</span>
</span> between their arguments, to form the more user-friendly expression 
<span class="verb">
<span class="cmtt-10"> 11 
</span>
<span class="cmtt-10">  is 
</span>
<span class="cmtt-10">  2 
</span>
<span class="cmtt-10">  + 
</span>
<span class="cmtt-10">  3 
</span>
<span class="cmtt-10">  * 
</span>
<span class="cmtt-10">  3 
</span>
</span> . Functors that can be written between their arguments are called infix operators. Other examples of infix operators in Prolog are 
<span class="verb">
<span class="cmtt-10"> :- 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> --&gt; 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> ; 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> ’,’ 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> = 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> =.. 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> == 
</span>
</span> and so on. In addition to infix operators there are also prefix operators (which are written before their arguments) and postfix operators (which are written after). For example, 
<span class="verb">
<span class="cmtt-10"> ?- 
</span>
</span> is a prefix operator, and so is the one-place 
<span class="verb">
<span class="cmtt-10"> - 
</span>
</span> which is used to represent negative numbers (as in 
<span class="verb">
<span class="cmtt-10"> 1 
</span>
<span class="cmtt-10">  is 
</span>
<span class="cmtt-10">  3 
</span>
<span class="cmtt-10">  + 
</span>
<span class="cmtt-10">  -2 
</span>
</span> ). An example of a postfix operator is the 
<span class="verb">
<span class="cmtt-10"> ++ 
</span>
</span> notation used in the C programming language to increment the value of a variable. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> When we learned about arithmetic in Prolog, we saw that Prolog knows about the conventions for disambiguating arithmetic expressions. So when we write 
<span class="verb">
<span class="cmtt-10"> 2 
</span>
<span class="cmtt-10">  + 
</span>
<span class="cmtt-10">  3 
</span>
<span class="cmtt-10">  * 
</span>
<span class="cmtt-10">  3 
</span>
</span> , Prolog knows that we mean 
<span class="verb">
<span class="cmtt-10"> 2 
</span>
<span class="cmtt-10">  + 
</span>
<span class="cmtt-10">  (3 
</span>
<span class="cmtt-10">  * 
</span>
<span class="cmtt-10">  3) 
</span>
</span> and not 
<span class="verb">
<span class="cmtt-10"> (2 
</span>
<span class="cmtt-10">  + 
</span>
<span class="cmtt-10">  3) 
</span>
<span class="cmtt-10">  * 
</span>
<span class="cmtt-10">  3 
</span>
</span> . But how does Prolog know this? Because every operator has a certain precedence. The precedence of 
<span class="verb">
<span class="cmtt-10"> + 
</span>
</span> is greater than the precedence of 
<span class="verb">
<span class="cmtt-10"> * 
</span>
</span> , and that’s why 
<span class="verb">
<span class="cmtt-10"> + 
</span>
</span> is taken to be the main functor of the expression 
<span class="verb">
<span class="cmtt-10"> 2 
</span>
<span class="cmtt-10">  + 
</span>
<span class="cmtt-10">  3 
</span>
<span class="cmtt-10">  * 
</span>
<span class="cmtt-10">  3 
</span>
</span> . (Note that Prolog’s internal representation 
<span class="verb">
<span class="cmtt-10"> +(2,*(3,3)) 
</span>
</span> is not ambiguous.) Similarly, the precedence of 
<span class="verb">
<span class="cmtt-10"> is 
</span>
</span> is higher than the precedence of 
<span class="verb">
<span class="cmtt-10"> + 
</span>
</span> , so 
<span class="verb">
<span class="cmtt-10"> 11 
</span>
<span class="cmtt-10">  is 
</span>
<span class="cmtt-10">  2 
</span>
<span class="cmtt-10">  + 
</span>
<span class="cmtt-10">  3 
</span>
<span class="cmtt-10">  * 
</span>
<span class="cmtt-10">  3 
</span>
</span> is interpreted as 
<span class="verb">
<span class="cmtt-10"> is(11,+(2,*(3,3))) 
</span>
</span> and not as the (nonsensical) expression 
<span class="verb">
<span class="cmtt-10"> +(is(11,2),*(3,3)) 
</span>
</span> . In Prolog, precedence is expressed by a number between 0 and 1200; the higher the number, the greater the precedence. To give some examples, the precedence of 
<span class="verb">
<span class="cmtt-10"> = 
</span>
</span> is 700, the precedence of 
<span class="verb">
<span class="cmtt-10"> + 
</span>
</span> is 500, and the precedence of 
<span class="verb">
<span class="cmtt-10"> * 
</span>
</span> is 400. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> What happens when there are several operators with the same precedence in one expression? We said above that Prolog finds the query 
<span class="verb">
<span class="cmtt-10"> 2 
</span>
<span class="cmtt-10">  =:= 
</span>
<span class="cmtt-10">  3 
</span>
<span class="cmtt-10">  == 
</span>
<span class="cmtt-10">  =:=(2,3) 
</span>
</span> confusing. It doesn’t know how to bracket the expression: Is it 
<span class="verb">
<span class="cmtt-10"> =:=(2,==(3,=:=(2,3))) 
</span>
</span> or is it 
<span class="verb">
<span class="cmtt-10"> ==(=:=(2,3),=:=(2,3)) 
</span>
</span> ? The reason Prolog is not able to decide on the correct bracketing is because 
<span class="verb">
<span class="cmtt-10"> == 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> =:= 
</span>
</span> have the same precedence. In such cases, explicit bracketings must be supplied by the programmer. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> What about the following query though? 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb418">
<a id="x61-91002r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  is 
</span>
<span class="cmtt-10">  2 
</span>
<span class="cmtt-10">  + 
</span>
<span class="cmtt-10">  3 
</span>
<span class="cmtt-10">  + 
</span>
<span class="cmtt-10">  4. 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Does Prolog find this confusing? Not at all: it deals with it happily and correctly answers 
<span class="verb">
<span class="cmtt-10"> X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  9 
</span>
</span> . But which bracketing did Prolog choose: 
<span class="verb">
<span class="cmtt-10"> is(X,+(2,+(3,4))) 
</span>
</span> or 
<span class="verb">
<span class="cmtt-10"> is(X,+(+(2,3),4)) 
</span>
</span> ? As the following queries show, it chose the second: 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb419">
<a id="x61-91004r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  2 
</span>
<span class="cmtt-10">  + 
</span>
<span class="cmtt-10">  3 
</span>
<span class="cmtt-10">  + 
</span>
<span class="cmtt-10">  4 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  +(2,+(3,4)). 
</span>
<br class="fancyvrb"/>
<a id="x61-91006r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  no 
</span>
<br class="fancyvrb"/>
<a id="x61-91008r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  2 
</span>
<span class="cmtt-10">  + 
</span>
<span class="cmtt-10">  3 
</span>
<span class="cmtt-10">  + 
</span>
<span class="cmtt-10">  4 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  +(+(2,3),4). 
</span>
<br class="fancyvrb"/>
<a id="x61-91010r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Here Prolog has used information about the associativity of 
<span class="verb">
<span class="cmtt-10"> + 
</span>
</span> to disambiguate: 
<span class="verb">
<span class="cmtt-10"> + 
</span>
</span> is left associative, which means that the expression to the right of 
<span class="verb">
<span class="cmtt-10"> + 
</span>
</span> must have a lower precedence than 
<span class="verb">
<span class="cmtt-10"> + 
</span>
</span> itself, whereas the expression on the left may have the same precedence as 
<span class="verb">
<span class="cmtt-10"> + 
</span>
</span> . The precedence of an expression is simply the precedence of its main operator, or 0 if it is enclosed in brackets. The main operator of 
<span class="verb">
<span class="cmtt-10"> 3 
</span>
<span class="cmtt-10">  + 
</span>
<span class="cmtt-10">  4 
</span>
</span> is 
<span class="verb">
<span class="cmtt-10"> + 
</span>
</span> , so that interpreting 
<span class="verb">
<span class="cmtt-10"> 2 
</span>
<span class="cmtt-10">  + 
</span>
<span class="cmtt-10">  3 
</span>
<span class="cmtt-10">  + 
</span>
<span class="cmtt-10">  4 
</span>
</span> as 
<span class="verb">
<span class="cmtt-10"> +(2,+(3,4)) 
</span>
</span> would mean that the expression to the right of the first 
<span class="verb">
<span class="cmtt-10"> + 
</span>
</span> has the same precedence as 
<span class="verb">
<span class="cmtt-10"> + 
</span>
</span> itself, which is illegal. It has to be lower. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> The operators 
<span class="verb">
<span class="cmtt-10"> == 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> =:= 
</span>
</span> , and 
<span class="verb">
<span class="cmtt-10"> is 
</span>
</span> are defined to be non-associative, which means that both of their arguments must have a lower precedence. Therefore 
<span class="verb">
<span class="cmtt-10"> 2 
</span>
<span class="cmtt-10">  =:= 
</span>
<span class="cmtt-10">  3 
</span>
<span class="cmtt-10">  == 
</span>
<span class="cmtt-10">  =:=(2,3) 
</span>
</span> is an illegal expression, since no matter how you bracket it you’ll get a conflict: 
<span class="verb">
<span class="cmtt-10"> 2 
</span>
<span class="cmtt-10">  =:= 
</span>
<span class="cmtt-10">  3 
</span>
</span> has the same precedence as 
<span class="verb">
<span class="cmtt-10"> == 
</span>
</span> , and 
<span class="verb">
<span class="cmtt-10"> 3 
</span>
<span class="cmtt-10">  == 
</span>
<span class="cmtt-10">  =:=(2,3) 
</span>
</span> has the same precedence as 
<span class="verb">
<span class="cmtt-10"> =:= 
</span>
</span> . 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> The type of an operator (infix, prefix, or postfix), its precedence, and its associativity are the three things that Prolog needs to know to be able to translate user-friendly (but potentially ambiguous) operator notations into Prolog’s internal representation. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent">
</p>
</div>
<div class="nb-cell html" name="htm1">
<h4 class="likesubsectionHead">
<a id="x61-920009.4">
</a> Defining operators 
</h4>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> In addition to providing a user-friendly operator notation for certain functors, Prolog also lets you define your own operators. So you could, for example, define a postfix operator 
<span class="verb">
<span class="cmtt-10"> is_dead 
</span>
</span> ; then Prolog would allow you to write 
<span class="verb">
<span class="cmtt-10"> zed 
</span>
<span class="cmtt-10">  is_dead 
</span>
</span> as a fact in your database instead of 
<span class="verb">
<span class="cmtt-10"> is_dead(zed) 
</span>
</span> . 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Operator definitions in Prolog look like this: 
<a id="dx61-92001">
</a>
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb420">
<a id="x61-92003r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  op(Precedence,Type,Name). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> As we mentioned above, precedence is a number between 0 and 1200, and the higher the number, the greater the precedence. Type is an atom specifying the type and associativity of the operator. In the case of 
<span class="verb">
<span class="cmtt-10"> + 
</span>
</span> this atom is 
<span class="verb">
<span class="cmtt-10"> yfx 
</span>
</span> , which says that 
<span class="verb">
<span class="cmtt-10"> + 
</span>
</span> is an infix operator; the 
<span class="verb">
<span class="cmtt-10"> f 
</span>
</span> represents the operator, and the 
<span class="verb">
<span class="cmtt-10"> x 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> y 
</span>
</span> the arguments. Furthermore, 
<span class="verb">
<span class="cmtt-10"> x 
</span>
</span> stands for an argument which has a precedence which is lower than the precedence of 
<span class="verb">
<span class="cmtt-10"> + 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> y 
</span>
</span> stands for an argument which has a precedence which lower or equal to the precedence of 
<span class="verb">
<span class="cmtt-10"> + 
</span>
</span> . There are the following possibilities for type: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="center">
<!--l. 865-->
<p class="noindent">
</p>
<div class="tabular">
<table cellpadding="0" cellspacing="0" class="tabular" id="TBL-11">
<colgroup id="TBL-11-1g">
<col id="TBL-11-1"/>
<col id="TBL-11-2"/>
</colgroup>
<tr id="TBL-11-1-" style="vertical-align:baseline;">
<td class="td11" id="TBL-11-1-1" style="white-space:nowrap; text-align:left;"> infix 
</td>
<td class="td11" id="TBL-11-1-2" style="white-space:nowrap; text-align:left;">
<span class="verb">
<span class="cmtt-10"> xfx 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> xfy 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> yfx 
</span>
</span>
</td>
</tr>
<tr id="TBL-11-2-" style="vertical-align:baseline;">
<td class="td11" id="TBL-11-2-1" style="white-space:nowrap; text-align:left;"> prefix 
</td>
<td class="td11" id="TBL-11-2-2" style="white-space:nowrap; text-align:left;">
<span class="verb">
<span class="cmtt-10"> fx 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> fy 
</span>
</span>
</td>
</tr>
<tr id="TBL-11-3-" style="vertical-align:baseline;">
<td class="td11" id="TBL-11-3-1" style="white-space:nowrap; text-align:left;"> suffix 
</td>
<td class="td11" id="TBL-11-3-2" style="white-space:nowrap; text-align:left;">
<span class="verb">
<span class="cmtt-10"> xf 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> yf 
</span>
</span>
</td>
</tr>
</table>
</div>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> So your operator definition for 
<span class="verb">
<span class="cmtt-10"> is_dead 
</span>
</span> might be as follows: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb421">
<a id="x61-92005r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  op(500, 
</span>
<span class="cmtt-10">  xf, 
</span>
<span class="cmtt-10">  is_dead). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Here are the definitions for some of the built-in operators. You can see that operators with the same properties can be specified in one statement by giving a list of their names (instead of a single name) as the third argument of 
<span class="verb">
<span class="cmtt-10"> op 
</span>
</span> . 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="center">
<!--l. 882-->
<p class="noindent">
</p>
<div class="tabular">
<table cellpadding="0" cellspacing="0" class="tabular" id="TBL-12">
<colgroup id="TBL-12-1g">
<col id="TBL-12-1"/>
</colgroup>
<tr id="TBL-12-1-" style="vertical-align:baseline;">
<td class="td11" id="TBL-12-1-1" style="white-space:nowrap; text-align:left;">
<span class="verb">
<span class="cmtt-10"> :- 
</span>
<span class="cmtt-10">  op( 
</span>
<span class="cmtt-10">  1200, 
</span>
<span class="cmtt-10">  xfx, 
</span>
<span class="cmtt-10">  [ 
</span>
<span class="cmtt-10">  :-, 
</span>
<span class="cmtt-10">  --&gt; 
</span>
<span class="cmtt-10">  ]). 
</span>
</span>
</td>
</tr>
<tr id="TBL-12-2-" style="vertical-align:baseline;">
<td class="td11" id="TBL-12-2-1" style="white-space:nowrap; text-align:left;">
<span class="verb">
<span class="cmtt-10"> :- 
</span>
<span class="cmtt-10">  op( 
</span>
<span class="cmtt-10">  1200, 
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  fx, 
</span>
<span class="cmtt-10">  [ 
</span>
<span class="cmtt-10">  :-, 
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  ]). 
</span>
</span>
</td>
</tr>
<tr id="TBL-12-3-" style="vertical-align:baseline;">
<td class="td11" id="TBL-12-3-1" style="white-space:nowrap; text-align:left;">
<span class="verb">
<span class="cmtt-10"> :- 
</span>
<span class="cmtt-10">  op( 
</span>
<span class="cmtt-10">  1100, 
</span>
<span class="cmtt-10">  xfy, 
</span>
<span class="cmtt-10">  [ 
</span>
<span class="cmtt-10">  ; 
</span>
<span class="cmtt-10">  ]). 
</span>
</span>
</td>
</tr>
<tr id="TBL-12-4-" style="vertical-align:baseline;">
<td class="td11" id="TBL-12-4-1" style="white-space:nowrap; text-align:left;">
<span class="verb">
<span class="cmtt-10"> :- 
</span>
<span class="cmtt-10">  op( 
</span>
<span class="cmtt-10">  1000, 
</span>
<span class="cmtt-10">  xfy, 
</span>
<span class="cmtt-10">  [ 
</span>
<span class="cmtt-10">  ’,’ 
</span>
<span class="cmtt-10">  ]). 
</span>
</span>
</td>
</tr>
<tr id="TBL-12-5-" style="vertical-align:baseline;">
<td class="td11" id="TBL-12-5-1" style="white-space:nowrap; text-align:left;">
<span class="verb">
<span class="cmtt-10"> :- 
</span>
<span class="cmtt-10">  op( 
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  700, 
</span>
<span class="cmtt-10">  xfx, 
</span>
<span class="cmtt-10">  [ 
</span>
<span class="cmtt-10">  =, 
</span>
<span class="cmtt-10">  is, 
</span>
<span class="cmtt-10">  =.., 
</span>
<span class="cmtt-10">  ==, 
</span>
<span class="cmtt-10">  \==, 
</span>
<span class="cmtt-10">   
</span>
</span>
</td>
</tr>
<tr id="TBL-12-6-" style="vertical-align:baseline;">
<td class="td11" id="TBL-12-6-1" style="white-space:nowrap; text-align:left;">
<span class="verb">
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  =:=, 
</span>
<span class="cmtt-10">  =\=, 
</span>
<span class="cmtt-10">  &lt;, 
</span>
<span class="cmtt-10">  &gt;, 
</span>
<span class="cmtt-10">  =&lt;, 
</span>
<span class="cmtt-10">  &gt;= 
</span>
<span class="cmtt-10">  ]). 
</span>
</span>
</td>
</tr>
<tr id="TBL-12-7-" style="vertical-align:baseline;">
<td class="td11" id="TBL-12-7-1" style="white-space:nowrap; text-align:left;">
<span class="verb">
<span class="cmtt-10"> :- 
</span>
<span class="cmtt-10">  op( 
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  500, 
</span>
<span class="cmtt-10">  yfx, 
</span>
<span class="cmtt-10">  [ 
</span>
<span class="cmtt-10">  +, 
</span>
<span class="cmtt-10">  -]). 
</span>
</span>
</td>
</tr>
<tr id="TBL-12-8-" style="vertical-align:baseline;">
<td class="td11" id="TBL-12-8-1" style="white-space:nowrap; text-align:left;">
<span class="verb">
<span class="cmtt-10"> :- 
</span>
<span class="cmtt-10">  op( 
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  500, 
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  fx, 
</span>
<span class="cmtt-10">  [ 
</span>
<span class="cmtt-10">  +, 
</span>
<span class="cmtt-10">  - 
</span>
<span class="cmtt-10">  ]). 
</span>
</span>
</td>
</tr>
<tr id="TBL-12-9-" style="vertical-align:baseline;">
<td class="td11" id="TBL-12-9-1" style="white-space:nowrap; text-align:left;">
<span class="verb">
<span class="cmtt-10"> :- 
</span>
<span class="cmtt-10">  op( 
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  300, 
</span>
<span class="cmtt-10">  xfx, 
</span>
<span class="cmtt-10">  [ 
</span>
<span class="cmtt-10">  mod 
</span>
<span class="cmtt-10">  ]). 
</span>
</span>
</td>
</tr>
<tr id="TBL-12-10-" style="vertical-align:baseline;">
<td class="td11" id="TBL-12-10-1" style="white-space:nowrap; text-align:left;">
<span class="verb">
<span class="cmtt-10"> :- 
</span>
<span class="cmtt-10">  op( 
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  200, 
</span>
<span class="cmtt-10">  xfy, 
</span>
<span class="cmtt-10">  [ 
</span>
<span class="cmtt-10">  ^ 
</span>
<span class="cmtt-10">  ]). 
</span>
</span>
</td>
</tr>
</table>
</div>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> One final point should made explicit. Operator definitions don’t specify the 
<span class="cmti-10"> meanings 
</span> of operators, they only describe how they can be used syntactically. That is, an operator definition doesn’t say anything about when a query involving this operator will evaluate to true, it merely extends the 
<span class="cmti-10"> syntax 
</span> of Prolog. So if the operator 
<span class="verb">
<span class="cmtt-10"> is_dead 
</span>
</span> is defined as above, and you pose the query 
<span class="verb">
<span class="cmtt-10"> zed 
</span>
<span class="cmtt-10">  is_dead 
</span>
</span> , Prolog won’t complain about illegal syntax (as it would without this definition) but will try to prove the goal 
<span class="verb">
<span class="cmtt-10"> is_dead(zed) 
</span>
</span> , which is Prolog’s internal representation of 
<span class="verb">
<span class="cmtt-10"> zed 
</span>
<span class="cmtt-10">  is_dead 
</span>
</span> . And this is all operator definitions do — they just tell Prolog how to translate a user-friendly notation into real Prolog notation. So, what would be Prolog’s answer to the query 
<span class="verb">
<span class="cmtt-10"> zed 
</span>
<span class="cmtt-10">  is_dead 
</span>
</span> ? It would be 
<span class="verb">
<span class="cmtt-10"> no 
</span>
</span> , because Prolog would try to prove 
<span class="verb">
<span class="cmtt-10"> is_dead(zed) 
</span>
</span> , but would not find any matching clause in the database. But suppose we extended the database as follows: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb422">
<a id="x61-92007r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  op(500, 
</span>
<span class="cmtt-10">  xf, 
</span>
<span class="cmtt-10">  is_dead). 
</span>
<br class="fancyvrb"/>
<a id="x61-92009r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x61-92011r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  kill(marsellus,zed). 
</span>
<br class="fancyvrb"/>
<a id="x61-92013r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  is_dead(X) 
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  kill(_,X). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Now Prolog would answer 
<span class="verb">
<span class="cmtt-10"> yes 
</span>
</span> to the query. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse41"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse39"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse39"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse40"> front 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch9"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent">
<a id="taillpn-htmlse40">
</a>
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse42"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse40"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse40"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=#taillpn-htmlse41"> tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch9"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<h3 class="sectionHead">
<span class="titlemark"> 9.5 
</span>
<a id="x62-930009.5">
</a> <strong>Exercise</strong>s 
</h3>
</div>
<div class="nb-cell html" name="htm1">
<div class="newtheorem">
<!--l. 921-->
<p class="noindent">
<span class="head">
<span class="cmbx-10"> <strong>Exercise</strong>
</span>
<span class="cmbx-10">  9.1 
</span>
</span>
<a id="x62-930011">
</a>
<span class="cmti-10"> Which of the following queries succeed, and which fail? 
</span>
</p>
<div class="fancyvrb" id="fancyvrb423">
<a id="x62-93003r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  12 
</span>
<span class="cmtt-10">  is 
</span>
<span class="cmtt-10">  2*6. 
</span>
<br class="fancyvrb"/>
<a id="x62-93005r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x62-93007r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  14 
</span>
<span class="cmtt-10">  =\= 
</span>
<span class="cmtt-10">  2*6. 
</span>
<br class="fancyvrb"/>
<a id="x62-93009r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x62-93011r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  14 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  2*7. 
</span>
<br class="fancyvrb"/>
<a id="x62-93013r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x62-93015r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  14 
</span>
<span class="cmtt-10">  == 
</span>
<span class="cmtt-10">  2*7. 
</span>
<br class="fancyvrb"/>
<a id="x62-93017r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x62-93019r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  14 
</span>
<span class="cmtt-10">  \== 
</span>
<span class="cmtt-10">  2*7. 
</span>
<br class="fancyvrb"/>
<a id="x62-93021r10">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x62-93023r11">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  14 
</span>
<span class="cmtt-10">  =:= 
</span>
<span class="cmtt-10">  2*7. 
</span>
<br class="fancyvrb"/>
<a id="x62-93025r12">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x62-93027r13">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  [1,2,3|[d,e]] 
</span>
<span class="cmtt-10">  == 
</span>
<span class="cmtt-10">  [1,2,3,d,e]. 
</span>
<br class="fancyvrb"/>
<a id="x62-93029r14">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x62-93031r15">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  2+3 
</span>
<span class="cmtt-10">  == 
</span>
<span class="cmtt-10">  3+2. 
</span>
<br class="fancyvrb"/>
<a id="x62-93033r16">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x62-93035r17">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  2+3 
</span>
<span class="cmtt-10">  =:= 
</span>
<span class="cmtt-10">  3+2. 
</span>
<br class="fancyvrb"/>
<a id="x62-93037r18">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x62-93039r19">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  7-2 
</span>
<span class="cmtt-10">  =\= 
</span>
<span class="cmtt-10">  9-2. 
</span>
<br class="fancyvrb"/>
<a id="x62-93041r20">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x62-93043r21">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  p 
</span>
<span class="cmtt-10">  == 
</span>
<span class="cmtt-10">  ’p’. 
</span>
<br class="fancyvrb"/>
<a id="x62-93045r22">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x62-93047r23">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  p 
</span>
<span class="cmtt-10">  =\= 
</span>
<span class="cmtt-10">  ’p’. 
</span>
<br class="fancyvrb"/>
<a id="x62-93049r24">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x62-93051r25">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  vincent 
</span>
<span class="cmtt-10">  == 
</span>
<span class="cmtt-10">  VAR. 
</span>
<br class="fancyvrb"/>
<a id="x62-93053r26">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x62-93055r27">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  vincent=VAR, 
</span>
<span class="cmtt-10">  VAR==vincent. 
</span>
<br class="fancyvrb"/>
<a id="x62-93057r28">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
</div>
</div>
</div>
<div class="nb-cell html" name="htm1">
<div class="newtheorem">
<!--l. 954-->
<p class="noindent">
<span class="head">
<span class="cmbx-10"> <strong>Exercise</strong>
</span>
<span class="cmbx-10">  9.2 
</span>
</span>
<a id="x62-930582">
</a>
<span class="cmti-10"> How does Prolog respond to the following queries? 
</span>
</p>
<div class="fancyvrb" id="fancyvrb424">
<a id="x62-93060r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  .(a,.(b,.(c,[]))) 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [a,b,c]. 
</span>
<br class="fancyvrb"/>
<a id="x62-93062r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x62-93064r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  .(a,.(b,.(c,[]))) 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [a,b|[c]]. 
</span>
<br class="fancyvrb"/>
<a id="x62-93066r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x62-93068r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  .(.(a,[]),.(.(b,[]),.(.(c,[]),[]))) 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  X. 
</span>
<br class="fancyvrb"/>
<a id="x62-93070r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x62-93072r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  .(a,.(b,.(.(c,[]),[]))) 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [a,b|[c]]. 
</span>
</div>
</div>
</div>
<div class="nb-cell html" name="htm1">
<div class="newtheorem">
<!--l. 966-->
<p class="noindent">
<span class="head">
<span class="cmbx-10"> <strong>Exercise</strong>
</span>
<span class="cmbx-10">  9.3 
</span>
</span>
<a id="x62-930733">
</a>
<span class="cmti-10"> Write a two-place predicate 
</span>
<span class="verb">
<span class="cmtt-10"> termtype(Term,Type) 
</span>
</span>
<span class="cmti-10"> that takes a term 
</span>
<span class="cmti-10"> and gives back the type(s) of that term (atom, number, constant, variable, and so on). 
</span>
<span class="cmti-10"> The types should be given back in the order of their generality. The predicate should 
</span>
<span class="cmti-10"> behave in the following way. 
</span>
</p>
<div class="fancyvrb" id="fancyvrb425">
<a id="x62-93075r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  termtype(Vincent,variable). 
</span>
<br class="fancyvrb"/>
<a id="x62-93077r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x62-93079r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  termtype(mia,X). 
</span>
<br class="fancyvrb"/>
<a id="x62-93081r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  atom 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x62-93083r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  constant 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x62-93085r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  simple_term 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x62-93087r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  term 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x62-93089r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  no 
</span>
<br class="fancyvrb"/>
<a id="x62-93091r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  termtype(dead(zed),X). 
</span>
<br class="fancyvrb"/>
<a id="x62-93093r10">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  complex_term 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x62-93095r11">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  term 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x62-93097r12">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  no 
</span>
</div>
</div>
</div>
<div class="nb-cell html" name="htm1">
<div class="newtheorem">
<!--l. 988-->
<p class="noindent">
<span class="head">
<span class="cmbx-10"> <strong>Exercise</strong>
</span>
<span class="cmbx-10">  9.4 
</span>
</span>
<a id="x62-930984">
</a>
<span class="cmti-10"> Write a Prolog program that defines the predicate 
</span>
<span class="verb">
<span class="cmtt-10"> groundterm(Term) 
</span>
</span>
<span class="cmti-10"> which tests whether or not 
</span>
<span class="verb">
<span class="cmtt-10"> Term 
</span>
</span>
<span class="cmti-10"> is a ground term. Ground terms are terms 
</span>
<span class="cmti-10"> that don’t contain variables. Here are examples of how the predicate should 
</span>
<span class="cmti-10"> behave: 
</span>
</p>
<div class="fancyvrb" id="fancyvrb426">
<a id="x62-93100r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  groundterm(X). 
</span>
<br class="fancyvrb"/>
<a id="x62-93102r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  no 
</span>
<br class="fancyvrb"/>
<a id="x62-93104r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  groundterm(french(bic_mac,le_bic_mac)). 
</span>
<br class="fancyvrb"/>
<a id="x62-93106r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x62-93108r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  groundterm(french(whopper,X)). 
</span>
<br class="fancyvrb"/>
<a id="x62-93110r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  no 
</span>
</div>
</div>
</div>
<div class="nb-cell html" name="htm1">
<div class="newtheorem">
<!--l. 1003-->
<p class="noindent">
<span class="head">
<span class="cmbx-10"> <strong>Exercise</strong>
</span>
<span class="cmbx-10">  9.5 
</span>
</span>
<a id="x62-931115">
</a>
<span class="cmti-10"> Assume that we have the following operator definitions. 
</span>
</p>
<div class="fancyvrb" id="fancyvrb427">
<a id="x62-93113r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  op(300, 
</span>
<span class="cmtt-10">  xfx, 
</span>
<span class="cmtt-10">  [are, 
</span>
<span class="cmtt-10">  is_a]). 
</span>
<br class="fancyvrb"/>
<a id="x62-93115r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  op(300, 
</span>
<span class="cmtt-10">  fx, 
</span>
<span class="cmtt-10">  likes). 
</span>
<br class="fancyvrb"/>
<a id="x62-93117r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  op(200, 
</span>
<span class="cmtt-10">  xfy, 
</span>
<span class="cmtt-10">  and). 
</span>
<br class="fancyvrb"/>
<a id="x62-93119r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  op(100, 
</span>
<span class="cmtt-10">  fy, 
</span>
<span class="cmtt-10">  famous). 
</span>
</div>
<!--l. 1010-->
<p class="noindent">
<span class="cmti-10"> Which of the following are well-formed terms? What are the main operators? Give the 
</span>
<span class="cmti-10"> bracketings. 
</span>
</p>
<!--l. 1013-->
<p class="indent">
</p>
<div class="fancyvrb" id="fancyvrb428">
<a id="x62-93121r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  is_a 
</span>
<span class="cmtt-10">  witch 
</span>
<br class="fancyvrb"/>
<a id="x62-93123r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  harry 
</span>
<span class="cmtt-10">  and 
</span>
<span class="cmtt-10">  ron 
</span>
<span class="cmtt-10">  and 
</span>
<span class="cmtt-10">  hermione 
</span>
<span class="cmtt-10">  are 
</span>
<span class="cmtt-10">  friends 
</span>
<br class="fancyvrb"/>
<a id="x62-93125r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  harry 
</span>
<span class="cmtt-10">  is_a 
</span>
<span class="cmtt-10">  wizard 
</span>
<span class="cmtt-10">  and 
</span>
<span class="cmtt-10">  likes 
</span>
<span class="cmtt-10">  quidditch 
</span>
<br class="fancyvrb"/>
<a id="x62-93127r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  dumbledore 
</span>
<span class="cmtt-10">  is_a 
</span>
<span class="cmtt-10">  famous 
</span>
<span class="cmtt-10">  wizard 
</span>
</div>
</div>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse42"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse40"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse40"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse41"> front 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch9"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent">
<a id="taillpn-htmlse41">
</a>
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse41"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse41"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=#taillpn-htmlse42"> tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch9"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<h3 class="sectionHead">
<span class="titlemark"> 9.6 
</span>
<a id="x63-940009.6">
</a> Practical Session 
</h3>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> To start this session, we’ll introduce some built-in predicates for printing terms onto the screen. You should try out the following examples as we introduce them. The first predicate we want to look at is 
<span class="verb">
<span class="cmtt-10"> display/1 
</span>
</span> . 
<a id="dx63-94001">
</a> Here are some simple examples: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb429">
<a id="x63-94003r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  display(loves(vincent,mia)). 
</span>
<br class="fancyvrb"/>
<a id="x63-94005r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  loves(vincent, 
</span>
<span class="cmtt-10">  mia) 
</span>
<br class="fancyvrb"/>
<a id="x63-94007r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x63-94009r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x63-94011r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  display(’jules 
</span>
<span class="cmtt-10">  eats 
</span>
<span class="cmtt-10">  a 
</span>
<span class="cmtt-10">  big 
</span>
<span class="cmtt-10">  kahuna 
</span>
<span class="cmtt-10">  burger’). 
</span>
<br class="fancyvrb"/>
<a id="x63-94013r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  jules 
</span>
<span class="cmtt-10">  eats 
</span>
<span class="cmtt-10">  a 
</span>
<span class="cmtt-10">  big 
</span>
<span class="cmtt-10">  kahuna 
</span>
<span class="cmtt-10">  burger 
</span>
<br class="fancyvrb"/>
<a id="x63-94015r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x63-94017r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> But the really important point about 
<span class="verb">
<span class="cmtt-10"> display/1 
</span>
</span> , as the following examples demonstrate, is that it prints Prolog’s 
<span class="cmti-10"> internal representation 
</span> of terms to the screen: 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb430">
<a id="x63-94019r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  display(2+3+4). 
</span>
<br class="fancyvrb"/>
<a id="x63-94021r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  +(+(2, 
</span>
<span class="cmtt-10">  3), 
</span>
<span class="cmtt-10">  4) 
</span>
<br class="fancyvrb"/>
<a id="x63-94023r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x63-94025r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> This property of 
<span class="verb">
<span class="cmtt-10"> display/1 
</span>
</span> makes it a very useful tool for learning how operators work in Prolog. So, before going on, try the following queries. Make sure you understand why Prolog answers the way it does. 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb431">
<a id="x63-94027r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  display([a,b,c]). 
</span>
<br class="fancyvrb"/>
<a id="x63-94029r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  display(3 
</span>
<span class="cmtt-10">  is 
</span>
<span class="cmtt-10">  4 
</span>
<span class="cmtt-10">  + 
</span>
<span class="cmtt-10">  5 
</span>
<span class="cmtt-10">  / 
</span>
<span class="cmtt-10">  3). 
</span>
<br class="fancyvrb"/>
<a id="x63-94031r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  display(3 
</span>
<span class="cmtt-10">  is 
</span>
<span class="cmtt-10">  (4 
</span>
<span class="cmtt-10">  + 
</span>
<span class="cmtt-10">  5) 
</span>
<span class="cmtt-10">  / 
</span>
<span class="cmtt-10">  3). 
</span>
<br class="fancyvrb"/>
<a id="x63-94033r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  display((a:-b,c,d)). 
</span>
<br class="fancyvrb"/>
<a id="x63-94035r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  display(a:-b,c,d). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> So 
<span class="verb">
<span class="cmtt-10"> display/1 
</span>
</span> is useful when we want to look at the internal representation of terms in operator notation. But often we would prefer to see the user-friendly notation instead. For example, when reading lists it is usually more pleasant to see 
<span class="verb">
<span class="cmtt-10"> [a,b,c] 
</span>
</span> rather than 
<span class="verb">
<span class="cmtt-10"> .(a.(b.(c,[]))) 
</span>
</span> . The built-in predicate 
<span class="verb">
<span class="cmtt-10"> write/1 
</span>
</span> lets us view terms like this. 
<a id="dx63-94036">
</a> This predicate takes a term and prints it to the screen in the user-friendly notation. 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb432">
<a id="x63-94038r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  write(2+3+4). 
</span>
<br class="fancyvrb"/>
<a id="x63-94040r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  2+3+4 
</span>
<br class="fancyvrb"/>
<a id="x63-94042r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x63-94044r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x63-94046r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  write(+(2,3)). 
</span>
<br class="fancyvrb"/>
<a id="x63-94048r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  2+3 
</span>
<br class="fancyvrb"/>
<a id="x63-94050r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x63-94052r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x63-94054r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  write([a,b,c]). 
</span>
<br class="fancyvrb"/>
<a id="x63-94056r10">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  [a, 
</span>
<span class="cmtt-10">  b, 
</span>
<span class="cmtt-10">  c] 
</span>
<br class="fancyvrb"/>
<a id="x63-94058r11">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x63-94060r12">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x63-94062r13">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  write(.(a,.(b,[]))). 
</span>
<br class="fancyvrb"/>
<a id="x63-94064r14">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  [a, 
</span>
<span class="cmtt-10">  b] 
</span>
<br class="fancyvrb"/>
<a id="x63-94066r15">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> And here is what happens when the term to be written contains variables: 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb433">
<a id="x63-94068r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  write(X). 
</span>
<br class="fancyvrb"/>
<a id="x63-94070r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  _G204 
</span>
<br class="fancyvrb"/>
<a id="x63-94072r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  _G204 
</span>
<br class="fancyvrb"/>
<a id="x63-94074r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x63-94076r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x63-94078r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  a, 
</span>
<span class="cmtt-10">  write(X). 
</span>
<br class="fancyvrb"/>
<a id="x63-94080r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  a 
</span>
<br class="fancyvrb"/>
<a id="x63-94082r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  a 
</span>
<br class="fancyvrb"/>
<a id="x63-94084r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> The following example shows what happens when you give two 
<span class="verb">
<span class="cmtt-10"> write/1 
</span>
</span> commands one after the other: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb434">
<a id="x63-94086r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  write(a),write(b). 
</span>
<br class="fancyvrb"/>
<a id="x63-94088r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ab 
</span>
<br class="fancyvrb"/>
<a id="x63-94090r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x63-94092r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> That is, Prolog just executes one after the other without putting any space in between the output of the two commands. Of course, you can get Prolog to print space by telling it to write the term 
<span class="verb">
<span class="cmtt-10"> ’ 
</span>
<span class="cmtt-10">  ’ 
</span>
</span> : 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb435">
<a id="x63-94094r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  write(a),write(’ 
</span>
<span class="cmtt-10">  ’),write(b). 
</span>
<br class="fancyvrb"/>
<a id="x63-94096r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  a 
</span>
<span class="cmtt-10">  b 
</span>
<br class="fancyvrb"/>
<a id="x63-94098r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x63-94100r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> And if you want more than one space, for example five blanks, you can tell Prolog to write 
<span class="verb">
<span class="cmtt-10"> ’ 
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ’ 
</span>
</span> . 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb436">
<a id="x63-94102r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  write(a),write(’ 
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ’),write(b). 
</span>
<br class="fancyvrb"/>
<a id="x63-94104r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  a 
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  b 
</span>
<br class="fancyvrb"/>
<a id="x63-94106r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x63-94108r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Another way of printing spaces is by using the predicate 
<span class="verb">
<span class="cmtt-10"> tab/1 
</span>
</span> . 
<a id="dx63-94109">
</a> This takes a number as argument and then prints that number of spaces: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb437">
<a id="x63-94111r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  write(a),tab(5),write(b). 
</span>
<br class="fancyvrb"/>
<a id="x63-94113r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  a 
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  b 
</span>
<br class="fancyvrb"/>
<a id="x63-94115r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x63-94117r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Another predicate useful for formatting is 
<span class="verb">
<span class="cmtt-10"> nl 
</span>
</span> . 
<a id="dx63-94118">
</a> This tells Prolog to make a line-break and to go on printing on the next line. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb438">
<a id="x63-94120r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  write(a),nl,write(b). 
</span>
<br class="fancyvrb"/>
<a id="x63-94122r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  a 
</span>
<br class="fancyvrb"/>
<a id="x63-94124r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  b 
</span>
<br class="fancyvrb"/>
<a id="x63-94126r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Time to apply what you have just learned. In the last chapter we saw how extra arguments in DCGs could be used to build parse trees. For example, to the query 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb439">
<a id="x63-94128r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  s(T,[a,man,shoots,a,woman],[]) 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Prolog would answer 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb440">
<a id="x63-94130r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  s(np(det(a),n(man)),vp(v(shoots),np(det(a),n(woman)))). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> This term is a representation of the parse tree, but it is not a very readable representation. It would be nicer if Prolog printed something like the following (this style of printing is usually called pretty printing): 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb441">
<a id="x63-94132r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  s( 
</span>
<br class="fancyvrb"/>
<a id="x63-94134r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  np( 
</span>
<br class="fancyvrb"/>
<a id="x63-94136r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  det(a) 
</span>
<br class="fancyvrb"/>
<a id="x63-94138r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  n(man)) 
</span>
<br class="fancyvrb"/>
<a id="x63-94140r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  vp( 
</span>
<br class="fancyvrb"/>
<a id="x63-94142r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  v(shoots) 
</span>
<br class="fancyvrb"/>
<a id="x63-94144r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  np( 
</span>
<br class="fancyvrb"/>
<a id="x63-94146r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  det(a) 
</span>
<br class="fancyvrb"/>
<a id="x63-94148r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  n(woman)))) 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Write a predicate 
<span class="verb">
<span class="cmtt-10"> pptree/1 
</span>
</span> that takes a complex term representing a tree as its argument and prints the tree in a more readable form. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Time to practice writing operator definitions. In the practical session of Chapter  
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch7"> 7 
<!--tex4ht:ref: CHAPTER7 -->
</a> , you were asked to write a DCG generating propositional logic formulas. The input you had to use was a bit awkward though. The formula 
<span class="cmsy-10"> ¬ 
</span> ( 
<span class="cmmi-10"> p 
</span>
<span class="cmsy-10"> → 
</span>
<span class="cmmi-10"> q 
</span> ) had to be represented as 
<span class="verb">
<span class="cmtt-10"> [not, 
</span>
<span class="cmtt-10">  ’(’, 
</span>
<span class="cmtt-10">  p, 
</span>
<span class="cmtt-10">  implies, 
</span>
<span class="cmtt-10">  q, 
</span>
<span class="cmtt-10">  ’)’] 
</span>
</span> . Now that you know about operators, you can do things rather more neatly. Write operator definitions for 
<span class="verb">
<span class="cmtt-10"> not 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> and 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> or 
</span>
</span> , and 
<span class="verb">
<span class="cmtt-10"> implies 
</span>
</span> , so that Prolog accepts (and correctly brackets) propositional logic formulas. Use 
<span class="verb">
<span class="cmtt-10"> display/1 
</span>
</span> to check your code. It should yield the following kinds of response: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb442">
<a id="x63-94150r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  display(not(p 
</span>
<span class="cmtt-10">  implies 
</span>
<span class="cmtt-10">  q)). 
</span>
<br class="fancyvrb"/>
<a id="x63-94152r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  not(implies(p,q)). 
</span>
<br class="fancyvrb"/>
<a id="x63-94154r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x63-94156r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x63-94158r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x63-94160r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  display(not 
</span>
<span class="cmtt-10">  p 
</span>
<span class="cmtt-10">  implies 
</span>
<span class="cmtt-10">  q). 
</span>
<br class="fancyvrb"/>
<a id="x63-94162r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  implies(not(p),q) 
</span>
<br class="fancyvrb"/>
<a id="x63-94164r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x63-94166r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse41"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse41"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse42"> front 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch9"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent">
<a id="taillpn-htmlse42">
</a>
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse44"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=#taillpn-htmlse43"> tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch10"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<h3 class="sectionHead">
<span class="titlemark"> 10.1 
</span>
<a id="x65-9600010.1">
</a> The Cut 
</h3>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Automatic backtracking is one of the most characteristic features of Prolog. But backtracking can lead to inefficiency. Sometimes Prolog can waste time exploring possibilities that lead nowhere. It would be pleasant to have some control over this aspect of its behaviour, but so far we have only seen two (rather crude) ways of doing this: changing rule order, and changing goal order. But there is another way. There is a built-in Prolog predicate 
<span class="verb">
<span class="cmtt-10"> ! 
</span>
</span> (the exclamation mark), called cut, 
<a id="dx65-96001">
</a> which offers a more direct way of exercising control over the way Prolog looks for solutions. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> What exactly is cut, and what does it do? It’s simply a special atom that we can use when writing clauses. For example, 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb443">
<a id="x65-96003r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  p(X):- 
</span>
<span class="cmtt-10">  b(X), 
</span>
<span class="cmtt-10">  c(X), 
</span>
<span class="cmtt-10">  !, 
</span>
<span class="cmtt-10">  d(X), 
</span>
<span class="cmtt-10">  e(X). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> is a perfectly good Prolog rule. As for what cut does, first of all, it is a goal that 
<span class="cmti-10"> always 
</span> succeeds. Second, and more importantly, it has a side effect. Suppose that some goal makes use of this clause (we call this goal the parent goal). Then the cut commits Prolog to any choices that were made since the parent goal was unified with the left hand side of the rule (including, importantly, the choice of using that particular clause). Let’s look at an example to see what this means. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> First consider the following piece of cut-free code: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb444">
<a id="x65-96005r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  p(X):- 
</span>
<span class="cmtt-10">  a(X). 
</span>
<br class="fancyvrb"/>
<a id="x65-96007r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x65-96009r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  p(X):- 
</span>
<span class="cmtt-10">  b(X), 
</span>
<span class="cmtt-10">  c(X), 
</span>
<span class="cmtt-10">  d(X), 
</span>
<span class="cmtt-10">  e(X). 
</span>
<br class="fancyvrb"/>
<a id="x65-96011r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x65-96013r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  p(X):- 
</span>
<span class="cmtt-10">  f(X). 
</span>
<br class="fancyvrb"/>
<a id="x65-96015r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x65-96017r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  a(1). 
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  b(1). 
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  c(1). 
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  d(2). 
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  e(2). 
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  f(3). 
</span>
<br class="fancyvrb"/>
<a id="x65-96019r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  b(2). 
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  c(2). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> If we pose the query 
<span class="verb">
<span class="cmtt-10"> p(X) 
</span>
</span> we will get the following responses: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb445">
<a id="x65-96021r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  1 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x65-96023r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x65-96025r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  2 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x65-96027r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x65-96029r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  3 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x65-96031r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  no 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Here is the search tree that explains how Prolog finds these three solutions. Note that it has to backtrack once, namely when it enters the second clause for 
<span class="verb">
<span class="cmtt-10"> p/1 
</span>
</span> and decides to unify the first goal with 
<span class="verb">
<span class="cmtt-10"> b(1) 
</span>
</span> instead of 
<span class="verb">
<span class="cmtt-10"> b(2) 
</span>
</span> . 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="center">
<!--l. 81-->
<p class="noindent">
</p>
<!--l. 82-->
<p class="noindent">
<img alt="*Pic not found*" src="html/chap10-pspic1.ps.png"/>
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> But now suppose we insert a cut in the second clause: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb446">
<a id="x65-96033r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  p(X):- 
</span>
<span class="cmtt-10">  b(X), 
</span>
<span class="cmtt-10">  c(X), 
</span>
<span class="cmtt-10">  !, 
</span>
<span class="cmtt-10">  d(X), 
</span>
<span class="cmtt-10">  e(X). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> If we now pose the query 
<span class="verb">
<span class="cmtt-10"> p(X) 
</span>
</span> we will get the following responses: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb447">
<a id="x65-96035r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  1 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x65-96037r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  no 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> What’s going on here? Let’s consider. 
</p>
</div>

<div class="nb-cell html" name="htm1">
<ol class="enumerate1">
<li class="enumerate" id="x65-96039x1">
<span class="verb">
<span class="cmtt-10"> p(X) 
</span>
</span> is first unified with the first rule, so we get a new goal 
<span class="verb">
<span class="cmtt-10"> a(X) 
</span>
</span> . By instantiating 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> to 
<span class="verb">
<span class="cmtt-10"> 1 
</span>
</span> , Prolog unifies 
<span class="verb">
<span class="cmtt-10"> a(X) 
</span>
</span> with the fact 
<span class="verb">
<span class="cmtt-10"> a(1) 
</span>
</span> and we have found a solution. So far, this is exactly what happened in the first version of the program. 
</li>
<li class="enumerate" id="x65-96041x2"> We then go on and look for a second solution. 
<span class="verb">
<span class="cmtt-10"> p(X) 
</span>
</span> is unified with the second rule, so we get the new goals 
<span class="verb">
<span class="cmtt-10"> b(X),c(X),!,d(X),e(X) 
</span>
</span> . By instantiating 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> to 
<span class="verb">
<span class="cmtt-10"> 1 
</span>
</span> , Prolog unifies 
<span class="verb">
<span class="cmtt-10"> b(X) 
</span>
</span> with the fact 
<span class="verb">
<span class="cmtt-10"> b(1) 
</span>
</span> , so we now have the goals 
<span class="verb">
<span class="cmtt-10"> c(1),!,d(1),e(1) 
</span>
</span> . But 
<span class="verb">
<span class="cmtt-10"> c(1) 
</span>
</span> is in the database so this simplifies to 
<span class="verb">
<span class="cmtt-10"> !,d(1),e(1) 
</span>
</span> . 
</li>
<li class="enumerate" id="x65-96043x3"> Now for the big change. The 
<span class="verb">
<span class="cmtt-10"> ! 
</span>
</span> goal succeeds (as it always does) and commits us to the choices made so far. In particular, we are committed to having 
<span class="verb">
<span class="cmtt-10"> X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  1 
</span>
</span> , and we are also committed to using the second rule. 
</li>
<li class="enumerate" id="x65-96045x4"> But 
<span class="verb">
<span class="cmtt-10"> d(1) 
</span>
</span> fails. And there’s no way we can re-satisfy the goal 
<span class="verb">
<span class="cmtt-10"> p(X) 
</span>
</span> . Sure, if we were allowed to try the value 
<span class="verb">
<span class="cmtt-10"> X=2 
</span>
</span> we could use the second rule to generate a solution (that’s what happened in the original version of the program). But we 
<span class="cmti-10"> can’t 
</span> do this: the cut has removed this possibility from the search tree. And sure, if we were allowed to try the third rule, we could generate the solution 
<span class="verb">
<span class="cmtt-10"> X=3 
</span>
</span> . But we 
<span class="cmti-10"> can’t 
</span> do this: once again, the cut has removed this possibility from the search tree. 
</li>
</ol>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> If you look at the search tree, you’ll see that this all boils down to the following: search stops when the goal 
<span class="verb">
<span class="cmtt-10"> d(1) 
</span>
</span> doesn’t lead to any node where an alternative choice is available. The crosses in the search tree indicate the branches that the cut trimmed away. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="center">
<!--l. 133-->
<p class="noindent">
</p>
<!--l. 134-->
<p class="noindent">
<img alt="*Pic not found*" src="html/chap10-pspic4.ps.png"/>
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> One point is worth emphasising: the cut only commits us to choices made since the parent goal was unified with the left hand side of the clause containing the cut. For example, in a rule of the form 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb448">
<a id="x65-96047r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  q:- 
</span>
<span class="cmtt-10">  p1,...,pn, 
</span>
<span class="cmtt-10">  !, 
</span>
<span class="cmtt-10">  r1,...,rm 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> when we reach the cut it commits us to using this particular clause for 
<span class="verb">
<span class="cmtt-10"> q 
</span>
</span> and it commits us to the choices made when evaluating 
<span class="verb">
<span class="cmtt-10"> p1,...,pn 
</span>
</span> . However, we 
<span class="cmti-10"> are 
</span> free to backtrack among the 
<span class="verb">
<span class="cmtt-10"> r1,...,rm 
</span>
</span> and we are also free to backtrack among alternatives for choices that were made before reaching the goal 
<span class="verb">
<span class="cmtt-10"> q 
</span>
</span> . A concrete example will make this clear. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> First consider the following cut-free program: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb449">
<a id="x65-96049r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  s(X,Y):- 
</span>
<span class="cmtt-10">  q(X,Y). 
</span>
<br class="fancyvrb"/>
<a id="x65-96051r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  s(0,0). 
</span>
<br class="fancyvrb"/>
<a id="x65-96053r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x65-96055r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  q(X,Y):- 
</span>
<span class="cmtt-10">  i(X), 
</span>
<span class="cmtt-10">  j(Y). 
</span>
<br class="fancyvrb"/>
<a id="x65-96057r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x65-96059r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  i(1). 
</span>
<br class="fancyvrb"/>
<a id="x65-96061r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  i(2). 
</span>
<br class="fancyvrb"/>
<a id="x65-96063r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x65-96065r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  j(1). 
</span>
<br class="fancyvrb"/>
<a id="x65-96067r10">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  j(2). 
</span>
<br class="fancyvrb"/>
<a id="x65-96069r11">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  j(3). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Here’s how it behaves: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb450">
<a id="x65-96071r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  s(X,Y). 
</span>
<br class="fancyvrb"/>
<a id="x65-96073r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x65-96075r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  1 
</span>
<br class="fancyvrb"/>
<a id="x65-96077r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Y 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  1 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x65-96079r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x65-96081r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  1 
</span>
<br class="fancyvrb"/>
<a id="x65-96083r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Y 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  2 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x65-96085r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x65-96087r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  1 
</span>
<br class="fancyvrb"/>
<a id="x65-96089r10">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Y 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  3 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x65-96091r11">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x65-96093r12">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  2 
</span>
<br class="fancyvrb"/>
<a id="x65-96095r13">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Y 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  1 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x65-96097r14">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x65-96099r15">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  2 
</span>
<br class="fancyvrb"/>
<a id="x65-96101r16">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Y 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  2 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x65-96103r17">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x65-96105r18">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  2 
</span>
<br class="fancyvrb"/>
<a id="x65-96107r19">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Y 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  3 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x65-96109r20">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x65-96111r21">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  0 
</span>
<br class="fancyvrb"/>
<a id="x65-96113r22">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Y 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  0; 
</span>
<br class="fancyvrb"/>
<a id="x65-96115r23">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  no 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> And this is the corresponding search tree: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="center">
<!--l. 196-->
<p class="noindent">
</p>
<!--l. 197-->
<p class="noindent">
<img alt="*Pic not found*" src="html/chap10-pspic5.ps.png"/>
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Suppose we add a cut to the clause defining 
<span class="verb">
<span class="cmtt-10"> q/2 
</span>
</span> : 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb451">
<a id="x65-96117r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  q(X,Y):- 
</span>
<span class="cmtt-10">  i(X), 
</span>
<span class="cmtt-10">  !, 
</span>
<span class="cmtt-10">  j(Y). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Now the program behaves as follows: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb452">
<a id="x65-96119r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  s(X,Y). 
</span>
<br class="fancyvrb"/>
<a id="x65-96121r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x65-96123r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  1 
</span>
<br class="fancyvrb"/>
<a id="x65-96125r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Y 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  1 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x65-96127r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x65-96129r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  1 
</span>
<br class="fancyvrb"/>
<a id="x65-96131r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Y 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  2 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x65-96133r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x65-96135r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  1 
</span>
<br class="fancyvrb"/>
<a id="x65-96137r10">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Y 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  3 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x65-96139r11">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x65-96141r12">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  0 
</span>
<br class="fancyvrb"/>
<a id="x65-96143r13">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Y 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  0; 
</span>
<br class="fancyvrb"/>
<a id="x65-96145r14">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  no 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Let’s see why. 
</p>
</div>

<div class="nb-cell html" name="htm1">
<ol class="enumerate1">
<li class="enumerate" id="x65-96147x1">
<span class="verb">
<span class="cmtt-10"> s(X,Y) 
</span>
</span> is first unified with the first rule, which gives us a new goal 
<span class="verb">
<span class="cmtt-10"> q(X,Y) 
</span>
</span> . 
</li>
<li class="enumerate" id="x65-96149x2">
<span class="verb">
<span class="cmtt-10"> q(X,Y) 
</span>
</span> is then unified with the third rule, so we get the new goals 
<span class="verb">
<span class="cmtt-10"> i(X),!,j(Y) 
</span>
</span> . By instantiating 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> to 
<span class="verb">
<span class="cmtt-10"> 1 
</span>
</span> , Prolog unifies 
<span class="verb">
<span class="cmtt-10"> i(X) 
</span>
</span> with the fact 
<span class="verb">
<span class="cmtt-10"> i(1) 
</span>
</span> . This leaves us with the goal 
<span class="verb">
<span class="cmtt-10"> !,j(Y) 
</span>
</span> . The cut, of course, succeeds, and commits us to the choices made so far. 
</li>
<li class="enumerate" id="x65-96151x3"> But what are these choices? These: that 
<span class="verb">
<span class="cmtt-10"> X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  1 
</span>
</span> , and that we are using this clause. But note: we have 
<span class="cmti-10"> not 
</span> yet chosen a value for 
<span class="verb">
<span class="cmtt-10"> Y 
</span>
</span> . 
</li>
<li class="enumerate" id="x65-96153x4"> Prolog then goes on, and by instantiating 
<span class="verb">
<span class="cmtt-10"> Y 
</span>
</span> to 
<span class="verb">
<span class="cmtt-10"> 1 
</span>
</span> , Prolog unifies 
<span class="verb">
<span class="cmtt-10"> j(Y) 
</span>
</span> with the fact 
<span class="verb">
<span class="cmtt-10"> j(1) 
</span>
</span> . So we have found a solution. 
</li>
<li class="enumerate" id="x65-96155x5"> But we can find more. Prolog 
<span class="cmti-10"> is 
</span> free to try another value for 
<span class="verb">
<span class="cmtt-10"> Y 
</span>
</span> . So it backtracks and sets 
<span class="verb">
<span class="cmtt-10"> Y 
</span>
</span> to 
<span class="verb">
<span class="cmtt-10"> 2 
</span>
</span> , thus finding a second solution. And in fact it can find another solution: on backtracking again, it sets 
<span class="verb">
<span class="cmtt-10"> Y 
</span>
</span> to 
<span class="verb">
<span class="cmtt-10"> 3 
</span>
</span> , thus finding a third solution. 
</li>
<li class="enumerate" id="x65-96157x6"> But those are all alternatives for 
<span class="verb">
<span class="cmtt-10"> j(X) 
</span>
</span> . Backtracking to the left of the cut is not allowed, so it 
<span class="cmti-10"> can’t 
</span> reset 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> to 
<span class="verb">
<span class="cmtt-10"> 2 
</span>
</span> , so it won’t find the next three solutions that the cut-free program found. Backtracking over goals that were reached before 
<span class="verb">
<span class="cmtt-10"> q(X,Y) 
</span>
</span> is allowed however, so that Prolog will find the second clause for 
<span class="verb">
<span class="cmtt-10"> s/2 
</span>
</span> . 
</li>
</ol>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Here’s the corresponding search tree: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="center">
<!--l. 264-->
<p class="noindent">
</p>
<!--l. 265-->
<p class="noindent">
<img alt="*Pic not found*" src="html/chap10-pspic6.ps.png"/>
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse44"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse43"> front 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch10"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent">
<a id="taillpn-htmlse43">
</a>
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse45"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse43"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse43"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=#taillpn-htmlse44"> tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch10"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<h3 class="sectionHead">
<span class="titlemark"> 10.2 
</span>
<a id="x66-9700010.2">
</a> Using Cut 
</h3>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Well, we now know what cut is. But how do we use it in practice, and why is it so useful? As a first example, let’s define a (cut-free) predicate 
<span class="verb">
<span class="cmtt-10"> max/3 
</span>
</span> which takes integers as arguments 
<a id="dx66-97001">
</a> and succeeds if the third argument is the maximum of the first two. For example, the queries 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb453">
<a id="x66-97003r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  max(2,3,3). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> and 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb454">
<a id="x66-97005r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  max(3,2,3). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> and 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb455">
<a id="x66-97007r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  max(3,3,3). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> should succeed, and the queries 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb456">
<a id="x66-97009r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  max(2,3,2). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> and 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb457">
<a id="x66-97011r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  max(2,3,5). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> should fail. And of course, we also want the program to work when the third argument is a variable. That is, we want the program to be able to find the maximum of the first two arguments for us: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb458">
<a id="x66-97013r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  max(2,3,Max). 
</span>
<br class="fancyvrb"/>
<a id="x66-97015r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x66-97017r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Max 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  3 
</span>
<br class="fancyvrb"/>
<a id="x66-97019r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x66-97021r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x66-97023r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  max(2,1,Max). 
</span>
<br class="fancyvrb"/>
<a id="x66-97025r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x66-97027r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Max 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  2 
</span>
<br class="fancyvrb"/>
<a id="x66-97029r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Now, it is easy to write a program that does this. Here’s a first attempt: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb459">
<a id="x66-97031r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  max(X,Y,Y):- 
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  =&lt; 
</span>
<span class="cmtt-10">  Y. 
</span>
<br class="fancyvrb"/>
<a id="x66-97033r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  max(X,Y,X):- 
</span>
<span class="cmtt-10">  X&gt;Y. 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> This is a perfectly correct program, and we might be tempted simply to stop here. But we shouldn’t: it’s not good enough. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> What’s the problem? There is a potential inefficiency. Suppose this definition is used as part of a larger program, and somewhere along the way 
<span class="verb">
<span class="cmtt-10"> max(3,4,Y) 
</span>
</span> is called. The program will correctly set 
<span class="verb">
<span class="cmtt-10"> Y=4 
</span>
</span> . But now consider what happens if at some stage backtracking is forced. The program will try to re-satisfy 
<span class="verb">
<span class="cmtt-10"> max(3,4,Y) 
</span>
</span> using the second clause. This is completely pointless: the maximum of 
<span class="verb">
<span class="cmtt-10"> 3 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> 4 
</span>
</span> is 
<span class="verb">
<span class="cmtt-10"> 4 
</span>
</span> and that’s that. There is no second solution to find. To put it another way: the two clauses in the above program are mutually exclusive: if the first succeeds, the second must fail and vice versa. So attempting to re-satisfy this clause is a complete waste of time. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> With the help of cut, this is easy to fix. We need to insist that Prolog should never try both clauses, and the following code does this: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb460">
<a id="x66-97035r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  max(X,Y,Y) 
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  =&lt; 
</span>
<span class="cmtt-10">  Y,!. 
</span>
<br class="fancyvrb"/>
<a id="x66-97037r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  max(X,Y,X) 
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  X&gt;Y. 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Note how this works. Prolog will reach the cut if 
<span class="verb">
<span class="cmtt-10"> max(X,Y,Y) 
</span>
</span> is called and 
<span class="verb">
<span class="cmtt-10"> X 
</span>
<span class="cmtt-10">  =&lt; 
</span>
<span class="cmtt-10">  Y 
</span>
</span> succeeds. In this case, the second argument is the maximum, and that’s that, and the cut commits us to this choice. On the other hand, if 
<span class="verb">
<span class="cmtt-10"> X 
</span>
<span class="cmtt-10">  =&lt; 
</span>
<span class="cmtt-10">  Y 
</span>
</span> fails, then Prolog goes onto the second clause instead. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Note that this cut does 
<span class="cmti-10"> not 
</span> change the meaning of the program. Our new code gives exactly the same answers as the old one, but it’s more efficient. In fact, the program is 
<span class="cmti-10"> exactly 
</span> the same as the previous version, except for the cut, and this is a pretty good sign that the cut is a sensible one. Cuts like this, which don’t change the meaning of a program, have a special name: they’re called green cuts. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> But some readers will dislike this code. After all, isn’t the second line redundant? If we have to use this line, we already know that the first argument is bigger that the second. Couldn’t we squeeze out a little more efficiency with the help of our new cut construct? Let’s try. Here’s a first (faulty) attempt: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb461">
<a id="x66-97039r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  max(X,Y,Y) 
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  =&lt; 
</span>
<span class="cmtt-10">  Y,!. 
</span>
<br class="fancyvrb"/>
<a id="x66-97041r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  max(X,Y,X). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Note that is the same as our earlier green cut 
<span class="verb">
<span class="cmtt-10"> max/3 
</span>
</span> , except that we have got rid of the 
<span class="verb">
<span class="cmtt-10"> &gt; 
</span>
</span> test in the second clause. How good is it? Well, for some queries it’s fine. In particular, it answers correctly when we pose queries in which the third argument is a variable. For example: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb462">
<a id="x66-97043r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  max(100,101,X). 
</span>
<br class="fancyvrb"/>
<a id="x66-97045r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x66-97047r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  101 
</span>
<br class="fancyvrb"/>
<a id="x66-97049r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> and 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb463">
<a id="x66-97051r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  max(3,2,X). 
</span>
<br class="fancyvrb"/>
<a id="x66-97053r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x66-97055r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  3 
</span>
<br class="fancyvrb"/>
<a id="x66-97057r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Nonetheless, it’s 
<span class="cmti-10"> not 
</span> the same as the green cut program: the new 
<span class="verb">
<span class="cmtt-10"> max/3 
</span>
</span> does 
<span class="cmti-10"> not 
</span> work correctly. Consider what happens when all three arguments are instantiated. For example, consider the query 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb464">
<a id="x66-97059r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  max(2,3,2). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Obviously this query should fail. But in our new version, it will succeed! Why? Well, this query simply won’t unify with the head of the first clause, so Prolog goes straight to the second clause. And the query will unify with the second clause, and (trivially) the query succeeds! So maybe getting rid of that 
<span class="verb">
<span class="cmtt-10"> &gt; 
</span>
</span> test wasn’t quite so smart after all. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> But there is another way. The problem with the new code is simply that we carried out variable unification 
<span class="cmti-10"> before 
</span> we traversed the cut. Suppose we handle our variables a little more intelligently (using three variables instead of two) and explicitly unify 
<span class="cmti-10"> after 
</span> we have crossed the cut: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb465">
<a id="x66-97061r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  max(X,Y,Z) 
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  =&lt; 
</span>
<span class="cmtt-10">  Y,!, 
</span>
<span class="cmtt-10">  Y 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  Z. 
</span>
<br class="fancyvrb"/>
<a id="x66-97063r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  max(X,Y,X). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> As the reader should check, this program does work, and (as we hoped for) it avoids the explicit comparison made in the second clause of our green cut version of 
<span class="verb">
<span class="cmtt-10"> max/3 
</span>
</span> . 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> But there is an important difference between the new version of the program and the green cut version. The cut in the new program is a classic example of what is known as a red cut. As this terminology is supposed to suggest, such cuts are potentially dangerous. Why? Because if we take out such a cut, we 
<span class="cmti-10"> don’t 
</span> get an equivalent program. That is, if we remove the cut, the resulting code does 
<span class="cmti-10"> not 
</span> compute the maximum of two numbers any more. To put it another way, the presence of the cut is 
<span class="cmti-10"> indispensable 
</span> to the correct functioning of the program. (This was not the case in the green cut version — the cut there merely improved efficiency.) Because red cuts are indispensable cuts, their presence means that programs containing them are not fully declarative. Now, red cuts can be useful on occasions, but beware! Their use can lead to subtle programming mistakes and make code hard to debug. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> So, what to do? It’s probably best to work as follows. Try and get a good, clear, cut-free program working, and only then try to improve its efficiency by using cuts. Use green cuts whenever possible. Red cuts should be used only when absolutely necessary, and it’s a good idea to explicitly comment on any red cuts in your code. Working this way will maximise your chances of striking a good balance between declarative clarity and procedural efficiency. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse45"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse43"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse43"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse44"> front 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch10"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent">
<a id="taillpn-htmlse44">
</a>
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse46"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse44"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse44"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=#taillpn-htmlse45"> tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch10"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<h3 class="sectionHead">
<span class="titlemark"> 10.3 
</span>
<a id="x67-9800010.3">
</a> Negation as Failure 
</h3>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> One of Prolog’s most useful features is the simple way it lets us state generalisations. To say that Vincent enjoys burgers we just write: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb466">
<a id="x67-98002r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  enjoys(vincent,X) 
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  burger(X). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> But in real life rules have exceptions. Perhaps Vincent doesn’t like Big Kahuna burgers. That is, perhaps the correct rule is really: Vincent enjoys burgers, 
<span class="cmti-10"> except 
</span> Big Kahuna burgers. Fine. But how do we state this in Prolog? 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> As a first step, let’s introduce another built-in predicate: 
<span class="verb">
<span class="cmtt-10"> fail/0 
</span>
</span> . As its name suggests, 
<span class="verb">
<span class="cmtt-10"> fail/0 
</span>
</span> is a special symbol that will immediately fail when Prolog encounters it as a goal. That may not sound too useful, but remember: 
<span class="cmti-10"> when Prolog 
</span>
<span class="cmti-10"> fails, it tries to backtrack 
</span> . Thus 
<span class="verb">
<span class="cmtt-10"> fail/0 
</span>
</span> can be viewed as an instruction to force backtracking. And when used in combination with cut, which 
<span class="cmti-10"> blocks 
</span> backtracking, 
<span class="verb">
<span class="cmtt-10"> fail/0 
</span>
</span> enables us to write some interesting programs, and in particular, it lets us define exceptions to general rules. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Consider the following code: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb467">
<a id="x67-98004r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  enjoys(vincent,X) 
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  big_kahuna_burger(X),!,fail. 
</span>
<br class="fancyvrb"/>
<a id="x67-98006r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  enjoys(vincent,X) 
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  burger(X). 
</span>
<br class="fancyvrb"/>
<a id="x67-98008r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x67-98010r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  burger(X) 
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  big_mac(X). 
</span>
<br class="fancyvrb"/>
<a id="x67-98012r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  burger(X) 
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  big_kahuna_burger(X). 
</span>
<br class="fancyvrb"/>
<a id="x67-98014r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  burger(X) 
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  whopper(X). 
</span>
<br class="fancyvrb"/>
<a id="x67-98016r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x67-98018r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  big_mac(a). 
</span>
<br class="fancyvrb"/>
<a id="x67-98020r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  big_kahuna_burger(b). 
</span>
<br class="fancyvrb"/>
<a id="x67-98022r10">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  big_mac(c). 
</span>
<br class="fancyvrb"/>
<a id="x67-98024r11">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  whopper(d). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> The first two lines describe Vincent’s preferences. The last six lines describe a world containing four burgers, 
<span class="verb">
<span class="cmtt-10"> a 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> b 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> c 
</span>
</span> , and 
<span class="verb">
<span class="cmtt-10"> d 
</span>
</span> . We’re also given information about what kinds of burgers they are. Given that the first two lines really do describe Vincent’s preferences (that is, that he likes all burgers except Big Kahuna burgers) then he should enjoy burgers 
<span class="verb">
<span class="cmtt-10"> a 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> c 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> d 
</span>
</span> , but not 
<span class="verb">
<span class="cmtt-10"> b 
</span>
</span> . And indeed, this is what happens: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb468">
<a id="x67-98026r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  enjoys(vincent,a). 
</span>
<br class="fancyvrb"/>
<a id="x67-98028r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x67-98030r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x67-98032r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  enjoys(vincent,b). 
</span>
<br class="fancyvrb"/>
<a id="x67-98034r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  no 
</span>
<br class="fancyvrb"/>
<a id="x67-98036r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x67-98038r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  enjoys(vincent,c). 
</span>
<br class="fancyvrb"/>
<a id="x67-98040r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x67-98042r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x67-98044r10">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  enjoys(vincent,d). 
</span>
<br class="fancyvrb"/>
<a id="x67-98046r11">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> How does this work? The key is the combination of 
<span class="verb">
<span class="cmtt-10"> ! 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> fail/0 
</span>
</span> in the first line (this even has a name: it’s called the cut-fail combination). When we pose the query 
<span class="verb">
<span class="cmtt-10"> enjoys(vincent,b) 
</span>
</span> , the first rule applies, and we reach the cut. This commits us to the choices we have made, and in particular, blocks access to the second rule. But then we hit 
<span class="verb">
<span class="cmtt-10"> fail/0 
</span>
</span> . This tries to force backtracking, but the cut blocks it, and so our query fails. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> This is interesting, but it’s not ideal. For a start, note that the ordering of the rules is crucial: if we reverse the first two lines, we 
<span class="cmti-10"> don’t 
</span> get the behaviour we want. Similarly, the cut is crucial: if we remove it, the program doesn’t behave in the same way (so this is a 
<span class="cmti-10"> red 
</span> cut). In short, we’ve got two mutually dependent clauses that make intrinsic use of the procedural aspects of Prolog. Something useful is clearly going on here, but it would be better if we could extract the useful part and package it in a more robust way. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> And we can. The crucial observation is that the first clause is essentially a way of saying that Vincent does 
<span class="cmti-10"> not 
</span> enjoy X if X is a Big Kahuna burger. That is, the cut-fail combination seems to be offering us some form of negation. And indeed, this is the crucial generalisation: the cut-fail combination lets us define a form of negation called negation as failure. Here’s how: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb469">
<a id="x67-98048r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  neg(Goal) 
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  Goal,!,fail. 
</span>
<br class="fancyvrb"/>
<a id="x67-98050r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  neg(Goal). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> For any Prolog goal, 
<span class="verb">
<span class="cmtt-10"> neg(Goal) 
</span>
</span> will succeed precisely if 
<span class="verb">
<span class="cmtt-10"> Goal 
</span>
</span> does 
<span class="cmti-10"> not 
</span> succeed. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Using our new 
<span class="verb">
<span class="cmtt-10"> neg/1 
</span>
</span> predicate, we can describe Vincent’s preferences in a much clearer way: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb470">
<a id="x67-98052r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  enjoys(vincent,X) 
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  burger(X), 
</span>
<br class="fancyvrb"/>
<a id="x67-98054r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  neg(big_kahuna_burger(X)). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> That is, Vincent enjoys X if X is a burger and X is not a Big Kahuna burger. This is quite close to our original statement: Vincent enjoys burgers, except Big Kahuna burgers. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Negation as failure is an important tool. Not only does it offer useful expressivity (notably, the ability to describe exceptions) it also offers it in a relatively safe form. By working with negation as failure (instead of with the lower level cut-fail combination) we have a better chance of avoiding the programming errors that often accompany the use of red cuts. In fact, negation as failure is so useful that it comes built-in as part of standard Prolog, so we don’t have to define it at all. In standard Prolog the operator 
<span class="verb">
<span class="cmtt-10"> \+ 
</span>
</span> means negation as failure, so we could define Vincent’s preferences as follows: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb471">
<a id="x67-98056r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  enjoys(vincent,X) 
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  burger(X), 
</span>
<br class="fancyvrb"/>
<a id="x67-98058r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  \+ 
</span>
<span class="cmtt-10">  big_kahuna_burger(X). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Nonetheless, a couple of words of warning are in order: 
<span class="cmti-10"> don’t 
</span> make the mistake of thinking that negation as failure works just like logical negation. It doesn’t. Consider again our burger world: 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb472">
<a id="x67-98060r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  burger(X) 
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  big_mac(X). 
</span>
<br class="fancyvrb"/>
<a id="x67-98062r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  burger(X) 
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  big_kahuna_burger(X). 
</span>
<br class="fancyvrb"/>
<a id="x67-98064r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  burger(X) 
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  whopper(X). 
</span>
<br class="fancyvrb"/>
<a id="x67-98066r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x67-98068r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  big_mac(a). 
</span>
<br class="fancyvrb"/>
<a id="x67-98070r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  big_kahuna_burger(b). 
</span>
<br class="fancyvrb"/>
<a id="x67-98072r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  big_mac(c). 
</span>
<br class="fancyvrb"/>
<a id="x67-98074r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  whopper(d). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> If we pose the query 
<span class="verb">
<span class="cmtt-10"> enjoys(vincent,X) 
</span>
</span> we get the correct sequence of responses: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb473">
<a id="x67-98076r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  a 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x67-98078r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x67-98080r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  c 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x67-98082r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x67-98084r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  d 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x67-98086r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  no 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> But now suppose we rewrite the first line as follows: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb474">
<a id="x67-98088r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  enjoys(vincent,X) 
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  \+ 
</span>
<span class="cmtt-10">  big_kahuna_burger(X), 
</span>
<span class="cmtt-10">  burger(X). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Note that from a declarative point of view, this should make no difference: after all, 
<span class="cmti-10"> burger(x) and not big kahuna burger(x) 
</span> is logically equivalent to 
<span class="cmti-10"> not big kahuna 
</span>
<span class="cmti-10"> burger(x) and burger(x) 
</span> . That is, no matter what the variable 
<span class="cmti-10"> x 
</span> denotes, it is impossible for one of these expressions to be true and the other false. Nonetheless, here’s what happens when we pose the same query: 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb475">
<a id="x67-98090r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  enjoys(vincent,X). 
</span>
<br class="fancyvrb"/>
<a id="x67-98092r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x67-98094r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  no 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> What’s going on? Well, in the modified database, the first thing that Prolog has to check is whether 
<span class="verb">
<span class="cmtt-10"> \+ 
</span>
<span class="cmtt-10">  big_kahuna_burger(X) 
</span>
</span> holds, which means that it must check whether 
<span class="verb">
<span class="cmtt-10"> big_kahuna_burger(X) 
</span>
</span> fails. But this succeeds. After all, the database contains the information 
<span class="verb">
<span class="cmtt-10"> big_kahuna_burger(b) 
</span>
</span> . So the query 
<span class="verb">
<span class="cmtt-10"> \+ 
</span>
<span class="cmtt-10">  big_kahuna_burger(X) 
</span>
</span> fails, and hence the original query does too. In a nutshell, the crucial difference between the two programs is that in the original version (the one that works right) we use 
<span class="verb">
<span class="cmtt-10"> \+ 
</span>
</span> only 
<span class="cmti-10"> after 
</span> we have instantiated the variable 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> . In the new version (which goes wrong) we use 
<span class="verb">
<span class="cmtt-10"> \+ 
</span>
</span> before we have done this. The difference is crucial. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Summing up, we have seen that negation as failure is not logical negation, and that it has a procedural dimension that must be understood. Nonetheless, it is an important programming construct: it is generally a better idea to try use negation as failure than to write code containing heavy use of red cuts. Nonetheless, “generally” does not mean “always”. There 
<span class="cmti-10"> are 
</span> times when it is better to use red cuts. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> For example, suppose that we need to write code to capture the following condition: 
<span class="cmti-10"> p holds if a and b hold, or if a does not hold and c holds too 
</span> . This can be captured with the help of negation as failure very directly: 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb476">
<a id="x67-98096r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  p 
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  a,b. 
</span>
<br class="fancyvrb"/>
<a id="x67-98098r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x67-98100r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  p 
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  \+ 
</span>
<span class="cmtt-10">  a, 
</span>
<span class="cmtt-10">  c. 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> But suppose that 
<span class="verb">
<span class="cmtt-10"> a 
</span>
</span> is a very complicated goal, a goal that takes a lot of time to compute. Programming it this way means we may have to compute 
<span class="verb">
<span class="cmtt-10"> a 
</span>
</span> twice, and this may mean that we have unacceptably slow performance. If so, it would be better to use the following program: 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb477">
<a id="x67-98102r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  p 
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  a,!,b. 
</span>
<br class="fancyvrb"/>
<a id="x67-98104r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x67-98106r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  p 
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  c. 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Note that this is a red cut: removing it changes the meaning of the program. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> When all’s said and done, there are no universal guidelines that will cover all the situations you are likely to run across. Programming is as much an art as a science: that’s what makes it so interesting. You need to know as much as possible about the language you are working with (whether it’s Prolog, Java, Perl, or whatever), understand the problem you are trying to solve, and know what counts as an acceptable solution. And then: go ahead and try your best! 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse46"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse44"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse44"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse45"> front 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch10"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent">
<a id="taillpn-htmlse45">
</a>
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse47"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse45"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse45"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=#taillpn-htmlse46"> tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch10"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<h3 class="sectionHead">
<span class="titlemark"> 10.4 
</span>
<a id="x68-9900010.4">
</a> <strong>Exercise</strong>s 
</h3>
</div>
<div class="nb-cell html" name="htm1">
<div class="newtheorem">
<!--l. 665-->
<p class="noindent">
<span class="head">
<span class="cmbx-10"> <strong>Exercise</strong>
</span>
<span class="cmbx-10">  10.1 
</span>
</span>
<a id="x68-990011">
</a>
<span class="cmti-10"> Suppose we have the following database: 
</span>
</p>
<div class="fancyvrb" id="fancyvrb478">
<a id="x68-99003r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  p(1). 
</span>
<br class="fancyvrb"/>
<a id="x68-99005r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  p(2) 
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  !. 
</span>
<br class="fancyvrb"/>
<a id="x68-99007r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  p(3). 
</span>
</div>
<!--l. 672-->
<p class="indent">
<span class="cmti-10"> Write all of Prolog’s answers to the following queries: 
</span>
</p>
<div class="fancyvrb" id="fancyvrb479">
<a id="x68-99009r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  p(X). 
</span>
<br class="fancyvrb"/>
<a id="x68-99011r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x68-99013r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  p(X),p(Y). 
</span>
<br class="fancyvrb"/>
<a id="x68-99015r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x68-99017r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  p(X),!,p(Y). 
</span>
</div>
</div>
</div>
<div class="nb-cell html" name="htm1">
<div class="newtheorem">
<!--l. 683-->
<p class="noindent">
<span class="head">
<span class="cmbx-10"> <strong>Exercise</strong>
</span>
<span class="cmbx-10">  10.2 
</span>
</span>
<a id="x68-990182">
</a>
<span class="cmti-10"> First, explain what the following program does: 
</span>
</p>
<div class="fancyvrb" id="fancyvrb480">
<a id="x68-99020r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  class(Number,positive) 
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  Number 
</span>
<span class="cmtt-10">  &gt; 
</span>
<span class="cmtt-10">  0. 
</span>
<br class="fancyvrb"/>
<a id="x68-99022r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  class(0,zero). 
</span>
<br class="fancyvrb"/>
<a id="x68-99024r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  class(Number,negative) 
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  Number 
</span>
<span class="cmtt-10">  &lt; 
</span>
<span class="cmtt-10">  0. 
</span>
</div>
<!--l. 690-->
<p class="indent">
<span class="cmti-10"> Second, improve it by adding green cuts. 
</span>
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<div class="newtheorem">
<!--l. 694-->
<p class="noindent">
<span class="head">
<span class="cmbx-10"> <strong>Exercise</strong>
</span>
<span class="cmbx-10">  10.3 
</span>
</span>
<a id="x68-990253">
</a>
<span class="cmti-10"> Without using cut, write a predicate 
</span>
<span class="verb">
<span class="cmtt-10"> split/3 
</span>
</span>
<span class="cmti-10"> that splits a list of 
</span>
<span class="cmti-10"> integers into two lists: one containing the positive ones (and zero), the other 
</span>
<span class="cmti-10"> containing the negative ones. For example: 
</span>
</p>
<div class="fancyvrb" id="fancyvrb481">
<a id="x68-99027r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  split([3,4,-5,-1,0,4,-9],P,N) 
</span>
</div>
<!--l. 701-->
<p class="noindent">
<span class="cmti-10"> should return: 
</span>
</p>
<div class="fancyvrb" id="fancyvrb482">
<a id="x68-99029r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  P 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [3,4,0,4] 
</span>
<br class="fancyvrb"/>
<a id="x68-99031r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x68-99033r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  N 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [-5,-1,-9]. 
</span>
</div>
<!--l. 707-->
<p class="noindent">
<span class="cmti-10"> Then improve this program, without changing its meaning, with the help of the 
</span>
<span class="cmti-10"> cut. 
</span>
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<div class="newtheorem">
<!--l. 711-->
<p class="noindent">
<span class="head">
<span class="cmbx-10"> <strong>Exercise</strong>
</span>
<span class="cmbx-10">  10.4 
</span>
</span>
<a id="x68-990344">
</a>
</p>
<!--l. 713-->
<p class="indent">
<span class="cmti-10"> Recall that in <strong>Exercise</strong>
</span>
<span class="cmti-10">   
</span>
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse11">
<span class="cmti-10"> 3.3 
</span>
<!--tex4ht:ref: L3.EX3 -->
</a>
<span class="cmti-10"> we gave you the following knowledge base: 
</span>
</p>
<div class="fancyvrb" id="fancyvrb483">
<a id="x68-99036r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  directTrain(saarbruecken,dudweiler). 
</span>
<br class="fancyvrb"/>
<a id="x68-99038r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  directTrain(forbach,saarbruecken). 
</span>
<br class="fancyvrb"/>
<a id="x68-99040r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  directTrain(freyming,forbach). 
</span>
<br class="fancyvrb"/>
<a id="x68-99042r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  directTrain(stAvold,freyming). 
</span>
<br class="fancyvrb"/>
<a id="x68-99044r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  directTrain(fahlquemont,stAvold). 
</span>
<br class="fancyvrb"/>
<a id="x68-99046r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  directTrain(metz,fahlquemont). 
</span>
<br class="fancyvrb"/>
<a id="x68-99048r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  directTrain(nancy,metz). 
</span>
</div>
<!--l. 724-->
<p class="noindent">
<span class="cmti-10"> We asked you to write a recursive predicate 
</span>
<span class="verb">
<span class="cmtt-10"> travelFromTo/2 
</span>
</span>
<span class="cmti-10"> that told us when we could 
</span>
<span class="cmti-10"> travel by train between two towns. 
</span>
</p>
<!--l. 727-->
<p class="indent">
<span class="cmti-10"> Now, it’s plausible to assume that whenever it is possible to take a direct train 
</span>
<span class="cmti-10"> from A to B, it is also possible to take a direct train from B to A. Add this 
</span>
<span class="cmti-10"> information to the database. Then write a predicate 
</span>
<span class="verb">
<span class="cmtt-10"> route/3 
</span>
</span>
<span class="cmti-10"> which gives you a list of 
</span>
<span class="cmti-10"> towns that are visited by taking the train from one town to another. For 
</span>
<span class="cmti-10"> instance: 
</span>
</p>
<!--l. 734-->
<p class="indent">
</p>
<div class="fancyvrb" id="fancyvrb484">
<a id="x68-99050r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  route(forbach,metz,Route). 
</span>
<br class="fancyvrb"/>
<a id="x68-99052r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Route 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [forbach,freyming,stAvold,fahlquemont,metz] 
</span>
</div>
</div>
</div>
<div class="nb-cell html" name="htm1">
<div class="newtheorem">
<!--l. 742-->
<p class="noindent">
<span class="head">
<span class="cmbx-10"> <strong>Exercise</strong>
</span>
<span class="cmbx-10">  10.5 
</span>
</span>
<a id="x68-990535">
</a>
<span class="cmti-10"> Recall the definition of jealousy given in Chapter 
</span>
<span class="cmti-10">   
</span>
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch1">
<span class="cmti-10"> 1 
</span>
<!--tex4ht:ref: CHAPTER1 -->
</a>
<span class="cmti-10"> . 
</span>
</p>
<div class="fancyvrb" id="fancyvrb485">
<a id="x68-99055r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  jealous(X,Y):- 
</span>
<span class="cmtt-10">  loves(X,Z), 
</span>
<span class="cmtt-10">  loves(Y,Z). 
</span>
</div>
<!--l. 746-->
<p class="noindent">
<span class="cmti-10"> In a world where both Vincent and Marsellus love Mia, Vincent will be jealous of 
</span>
<span class="cmti-10"> Marsellus, and Marsellus of Vincent. But Marsellus will also be jealous of himself, 
</span>
<span class="cmti-10"> and so will Vincent. Revise the Prolog definition of jealousy in such a way that people 
</span>
<span class="cmti-10"> can’t be jealous of themselves. 
</span>
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse47"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse45"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse45"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse46"> front 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch10"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent">
<a id="taillpn-htmlse46">
</a>
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse46"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse46"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=#taillpn-htmlse47"> tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch10"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<h3 class="sectionHead">
<span class="titlemark"> 10.5 
</span>
<a id="x69-10000010.5">
</a> Practical Session 
</h3>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> The purpose of this session is to help you get familiar with cuts and negation as failure. First some keyboard exercises: 
</p>
</div>

<div class="nb-cell html" name="htm1">
<ol class="enumerate1">
<li class="enumerate" id="x69-100002x1"> Try out all three versions of the 
<span class="verb">
<span class="cmtt-10"> max/3 
</span>
</span> predicate defined in the text: the cut-free version, the green cut version, and the red cut version. As usual, “try out” means “run traces on”, and you should make sure that you trace queries in which all three arguments are instantiated to integers, and queries where the third argument is given as a variable. 
</li>
<li class="enumerate" id="x69-100004x2"> Ok, time for a burger. Try out all the methods discussed in the text for coping with Vincent’s preferences. That is, try out the program that uses a cut-fail combination, the program that uses negation as failure correctly, and also the program that mucks it up by using negation in the wrong place. 
</li>
</ol>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Now for some programming: 
</p>
</div>

<div class="nb-cell html" name="htm1">
<ol class="enumerate1">
<li class="enumerate" id="x69-100006x1"> Define a predicate 
<span class="verb">
<span class="cmtt-10"> nu/2 
</span>
</span> (”not unifiable”) which takes two terms as arguments and succeeds if the two terms do not unify. For example: 
<div class="fancyvrb" id="fancyvrb486">
<a id="x69-100008r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  nu(foo,foo). 
</span>
<br class="fancyvrb"/>
<a id="x69-100010r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  no 
</span>
<br class="fancyvrb"/>
<a id="x69-100012r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x69-100014r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  nu 
</span>
<span class="cmtt-10">  (foo,blob). 
</span>
<br class="fancyvrb"/>
<a id="x69-100016r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x69-100018r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x69-100020r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  nu(foo,X). 
</span>
<br class="fancyvrb"/>
<a id="x69-100022r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  no 
</span>
</div>
<!--l. 797-->
<p class="noindent"> You should define this predicate in three different ways: 
</p>
<ol class="enumerate2">
<li class="enumerate" id="x69-100024x1"> First (and easiest) write it with the help of 
<span class="verb">
<span class="cmtt-10"> = 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> \+ 
</span>
</span> . 
</li>
<li class="enumerate" id="x69-100026x2"> Second write it with the help of 
<span class="verb">
<span class="cmtt-10"> = 
</span>
</span> , but don’t use 
<span class="verb">
<span class="cmtt-10"> \+ 
</span>
</span> . 
</li>
<li class="enumerate" id="x69-100028x3"> Third, write it using a cut-fail combination. Don’t use 
<span class="verb">
<span class="cmtt-10"> = 
</span>
</span> and don’t use 
<span class="verb">
<span class="cmtt-10"> \+ 
</span>
</span> . 
</li>
</ol>
</li>
<li class="enumerate" id="x69-100030x2"> Define a predicate 
<span class="verb">
<span class="cmtt-10"> unifiable(List1,Term,List2) 
</span>
</span> where 
<span class="verb">
<span class="cmtt-10"> List2 
</span>
</span> is the list of all members of 
<span class="verb">
<span class="cmtt-10"> List1 
</span>
</span> that unify with 
<span class="verb">
<span class="cmtt-10"> Term 
</span>
</span> . The elements of 
<span class="verb">
<span class="cmtt-10"> List2 
</span>
</span> should 
<span class="cmti-10"> not 
</span> be instantiated by the unification. For example 
<div class="fancyvrb" id="fancyvrb487">
<a id="x69-100032r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  unifiable([X,b,t(Y)],t(a),List] 
</span>
</div>
<!--l. 816-->
<p class="noindent"> should yield 
</p>
<div class="fancyvrb" id="fancyvrb488">
<a id="x69-100034r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  List 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [X,t(Y)]. 
</span>
</div>
<!--l. 821-->
<p class="noindent"> Note that 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> Y 
</span>
</span> are still 
<span class="cmti-10"> not 
</span> instantiated. So the tricky part is: how do we check that they unify with 
<span class="verb">
<span class="cmtt-10"> t(a) 
</span>
</span> without instantiating them? 
</p>
<!--l. 824-->
<p class="noindent"> (Hint: consider using tests of the form 
<span class="verb">
<span class="cmtt-10"> \+ 
</span>
<span class="cmtt-10">  term1 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  term2 
</span>
</span> . Why? Think about it. You might also like to think about tests of the form 
<span class="verb">
<span class="cmtt-10"> \+ 
</span>
<span class="cmtt-10">  \+ 
</span>
<span class="cmtt-10">  term1 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  term2 
</span>
</span> .) 
</p>
</li>
</ol>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse46"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse46"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse47"> front 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch10"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent">
<a id="taillpn-htmlse47">
</a>
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse49"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=#taillpn-htmlse48"> tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch11"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<h3 class="sectionHead">
<span class="titlemark"> 11.1 
</span>
<a id="x71-10200011.1">
</a> Database Manipulation 
</h3>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Prolog has four database manipulation commands: assert, 
<a id="dx71-102001">
</a> retract, 
<a id="dx71-102002">
</a> asserta, and assertz. Let’s see how these are used. Suppose we start with an empty database. So if we give the command: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb489">
<a id="x71-102004r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  listing. 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> then Prolog will simply respond yes; the listing (of course) is empty. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Suppose we now give this command: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb490">
<a id="x71-102006r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  assert(happy(mia)). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> This succeeds ( 
<span class="verb">
<span class="cmtt-10"> assert/1 
</span>
</span> commands 
<span class="cmti-10"> always 
</span> succeed). But what is important is not that it succeeds, but the side-effect it has on the database. For if we now give the command 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb491">
<a id="x71-102008r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  listing. 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> we get: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb492">
<a id="x71-102010r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  happy(mia). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> That is, the database is no longer empty: it now contains the fact we asserted. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Suppose we then made four more assert commands: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb493">
<a id="x71-102012r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  assert(happy(vincent)). 
</span>
<br class="fancyvrb"/>
<a id="x71-102014r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x71-102016r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x71-102018r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  assert(happy(marcellus)). 
</span>
<br class="fancyvrb"/>
<a id="x71-102020r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x71-102022r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x71-102024r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  assert(happy(butch)). 
</span>
<br class="fancyvrb"/>
<a id="x71-102026r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x71-102028r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x71-102030r10">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  assert(happy(vincent)). 
</span>
<br class="fancyvrb"/>
<a id="x71-102032r11">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> and then ask for a listing: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb494">
<a id="x71-102034r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  listing. 
</span>
<br class="fancyvrb"/>
<a id="x71-102036r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x71-102038r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  happy(mia). 
</span>
<br class="fancyvrb"/>
<a id="x71-102040r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  happy(vincent). 
</span>
<br class="fancyvrb"/>
<a id="x71-102042r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  happy(marcellus). 
</span>
<br class="fancyvrb"/>
<a id="x71-102044r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  happy(butch). 
</span>
<br class="fancyvrb"/>
<a id="x71-102046r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  happy(vincent). 
</span>
<br class="fancyvrb"/>
<a id="x71-102048r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> All the facts we asserted are now in the knowledge base. Note that 
<span class="verb">
<span class="cmtt-10"> happy(vincent) 
</span>
</span> is in the knowledge base twice. As we asserted it twice, this seems sensible. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> The database manipulations we have been making have changed the meaning of the predicate 
<span class="verb">
<span class="cmtt-10"> happy/1 
</span>
</span> . More generally, database manipulation commands give us the ability to change the meaning of predicates while we are running programs. Predicates whose definitions change during run-time are called dynamic predicates, as opposed to the static predicates that we have previously dealt with. Most Prolog interpreters insist that we explicitly declare the predicates that we wish to be dynamic. We will soon examine an example involving dynamic predicates, but let’s first complete our discussion of the database manipulation commands. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> So far we have only asserted facts into the database, but we can also assert new rules. Suppose we want to assert the rule that everyone who is happy is naive. That is, suppose we want to assert that: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb495">
<a id="x71-102050r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  naive(X):- 
</span>
<span class="cmtt-10">  happy(X). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> We can do this as follows: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb496">
<a id="x71-102052r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  assert( 
</span>
<span class="cmtt-10">  (naive(X):- 
</span>
<span class="cmtt-10">  happy(X)) 
</span>
<span class="cmtt-10">  ). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Note the syntax of this command: 
<span class="cmti-10"> the rule we are asserting is enclosed in a pair of 
</span>
<span class="cmti-10"> brackets 
</span> . If we now ask for a listing we get: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb497">
<a id="x71-102054r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  happy(mia). 
</span>
<br class="fancyvrb"/>
<a id="x71-102056r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  happy(vincent). 
</span>
<br class="fancyvrb"/>
<a id="x71-102058r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  happy(marcellus). 
</span>
<br class="fancyvrb"/>
<a id="x71-102060r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  happy(butch). 
</span>
<br class="fancyvrb"/>
<a id="x71-102062r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  happy(vincent). 
</span>
<br class="fancyvrb"/>
<a id="x71-102064r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x71-102066r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  naive(A):- 
</span>
<br class="fancyvrb"/>
<a id="x71-102068r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  happy(A). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Now that we know how to assert new information into the database, we should also learn how to remove information when we no longer need it. There is an inverse predicate to 
<span class="verb">
<span class="cmtt-10"> assert/1 
</span>
</span> , namely 
<span class="verb">
<span class="cmtt-10"> retract/1 
</span>
</span> . For example, if we carry straight on from the previous example by giving the command: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb498">
<a id="x71-102070r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  retract(happy(marcellus)). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> and then list the database, we get: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb499">
<a id="x71-102072r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  happy(mia). 
</span>
<br class="fancyvrb"/>
<a id="x71-102074r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  happy(vincent). 
</span>
<br class="fancyvrb"/>
<a id="x71-102076r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  happy(butch). 
</span>
<br class="fancyvrb"/>
<a id="x71-102078r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  happy(vincent). 
</span>
<br class="fancyvrb"/>
<a id="x71-102080r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x71-102082r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  naive(A) 
</span>
<span class="cmtt-10">  :- 
</span>
<br class="fancyvrb"/>
<a id="x71-102084r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  happy(A). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> That is, the fact 
<span class="verb">
<span class="cmtt-10"> happy(marcellus) 
</span>
</span> has been removed. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Suppose we go on further, and say 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb500">
<a id="x71-102086r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  retract(happy(vincent)). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> and then ask for a listing. We get: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb501">
<a id="x71-102088r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  happy(mia). 
</span>
<br class="fancyvrb"/>
<a id="x71-102090r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  happy(butch). 
</span>
<br class="fancyvrb"/>
<a id="x71-102092r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  happy(vincent). 
</span>
<br class="fancyvrb"/>
<a id="x71-102094r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x71-102096r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  naive(A) 
</span>
<span class="cmtt-10">  :- 
</span>
<br class="fancyvrb"/>
<a id="x71-102098r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  happy(A). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Note that the first occurrence of 
<span class="verb">
<span class="cmtt-10"> happy(vincent) 
</span>
</span> , and 
<span class="cmti-10"> only 
</span> the first occurrence, was removed. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> To remove all of our assertions contributing to the definition of the predicate 
<span class="verb">
<span class="cmtt-10"> happy/1 
</span>
</span> we can use a variable: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb502">
<a id="x71-102100r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  retract(happy(X)). 
</span>
<br class="fancyvrb"/>
<a id="x71-102102r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x71-102104r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  mia 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x71-102106r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x71-102108r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  butch 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x71-102110r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x71-102112r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  vincent 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x71-102114r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  no 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> A listing reveals that the database is now empty, except for the rule 
<span class="verb">
<span class="cmtt-10"> naive(A) 
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  happy(A) 
</span>
</span> . 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb503">
<a id="x71-102116r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  listing. 
</span>
<br class="fancyvrb"/>
<a id="x71-102118r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  naive(A) 
</span>
<span class="cmtt-10">  :- 
</span>
<br class="fancyvrb"/>
<a id="x71-102120r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  happy(A). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> If we want more control over where the asserted material is placed, there are two variants of 
<span class="verb">
<span class="cmtt-10"> assert/1 
</span>
</span> , namely: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<ol class="enumerate1">
<li class="enumerate" id="x71-102122x1"> assertz. Places asserted material at the 
<span class="cmti-10"> end 
</span>
<a id="dx71-102123">
</a> of the database. 
</li>
<li class="enumerate" id="x71-102125x2"> asserta. Places asserted material at the 
<a id="dx71-102126">
</a>
<span class="cmti-10"> beginning 
</span> of the database. 
</li>
</ol>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> For example, suppose we start with an empty database, and then we give the following command: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb504">
<a id="x71-102128r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  assert( 
</span>
<span class="cmtt-10">  p(b) 
</span>
<span class="cmtt-10">  ), 
</span>
<span class="cmtt-10">  assertz( 
</span>
<span class="cmtt-10">  p(c) 
</span>
<span class="cmtt-10">  ), 
</span>
<span class="cmtt-10">  asserta( 
</span>
<span class="cmtt-10">  p(a) 
</span>
<span class="cmtt-10">  ). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Then a listing reveals that we now have the following database: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb505">
<a id="x71-102130r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  listing. 
</span>
<br class="fancyvrb"/>
<a id="x71-102132r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x71-102134r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  p(a). 
</span>
<br class="fancyvrb"/>
<a id="x71-102136r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  p(b). 
</span>
<br class="fancyvrb"/>
<a id="x71-102138r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  p(c). 
</span>
<br class="fancyvrb"/>
<a id="x71-102140r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Database manipulation is a useful technique. It is especially useful for storing the results to computations, so that if we need to ask the same question in the future, we don’t need to redo the work: we just look up the asserted fact. This technique is called memoisation, or caching, and in some applications it can greatly increase efficiency. Here’s a simple example of this technique at work: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb506">
<a id="x71-102142r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  dynamic 
</span>
<span class="cmtt-10">  lookup/3. 
</span>
<br class="fancyvrb"/>
<a id="x71-102144r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x71-102146r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  add_and_square(X,Y,Res):- 
</span>
<br class="fancyvrb"/>
<a id="x71-102148r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  lookup(X,Y,Res), 
</span>
<span class="cmtt-10">  !. 
</span>
<br class="fancyvrb"/>
<a id="x71-102150r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x71-102152r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  add_and_square(X,Y,Res):- 
</span>
<br class="fancyvrb"/>
<a id="x71-102154r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Res 
</span>
<span class="cmtt-10">  is 
</span>
<span class="cmtt-10">  (X+Y)*(X+Y), 
</span>
<br class="fancyvrb"/>
<a id="x71-102156r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  assert(lookup(X,Y,Res)). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> What does this program do? Basically, it takes two numbers X and Y, adds X to Y, and then squares the result. For example we have: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb507">
<a id="x71-102158r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  add_and_square(3,7,X). 
</span>
<br class="fancyvrb"/>
<a id="x71-102160r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x71-102162r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  100 
</span>
<br class="fancyvrb"/>
<a id="x71-102164r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> But the important point is: 
<span class="cmti-10"> how 
</span> does it do this? First, note that we have declared 
<span class="verb">
<span class="cmtt-10"> lookup/3 
</span>
</span> as a dynamic predicate. We need to do this as we plan to change the definition of 
<span class="verb">
<span class="cmtt-10"> lookup/3 
</span>
</span> during run-time. Second, note that there are two clauses defining 
<span class="verb">
<span class="cmtt-10"> add_and_square/3 
</span>
</span> . The second clause performs the required arithmetic calculation and asserts the result to the Prolog database using the predicate 
<span class="verb">
<span class="cmtt-10"> lookup/3 
</span>
</span> (that is, it caches the result). The first clause checks the Prolog database to see if the calculation has already been made in the past. If it has been, the program simply returns the result, and the cut prevents it from entering the second clause. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Here’s an example of the program at work. Suppose we give Prolog another query 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb508">
<a id="x71-102166r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  add_and_square(3,4,Y). 
</span>
<br class="fancyvrb"/>
<a id="x71-102168r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x71-102170r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Y 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  49 
</span>
<br class="fancyvrb"/>
<a id="x71-102172r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> If we now ask for a listing we see that the database now contains 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb509">
<a id="x71-102174r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  lookup(3, 
</span>
<span class="cmtt-10">  7, 
</span>
<span class="cmtt-10">  100). 
</span>
<br class="fancyvrb"/>
<a id="x71-102176r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  lookup(3, 
</span>
<span class="cmtt-10">  4, 
</span>
<span class="cmtt-10">  49). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Should we later ask Prolog to add and square 3 and 4, it wouldn’t perform the calculations again. Rather, it would just return the previously calculated result. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Question: how do we remove all these new facts when we no longer want them? After all, if we give the command 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb510">
<a id="x71-102178r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  retract(lookup(X,Y,Z)). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Prolog will go through all the facts one by one and ask us whether we want to remove them! But there’s a much simpler way. Simply use the command 
<a id="dx71-102179">
</a>
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb511">
<a id="x71-102181r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  retractall(lookup(_,_,_)). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> This will remove all facts about 
<span class="verb">
<span class="cmtt-10"> lookup/3 
</span>
</span> from the database. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> To conclude our discussion of database manipulation, a word of warning. Although it is a useful technique, database manipulation can lead to dirty, hard to understand, code. If you use it heavily in a program with lots of backtracking, understanding what is going on can be a nightmare. It is a non-declarative, non logical, feature of Prolog that should be used cautiously. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse49"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse48"> front 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch11"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent">
<a id="taillpn-htmlse48">
</a>
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse50"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse48"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse48"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=#taillpn-htmlse49"> tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch11"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<h3 class="sectionHead">
<span class="titlemark"> 11.2 
</span>
<a id="x72-10300011.2">
</a> Collecting Solutions 
</h3>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> There may be many solutions to a query. For example, suppose we are working with the database 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb512">
<a id="x72-103002r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  child(martha,charlotte). 
</span>
<br class="fancyvrb"/>
<a id="x72-103004r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  child(charlotte,caroline). 
</span>
<br class="fancyvrb"/>
<a id="x72-103006r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  child(caroline,laura). 
</span>
<br class="fancyvrb"/>
<a id="x72-103008r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  child(laura,rose). 
</span>
<br class="fancyvrb"/>
<a id="x72-103010r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x72-103012r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  descend(X,Y) 
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  child(X,Y). 
</span>
<br class="fancyvrb"/>
<a id="x72-103014r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x72-103016r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  descend(X,Y) 
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  child(X,Z), 
</span>
<br class="fancyvrb"/>
<a id="x72-103018r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  descend(Z,Y). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Then if we pose the query 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb513">
<a id="x72-103020r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  descend(martha,X). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> there are four solutions (namely 
<span class="verb">
<span class="cmtt-10"> X=charlotte 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> X=caroline 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> X=laura 
</span>
</span> , and 
<span class="verb">
<span class="cmtt-10"> X=rose 
</span>
</span> ). 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> However Prolog generates these solutions one by one. Sometimes we would like to have 
<span class="cmti-10"> all 
</span> the solutions to a query, and we would like them handed to us in a neat, usable, form. Prolog has three built-in predicates that do this: findall, bagof and setof. In essence, all these predicates collect all the solutions to a query and put them in a single list — but there are important differences between them, as we shall see. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent">
</p>
</div>
<div class="nb-cell html" name="htm1">
<h4 class="likesubsectionHead">
<a id="x72-10400011.2">
</a> The 
<span class="cmtt-10"> findall/3 
</span> predicate 
</h4>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> The query 
<a id="dx72-104001">
</a>
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb514">
<a id="x72-104003r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  findall(Object,Goal,List). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> produces a list 
<span class="verb">
<span class="cmtt-10"> List 
</span>
</span> of all the objects 
<span class="verb">
<span class="cmtt-10"> Object 
</span>
</span> that satisfy the goal 
<span class="verb">
<span class="cmtt-10"> Goal 
</span>
</span> . Often 
<span class="verb">
<span class="cmtt-10"> Object 
</span>
</span> is simply a variable, in which case the query can be read as: 
<span class="cmti-10"> Give me a list containing 
</span>
<span class="cmti-10"> all the instantiations of 
</span>
<span class="verb">
<span class="cmtt-10"> Object 
</span>
</span>
<span class="cmti-10"> which satisfy 
</span>
<span class="verb">
<span class="cmtt-10"> Goal 
</span>
</span> . 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Here’s an example. Suppose we’re working with the above database (that is, with the information about 
<span class="verb">
<span class="cmtt-10"> child 
</span>
</span> and the definition of 
<span class="verb">
<span class="cmtt-10"> descend 
</span>
</span> ). Then if we pose the query 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb515">
<a id="x72-104005r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  findall(X,descend(martha,X),Z). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> we are asking for a list 
<span class="verb">
<span class="cmtt-10"> Z 
</span>
</span> containing all the values of 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> that satisfy 
<span class="verb">
<span class="cmtt-10"> descend(martha,X) 
</span>
</span> . Prolog will respond 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb516">
<a id="x72-104007r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  _7489 
</span>
<br class="fancyvrb"/>
<a id="x72-104009r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Z 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [charlotte,caroline,laura,rose] 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> But 
<span class="verb">
<span class="cmtt-10"> Object 
</span>
</span> doesn’t have to be a variable, it may be a complex term that just contains a variable that also occurs in 
<span class="verb">
<span class="cmtt-10"> Goal 
</span>
</span> . For example, we might decide that we want to build a new predicate 
<span class="verb">
<span class="cmtt-10"> fromMartha/1 
</span>
</span> that is true only of descendants of Martha. We could do this with the query: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb517">
<a id="x72-104011r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  findall(fromMartha(X),descend(martha,X),Z). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> That is, we are asking for a list 
<span class="verb">
<span class="cmtt-10"> Z 
</span>
</span> containing all the instantiations of 
<span class="verb">
<span class="cmtt-10"> fromMartha(X) 
</span>
</span> that satisfy the goal 
<span class="verb">
<span class="cmtt-10"> descend(martha,X) 
</span>
</span> . Prolog will respond 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb518">
<a id="x72-104013r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  _7616 
</span>
<br class="fancyvrb"/>
<a id="x72-104015r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Z 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [fromMartha(charlotte),fromMartha(caroline), 
</span>
<br class="fancyvrb"/>
<a id="x72-104017r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  fromMartha(laura),fromMartha(rose)] 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> What happens if we ask the following query? 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb519">
<a id="x72-104019r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  findall(X,descend(mary,X),Z). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> As there are no solutions for the goal 
<span class="verb">
<span class="cmtt-10"> descend(mary,X) 
</span>
</span> in the knowledge base. 
<span class="verb">
<span class="cmtt-10"> findall/3 
</span>
</span> returns an empty list. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Note that the first two arguments of 
<span class="verb">
<span class="cmtt-10"> findall/3 
</span>
</span> typically have (at least) one variable in common. When using 
<span class="verb">
<span class="cmtt-10"> findall/3 
</span>
</span> , we normally want to know what solutions Prolog finds for certain variables in the goal, and we tell Prolog which variables in Goal we are interested in by building them into the first argument of 
<span class="verb">
<span class="cmtt-10"> findall/3 
</span>
</span> . 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> You might encounter situations, however, where 
<span class="verb">
<span class="cmtt-10"> findall/3 
</span>
</span> does useful work although the first two arguments don’t share any variables. For example, if you are not interested in who exactly is a descendant of Martha, but only in how many descendants Martha has, you can use the following query to find out: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb520">
<a id="x72-104021r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  findall(Y,descend(martha,X),Z), 
</span>
<span class="cmtt-10">  length(Z,N). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent">
</p>
</div>
<div class="nb-cell html" name="htm1">
<h4 class="likesubsectionHead">
<a id="x72-10500011.2">
</a> The 
<span class="cmtt-10"> bagof/3 
</span> predicate 
</h4>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> The 
<span class="verb">
<span class="cmtt-10"> findall/3 
</span>
</span> predicate is useful, but in certain respects it is rather crude. For example, suppose we pose the query 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb521">
<a id="x72-105002r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  findall(Child,descend(Mother,Child),List). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> We get the response 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb522">
<a id="x72-105004r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Child 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  _6947 
</span>
<br class="fancyvrb"/>
<a id="x72-105006r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Mother 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  _6951 
</span>
<br class="fancyvrb"/>
<a id="x72-105008r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  List 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [charlotte,caroline,laura,rose,caroline, 
</span>
<br class="fancyvrb"/>
<a id="x72-105010r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  laura,rose,laura,rose,rose] 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Now, this is correct, but sometimes it would be useful if we had a separate list for each of the different instantiations of 
<span class="verb">
<span class="cmtt-10"> Mother 
</span>
</span> . 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> This is what 
<span class="verb">
<span class="cmtt-10"> bagof/3 
</span>
</span> lets us do. If we pose the query 
<a id="dx72-105011">
</a>
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb523">
<a id="x72-105013r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  bagof(Child,descend(Mother,Child),List). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> we get the response 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb524">
<a id="x72-105015r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Child 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  _7736 
</span>
<br class="fancyvrb"/>
<a id="x72-105017r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Mother 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  caroline 
</span>
<br class="fancyvrb"/>
<a id="x72-105019r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  List 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [laura,rose] 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x72-105021r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x72-105023r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Child 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  _7736 
</span>
<br class="fancyvrb"/>
<a id="x72-105025r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Mother 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  charlotte 
</span>
<br class="fancyvrb"/>
<a id="x72-105027r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  List 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [caroline,laura,rose] 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x72-105029r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x72-105031r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Child 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  _7736 
</span>
<br class="fancyvrb"/>
<a id="x72-105033r10">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Mother 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  laura 
</span>
<br class="fancyvrb"/>
<a id="x72-105035r11">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  List 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [rose] 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x72-105037r12">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x72-105039r13">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Child 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  _7736 
</span>
<br class="fancyvrb"/>
<a id="x72-105041r14">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Mother 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  martha 
</span>
<br class="fancyvrb"/>
<a id="x72-105043r15">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  List 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [charlotte,caroline,laura,rose] 
</span>
<span class="cmtt-10">  ; 
</span>
<br class="fancyvrb"/>
<a id="x72-105045r16">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  no 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> That is, 
<span class="verb">
<span class="cmtt-10"> bagof/3 
</span>
</span> is more fine-grained than 
<span class="verb">
<span class="cmtt-10"> findall/3 
</span>
</span> . It gives us the opportunity to extract the information we want in a more structured way. Moreover, 
<span class="verb">
<span class="cmtt-10"> bagof/3 
</span>
</span> can also do the same job as 
<span class="verb">
<span class="cmtt-10"> findall/3 
</span>
</span> , with the help of a special piece of syntax, namely 
<span class="verb">
<span class="cmtt-10"> ^ 
</span>
</span> : 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb525">
<a id="x72-105047r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  bagof(Child,Mother^descend(Mother,Child),List). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> This says: 
<span class="cmti-10"> give me a list of all the values of 
</span>
<span class="verb">
<span class="cmtt-10"> Child 
</span>
</span>
<span class="cmti-10"> such that 
</span>
<span class="verb">
<span class="cmtt-10"> descend(Mother,Child) 
</span>
</span> , 
<span class="cmti-10"> and put the result in a list, but don’t worry about generating a separate list for each 
</span>
<span class="cmti-10"> value of 
</span>
<span class="verb">
<span class="cmtt-10"> Mother 
</span>
</span> . So posing this query yields: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb526">
<a id="x72-105049r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Child 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  _7870 
</span>
<br class="fancyvrb"/>
<a id="x72-105051r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Mother 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  _7874 
</span>
<br class="fancyvrb"/>
<a id="x72-105053r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  List 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [charlotte,caroline,laura,rose,caroline, 
</span>
<br class="fancyvrb"/>
<a id="x72-105055r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  laura,rose,laura,rose,rose] 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Note that this is exactly the response that 
<span class="verb">
<span class="cmtt-10"> findall/3 
</span>
</span> would have given us. Still, if this is the kind of query you want to make (and it often is) it’s simpler to use 
<span class="verb">
<span class="cmtt-10"> findall/3 
</span>
</span> , because then you don’t have to bother explicitly write down the conditions using 
<span class="verb">
<span class="cmtt-10"> ^ 
</span>
</span> . 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> There is one important difference between 
<span class="verb">
<span class="cmtt-10"> findall/3 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> bagof/3 
</span>
</span> , namely that 
<span class="verb">
<span class="cmtt-10"> bagof/3 
</span>
</span> fails if the goal that is specified in its second argument is not satisfied (remember, that 
<span class="verb">
<span class="cmtt-10"> findall/3 
</span>
</span> returns the empty list in such cases). So the query 
<span class="verb">
<span class="cmtt-10"> bagof(X,descend(mary,X),Z) 
</span>
</span> yields 
<span class="verb">
<span class="cmtt-10"> no 
</span>
</span> . 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> One final remark. Consider again the query 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb527">
<a id="x72-105057r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  bagof(Child,descend(Mother,Child),List). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> As we saw above, this has four solutions. But, once again, Prolog generates them one by one. Wouldn’t it be nice if we could collect them all into one list? 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> And we can. The simplest way is to use 
<span class="verb">
<span class="cmtt-10"> findall/3 
</span>
</span> . The query 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb528">
<a id="x72-105059r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  findall(List, 
</span>
<br class="fancyvrb"/>
<a id="x72-105061r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  bagof(Child,descend(Mother,Child),List), 
</span>
<br class="fancyvrb"/>
<a id="x72-105063r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Z). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> collects all of 
<span class="verb">
<span class="cmtt-10"> bagof/3 
</span>
</span> ’s responses into one list: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb529">
<a id="x72-105065r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  List 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  _8293 
</span>
<br class="fancyvrb"/>
<a id="x72-105067r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Child 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  _8297 
</span>
<br class="fancyvrb"/>
<a id="x72-105069r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Mother 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  _8301 
</span>
<br class="fancyvrb"/>
<a id="x72-105071r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Z 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [[laura,rose],[caroline,laura,rose],[rose], 
</span>
<br class="fancyvrb"/>
<a id="x72-105073r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  [charlotte,caroline,laura,rose]] 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Another way to do it is with 
<span class="verb">
<span class="cmtt-10"> bagof/3 
</span>
</span> : 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb530">
<a id="x72-105075r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  bagof(List, 
</span>
<br class="fancyvrb"/>
<a id="x72-105077r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Child^Mother^bagof(Child,descend(Mother,Child),List), 
</span>
<br class="fancyvrb"/>
<a id="x72-105079r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Z). 
</span>
<br class="fancyvrb"/>
<a id="x72-105081r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x72-105083r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  List 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  _2648 
</span>
<br class="fancyvrb"/>
<a id="x72-105085r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Child 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  _2652 
</span>
<br class="fancyvrb"/>
<a id="x72-105087r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Mother 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  _2655 
</span>
<br class="fancyvrb"/>
<a id="x72-105089r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Z 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [[laura,rose],[caroline,laura,rose],[rose], 
</span>
<br class="fancyvrb"/>
<a id="x72-105091r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  [charlotte,caroline,laura,rose]] 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> This may not be the sort of thing you need to do very often, but it does show the flexibility and power offered by these predicates. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent">
</p>
</div>
<div class="nb-cell html" name="htm1">
<h4 class="likesubsectionHead">
<a id="x72-10600011.2">
</a> The 
<span class="cmtt-10"> setof/3 
</span> predicate 
</h4>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> The 
<span class="verb">
<span class="cmtt-10"> setof/3 
</span>
</span> predicate is basically the same as 
<span class="verb">
<span class="cmtt-10"> bagof/3 
</span>
</span> , but with one useful difference: the lists it contains are 
<span class="cmti-10"> ordered 
</span> and contain 
<span class="cmti-10"> no redundancies 
</span> (that is, no list contains repeated items). 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> For example, suppose we have the following database 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb531">
<a id="x72-106002r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  age(harry,13). 
</span>
<br class="fancyvrb"/>
<a id="x72-106004r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  age(draco,14). 
</span>
<br class="fancyvrb"/>
<a id="x72-106006r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  age(ron,13). 
</span>
<br class="fancyvrb"/>
<a id="x72-106008r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  age(hermione,13). 
</span>
<br class="fancyvrb"/>
<a id="x72-106010r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  age(dumbledore,60). 
</span>
<br class="fancyvrb"/>
<a id="x72-106012r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  age(hagrid,30). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Now suppose we want a list of everyone whose age is recorded in the database. We can do this with the query: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb532">
<a id="x72-106014r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  findall(X,age(X,Y),Out). 
</span>
<br class="fancyvrb"/>
<a id="x72-106016r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x72-106018r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  _8443 
</span>
<br class="fancyvrb"/>
<a id="x72-106020r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Y 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  _8448 
</span>
<br class="fancyvrb"/>
<a id="x72-106022r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Out 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [harry,draco,ron,hermione,dumbledore,hagrid] 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> But maybe we would like the list to be ordered. We can achieve this with the following query: 
<a id="dx72-106023">
</a>
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb533">
<a id="x72-106025r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  setof(X,Y^age(X,Y),Out). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> (Note that, just as with 
<span class="verb">
<span class="cmtt-10"> bagof/3 
</span>
</span> , we have to tell 
<span class="verb">
<span class="cmtt-10"> setof/3 
</span>
</span> not to generate separate lists for each value of 
<span class="verb">
<span class="cmtt-10"> Y 
</span>
</span> , and again we do this with the 
<span class="verb">
<span class="cmtt-10"> ^ 
</span>
</span> symbol.) This query yields: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb534">
<a id="x72-106027r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  _8711 
</span>
<br class="fancyvrb"/>
<a id="x72-106029r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Y 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  _8715 
</span>
<br class="fancyvrb"/>
<a id="x72-106031r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Out 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [draco,dumbledore,hagrid,harry,hermione,ron] 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Note that the list is alphabetically ordered. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Now suppose we are interested in collecting together all the ages which are recorded in the database. Of course, we could do this with the following query: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb535">
<a id="x72-106033r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  findall(Y,age(X,Y),Out). 
</span>
<br class="fancyvrb"/>
<a id="x72-106035r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x72-106037r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Y 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  _8847 
</span>
<br class="fancyvrb"/>
<a id="x72-106039r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  _8851 
</span>
<br class="fancyvrb"/>
<a id="x72-106041r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Out 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [13,14,13,13,60,30] 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> But this output is rather messy. It is unordered and contains repetitions. By using 
<span class="verb">
<span class="cmtt-10"> setof/3 
</span>
</span> we get the same information in a neater form: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb536">
<a id="x72-106043r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  setof(Y,X^age(X,Y),Out). 
</span>
<br class="fancyvrb"/>
<a id="x72-106045r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x72-106047r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Y 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  _8981 
</span>
<br class="fancyvrb"/>
<a id="x72-106049r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  _8985 
</span>
<br class="fancyvrb"/>
<a id="x72-106051r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Out 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [13,14,30,60] 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Between them, these three predicates offer us a great deal of flexibility when it comes to collecting solutions. For many purposes, all we need is 
<span class="verb">
<span class="cmtt-10"> findall/3 
</span>
</span> , but if we need more, 
<span class="verb">
<span class="cmtt-10"> bagof/3 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> setof/3 
</span>
</span> are there waiting to help us out. But bear in mind that there is an important difference between 
<span class="verb">
<span class="cmtt-10"> findall/3 
</span>
</span> on the one hand and 
<span class="verb">
<span class="cmtt-10"> bagof/3 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> setof/3 
</span>
</span> on the other: 
<span class="verb">
<span class="cmtt-10"> findall/3 
</span>
</span> will return an empty list if the goal has no solutions, whereas 
<span class="verb">
<span class="cmtt-10"> bagof/3 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> setof/3 
</span>
</span> would fail in such a situation. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse50"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse48"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse48"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse49"> front 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch11"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent">
<a id="taillpn-htmlse49">
</a>
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse51"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse49"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse49"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=#taillpn-htmlse50"> tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch11"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<h3 class="sectionHead">
<span class="titlemark"> 11.3 
</span>
<a id="x73-10700011.3">
</a> <strong>Exercise</strong>s 
</h3>
</div>
<div class="nb-cell html" name="htm1">
<div class="newtheorem">
<!--l. 578-->
<p class="noindent">
<span class="head">
<span class="cmbx-10"> <strong>Exercise</strong>
</span>
<span class="cmbx-10">  11.1 
</span>
</span>
<a id="x73-1070011">
</a>
<span class="cmti-10"> Suppose we start with an empty database. We then give the 
</span>
<span class="cmti-10"> command: 
</span>
</p>
<div class="fancyvrb" id="fancyvrb537">
<a id="x73-107003r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  assert(q(a,b)), 
</span>
<span class="cmtt-10">  assertz(q(1,2)), 
</span>
<span class="cmtt-10">  asserta(q(foo,blug)). 
</span>
</div>
<!--l. 583-->
<p class="noindent">
<span class="cmti-10"> What does the database now contain? 
</span>
</p>
<!--l. 585-->
<p class="indent">
<span class="cmti-10"> We then give the command: 
</span>
</p>
<div class="fancyvrb" id="fancyvrb538">
<a id="x73-107005r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  retract(q(1,2)), 
</span>
<span class="cmtt-10">  assertz( 
</span>
<span class="cmtt-10">  (p(X) 
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  h(X)) 
</span>
<span class="cmtt-10">  ). 
</span>
</div>
<!--l. 589-->
<p class="noindent">
<span class="cmti-10"> What does the database now contain? 
</span>
</p>
<!--l. 591-->
<p class="indent">
<span class="cmti-10"> We then give the command: 
</span>
</p>
<div class="fancyvrb" id="fancyvrb539">
<a id="x73-107007r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  retractall(q(_,_)). 
</span>
</div>
<!--l. 595-->
<p class="noindent">
<span class="cmti-10"> What does the database now contain? 
</span>
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<div class="newtheorem">
<!--l. 599-->
<p class="noindent">
<span class="head">
<span class="cmbx-10"> <strong>Exercise</strong>
</span>
<span class="cmbx-10">  11.2 
</span>
</span>
<a id="x73-1070082">
</a>
<span class="cmti-10"> Suppose we have the following database: 
</span>
</p>
<div class="fancyvrb" id="fancyvrb540">
<a id="x73-107010r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  q(blob,blug). 
</span>
<br class="fancyvrb"/>
<a id="x73-107012r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  q(blob,blag). 
</span>
<br class="fancyvrb"/>
<a id="x73-107014r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  q(blob,blig). 
</span>
<br class="fancyvrb"/>
<a id="x73-107016r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  q(blaf,blag). 
</span>
<br class="fancyvrb"/>
<a id="x73-107018r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  q(dang,dong). 
</span>
<br class="fancyvrb"/>
<a id="x73-107020r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  q(dang,blug). 
</span>
<br class="fancyvrb"/>
<a id="x73-107022r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  q(flab,blob). 
</span>
</div>
<!--l. 610-->
<p class="indent">
<span class="cmti-10"> What is Prolog’s response to the queries: 
</span>
</p>
<div class="fancyvrb" id="fancyvrb541">
<a id="x73-107024r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  findall(X,q(blob,X),List). 
</span>
<br class="fancyvrb"/>
<a id="x73-107026r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  findall(X,q(X,blug),List). 
</span>
<br class="fancyvrb"/>
<a id="x73-107028r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  findall(X,q(X,Y),List). 
</span>
<br class="fancyvrb"/>
<a id="x73-107030r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  bagof(X,q(X,Y),List). 
</span>
<br class="fancyvrb"/>
<a id="x73-107032r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  setof(X,Y^q(X,Y),List). 
</span>
</div>
</div>
</div>
<div class="nb-cell html" name="htm1">
<div class="newtheorem">
<!--l. 621-->
<p class="noindent">
<span class="head">
<span class="cmbx-10"> <strong>Exercise</strong>
</span>
<span class="cmbx-10">  11.3 
</span>
</span>
<a id="x73-1070333">
</a>
<span class="cmti-10"> Write a predicate 
</span>
<span class="verb">
<span class="cmtt-10"> sigma/2 
</span>
</span>
<span class="cmti-10"> that takes an integer 
</span>
<span class="cmmi-10"> n &gt; 
</span> 0 
<span class="cmti-10"> and 
</span>
<span class="cmti-10"> calculates the sum of all integers from 1 to 
</span>
<span class="cmmi-10"> n 
</span>
<span class="cmti-10"> . For example: 
</span>
</p>
<!--l. 625-->
<p class="indent">
</p>
<div class="fancyvrb" id="fancyvrb542">
<a id="x73-107035r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  sigma(3,X). 
</span>
<br class="fancyvrb"/>
<a id="x73-107037r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  6 
</span>
<br class="fancyvrb"/>
<a id="x73-107039r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x73-107041r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  sigma(5,X). 
</span>
<br class="fancyvrb"/>
<a id="x73-107043r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  15 
</span>
<br class="fancyvrb"/>
<a id="x73-107045r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
<!--l. 634-->
<p class="indent">
<span class="cmti-10"> Write the predicate so that results are stored in the database (there should never 
</span>
<span class="cmti-10"> be more than one entry in the database for each value) and are reused whenever 
</span>
<span class="cmti-10"> possible. For example, suppose we make the following query: 
</span>
</p>
<div class="fancyvrb" id="fancyvrb543">
<a id="x73-107047r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  sigma(2,X). 
</span>
<br class="fancyvrb"/>
<a id="x73-107049r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  3 
</span>
<br class="fancyvrb"/>
<a id="x73-107051r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x73-107053r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  listing. 
</span>
<br class="fancyvrb"/>
<a id="x73-107055r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  sigmares(2,3). 
</span>
</div>
<!--l. 645-->
<p class="noindent">
<span class="cmti-10"> Then, if we go on to ask 
</span>
</p>
<div class="fancyvrb" id="fancyvrb544">
<a id="x73-107057r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  sigma(3,X). 
</span>
</div>
<!--l. 649-->
<p class="noindent">
<span class="cmti-10"> Prolog should not calculate everything new, but should get the result for 
</span>
<span class="verb">
<span class="cmtt-10"> sigma(2,3) 
</span>
</span>
<span class="cmti-10"> from 
</span>
<span class="cmti-10"> the database and only add 3 to that. It should then answer: 
</span>
</p>
<div class="fancyvrb" id="fancyvrb545">
<a id="x73-107059r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  X 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  6 
</span>
<br class="fancyvrb"/>
<a id="x73-107061r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x73-107063r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  listing. 
</span>
<br class="fancyvrb"/>
<a id="x73-107065r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  sigmares(2,3). 
</span>
<br class="fancyvrb"/>
<a id="x73-107067r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  sigmares(3,6). 
</span>
</div>
</div>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse51"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse49"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse49"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse50"> front 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch11"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent">
<a id="taillpn-htmlse50">
</a>
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse50"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse50"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=#taillpn-htmlse51"> tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch11"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<h3 class="sectionHead">
<span class="titlemark"> 11.4 
</span>
<a id="x74-10800011.4">
</a> Practical Session 
</h3>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Try the following two programming exercises: 
</p>
</div>

<div class="nb-cell html" name="htm1">
<ol class="enumerate1">
<li class="enumerate" id="x74-108002x1"> Sets can be thought of as lists that don’t contain any repeated elements. For example, 
<span class="verb">
<span class="cmtt-10"> [a,4,6] 
</span>
</span> is a set, but 
<span class="verb">
<span class="cmtt-10"> [a,4,6,a] 
</span>
</span> is not (as it contains two occurrences of 
<span class="verb">
<span class="cmtt-10"> a) 
</span>
</span> . Write a Prolog program 
<span class="verb">
<span class="cmtt-10"> subset/2 
</span>
</span> that is satisfied when the first argument is a subset of the second argument (that is, when every element of the first argument is a member of the second argument). For example: 
<div class="fancyvrb" id="fancyvrb546">
<a id="x74-108004r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  subset([a,b],[a,b,c]) 
</span>
<br class="fancyvrb"/>
<a id="x74-108006r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x74-108008r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x74-108010r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  subset([c,b],[a,b,c]) 
</span>
<br class="fancyvrb"/>
<a id="x74-108012r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
<br class="fancyvrb"/>
<a id="x74-108014r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x74-108016r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  subset([],[a,b,c]) 
</span>
<br class="fancyvrb"/>
<a id="x74-108018r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  yes 
</span>
</div>
<!--l. 684-->
<p class="noindent"> Your program should be capable of generating all subsets of an input set by backtracking. For example, if you give it as input 
</p>
<div class="fancyvrb" id="fancyvrb547">
<a id="x74-108020r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  subset(X,[a,b,c]) 
</span>
</div>
<!--l. 689-->
<p class="noindent"> it should successively generate all eight subsets of 
<span class="verb">
<span class="cmtt-10"> [a,b,c] 
</span>
</span> . 
</p>
</li>
<li class="enumerate" id="x74-108022x2"> Using the 
<span class="verb">
<span class="cmtt-10"> subset 
</span>
</span> predicate you have just written, and 
<span class="verb">
<span class="cmtt-10"> findall/3 
</span>
</span> , write a predicate 
<span class="verb">
<span class="cmtt-10"> powerset/2 
</span>
</span> that takes a set as its first argument, and returns the powerset of this set as the second argument. (The powerset of a set is the set of all its subsets.) For example: 
<div class="fancyvrb" id="fancyvrb548">
<a id="x74-108024r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  powerset([a,b,c],P) 
</span>
</div>
<!--l. 698-->
<p class="noindent"> should return 
</p>
<div class="fancyvrb" id="fancyvrb549">
<a id="x74-108026r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  P 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [[],[a],[b],[c],[a,b],[a,c],[b,c],[a,b,c]] 
</span>
</div>
<!--l. 702-->
<p class="noindent"> It doesn’t matter if the sets are returned in some other order. For example, 
</p>
<div class="fancyvrb" id="fancyvrb550">
<a id="x74-108028r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  P 
</span>
<span class="cmtt-10">  = 
</span>
<span class="cmtt-10">  [[a],[b],[c],[a,b,c],[],[a,b],[a,c],[b,c]] 
</span>
</div>
<!--l. 707-->
<p class="noindent"> is fine too. 
</p>
</li>
</ol>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse50"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse50"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse51"> front 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch11"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent">
<a id="taillpn-htmlse51">
</a>
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse53"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=#taillpn-htmlse52"> tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch12"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<h3 class="sectionHead">
<span class="titlemark"> 12.1 
</span>
<a id="x76-11000012.1">
</a> Splitting Programs over Files 
</h3>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> By this stage you have written lots of programs that use the predicates 
<span class="verb">
<span class="cmtt-10"> append/3 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> member/2 
</span>
</span> . What you probably did each time you needed one of them was to go back to the definition and copy it over to the file where you wanted to use it. And maybe, after having done that a few times, you started thinking that it was quite annoying having to copy the same predicate definitions over and over again — how pleasant it would be if you could define them somewhere once and for all and then simply access them whenever you needed them. Well, that sounds like a pretty sensible thing to ask for and, of course, Prolog offers you ways of doing it. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent">
</p>
</div>
<div class="nb-cell html" name="htm1">
<h4 class="likesubsectionHead">
<a id="x76-11100012.1">
</a> Reading in programs 
</h4>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> In fact, you already know a way of telling Prolog to read in predicate definitions that are stored in a file, namely the 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb551">
<a id="x76-111002r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  [FileName1] 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> command. You have been using queries of this form all along to tell Prolog to consult files. But there are two more useful things you should know about it. First, you can consult many files at once by saying 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb552">
<a id="x76-111004r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  [FileName1,FileName2,...,FileNameN] 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> instead. Second, and more importantly, file consultation does 
<span class="cmti-10"> not 
</span> have to be performed interactively. If you put 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb553">
<a id="x76-111006r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  [FileName1,FileName2,...,FileNameN]. 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> at the top of your program file (say 
<span class="verb">
<span class="cmtt-10"> main.pl 
</span>
</span> ) you are telling Prolog to first consult the listed files before going on to read in the rest of your program. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> This feature gives us a simple way of re-using definitions. For example, suppose that you keep all the predicate definitions for basic list processing (such as 
<span class="verb">
<span class="cmtt-10"> append/3 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> member/2 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> reverse/2 
</span>
</span> , and so on) in a file called 
<span class="verb">
<span class="cmtt-10"> listPredicates.pl 
</span>
</span> . If you want to use them, simply put 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb554">
<a id="x76-111008r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  [listPredicates]. 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> at the top of the file containing the program that needs them. Prolog will consult 
<span class="verb">
<span class="cmtt-10"> listPredicates 
</span>
</span> when reading in that file, and all the predicate definitions in 
<span class="verb">
<span class="cmtt-10"> listPredicates 
</span>
</span> become available. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> There’s one practical point you should be aware of. When Prolog loads files, it doesn’t normally check whether the files really need to be consulted. If the predicate definitions provided by one of the files are already in the database because that file was consulted previously, Prolog will still consult it again, although it doesn’t need to. This can be annoying if you are consulting very large files. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> The built-in predicate 
<span class="verb">
<span class="cmtt-10"> ensure_loaded/1 
</span>
</span> behaves more intelligently in this respect. It works as follows. On encountering the following directive 
<a id="dx76-111009">
</a>
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb555">
<a id="x76-111011r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  ensure_loaded([listPredicates]). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Prolog checks whether the file 
<span class="verb">
<span class="cmtt-10"> listPredicates.pl 
</span>
</span> has already been loaded and only loads it again if it has changed since the last loading. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent">
</p>
</div>
<div class="nb-cell html" name="htm1">
<h4 class="likesubsectionHead">
<a id="x76-11200012.1">
</a> Modules 
</h4>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Now imagine that you are writing a program that manages a movie database. You have designed a predicate 
<span class="verb">
<span class="cmtt-10"> printActors 
</span>
</span> which displays all actors starring in a particular film, and a predicate 
<span class="verb">
<span class="cmtt-10"> printMovies 
</span>
</span> which displays all movies directed by a particular filmmaker. Both definitions are stored in different files, namely 
<span class="verb">
<span class="cmtt-10"> printActors.pl 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> printMovies.pl 
</span>
</span> , and both use an auxiliary predicate 
<span class="verb">
<span class="cmtt-10"> displayList/1 
</span>
</span> . Here’s the first file: 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb556">
<a id="x76-112002r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  % 
</span>
<span class="cmtt-10">  This 
</span>
<span class="cmtt-10">  is 
</span>
<span class="cmtt-10">  the 
</span>
<span class="cmtt-10">  file: 
</span>
<span class="cmtt-10">  printActors.pl 
</span>
<br class="fancyvrb"/>
<a id="x76-112004r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x76-112006r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  printActors(Film):- 
</span>
<br class="fancyvrb"/>
<a id="x76-112008r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  setof(Actor,starring(Actor,Film),List), 
</span>
<br class="fancyvrb"/>
<a id="x76-112010r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  displayList(List). 
</span>
<br class="fancyvrb"/>
<a id="x76-112012r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x76-112014r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  displayList([]):- 
</span>
<span class="cmtt-10">  nl. 
</span>
<br class="fancyvrb"/>
<a id="x76-112016r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  displayList([X|L]):- 
</span>
<br class="fancyvrb"/>
<a id="x76-112018r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  write(X), 
</span>
<span class="cmtt-10">  tab(1), 
</span>
<br class="fancyvrb"/>
<a id="x76-112020r10">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  displayList(L). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> And here’s the second: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb557">
<a id="x76-112022r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  % 
</span>
<span class="cmtt-10">  This 
</span>
<span class="cmtt-10">  is 
</span>
<span class="cmtt-10">  the 
</span>
<span class="cmtt-10">  file: 
</span>
<span class="cmtt-10">  printMovies.pl 
</span>
<br class="fancyvrb"/>
<a id="x76-112024r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x76-112026r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  printMovies(Director):- 
</span>
<br class="fancyvrb"/>
<a id="x76-112028r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  setof(Film,directed(Director,Film),List), 
</span>
<br class="fancyvrb"/>
<a id="x76-112030r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  displayList(List). 
</span>
<br class="fancyvrb"/>
<a id="x76-112032r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x76-112034r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  displayList([]):- 
</span>
<span class="cmtt-10">  nl. 
</span>
<br class="fancyvrb"/>
<a id="x76-112036r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  displayList([X|L]):- 
</span>
<br class="fancyvrb"/>
<a id="x76-112038r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  write(X), 
</span>
<span class="cmtt-10">  nl, 
</span>
<br class="fancyvrb"/>
<a id="x76-112040r10">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  displayList(L). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Note that 
<span class="verb">
<span class="cmtt-10"> displayList/1 
</span>
</span> has different definitions in the two files: the actors are printed in a row (using 
<span class="verb">
<span class="cmtt-10"> tab/1 
</span>
</span> ) 
<a id="dx76-112041">
</a> , and the films are printed in a column (using 
<span class="verb">
<span class="cmtt-10"> nl/0 
</span>
</span> ) 
<a id="dx76-112042">
</a> . Will this lead to conflicts in Prolog? Let’s see. We’ll load both programs by placing the statements 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb558">
<a id="x76-112044r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  % 
</span>
<span class="cmtt-10">  This 
</span>
<span class="cmtt-10">  is 
</span>
<span class="cmtt-10">  the 
</span>
<span class="cmtt-10">  file: 
</span>
<span class="cmtt-10">  main.pl 
</span>
<br class="fancyvrb"/>
<a id="x76-112046r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x76-112048r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  [printActors]. 
</span>
<br class="fancyvrb"/>
<a id="x76-112050r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  [printMovies]. 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> at the top of the main file. Consulting the main file will evoke a message that looks something like the following: 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb559">
<a id="x76-112052r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ?- 
</span>
<span class="cmtt-10">  [main]. 
</span>
<br class="fancyvrb"/>
<a id="x76-112054r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  {consulting 
</span>
<span class="cmtt-10">  main.pl...} 
</span>
<br class="fancyvrb"/>
<a id="x76-112056r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  {consulting 
</span>
<span class="cmtt-10">  printActors.pl...} 
</span>
<br class="fancyvrb"/>
<a id="x76-112058r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  {printActors.pl 
</span>
<span class="cmtt-10">  consulted, 
</span>
<span class="cmtt-10">  10 
</span>
<span class="cmtt-10">  msec 
</span>
<span class="cmtt-10">  296 
</span>
<span class="cmtt-10">  bytes} 
</span>
<br class="fancyvrb"/>
<a id="x76-112060r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  {consulting 
</span>
<span class="cmtt-10">  printMovies.pl...} 
</span>
<br class="fancyvrb"/>
<a id="x76-112062r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  The 
</span>
<span class="cmtt-10">  procedure 
</span>
<span class="cmtt-10">  displayList/1 
</span>
<span class="cmtt-10">  is 
</span>
<span class="cmtt-10">  being 
</span>
<span class="cmtt-10">  redefined. 
</span>
<br class="fancyvrb"/>
<a id="x76-112064r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Old 
</span>
<span class="cmtt-10">  file: 
</span>
<span class="cmtt-10">  printActors.pl 
</span>
<br class="fancyvrb"/>
<a id="x76-112066r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  New 
</span>
<span class="cmtt-10">  file: 
</span>
<span class="cmtt-10">  printMovies.pl 
</span>
<br class="fancyvrb"/>
<a id="x76-112068r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  Do 
</span>
<span class="cmtt-10">  you 
</span>
<span class="cmtt-10">  really 
</span>
<span class="cmtt-10">  want 
</span>
<span class="cmtt-10">  to 
</span>
<span class="cmtt-10">  redefine 
</span>
<span class="cmtt-10">  it? 
</span>
<span class="cmtt-10">  (y, 
</span>
<span class="cmtt-10">  n, 
</span>
<span class="cmtt-10">  p, 
</span>
<span class="cmtt-10">  or 
</span>
<span class="cmtt-10">  ?) 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> What has happened? Well, as both files 
<span class="verb">
<span class="cmtt-10"> printActors.pl 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> printMovies.pl 
</span>
</span> define a predicate called 
<span class="verb">
<span class="cmtt-10"> displayList/1 
</span>
</span> , Prolog needs to choose one of the two definitions (it can’t have two different definitions for one predicate in its knowledge base). 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> What to do? Well, perhaps in some of these situations you really do want to redefine a predicate. But here you don’t — you want two different definitions because you want movies and actors to be displayed differently. One way of dealing with this is to give a different name to one of the two predicates. But let’s face it, this is clumsy. You want to think of each file as a conceptually self-contained entity; you don’t want to waste time and energy thinking about how you named predicates in some other file. And the most natural way of achieving the desired conceptual independence is to use Prolog’s module system. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Modules essentially allow you to hide predicate definitions. You are allowed to decide which predicates should be public (that is, callable from parts of the program that are stored in other files) and which predicates should be private (that is, callable only from within the module itself). Thus you will not be able to call private predicates from outside the module in which they are defined, but there will be no conflicts if two modules internally define the same predicate. In our example, 
<span class="verb">
<span class="cmtt-10"> displayList/1 
</span>
</span> is a good candidate for becoming a private predicate; it plays a simple auxiliary role in both 
<span class="verb">
<span class="cmtt-10"> printActors/1 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> printMovies/1, 
</span>
</span> and the details of the role it plays for one predicate are not relevant to the other. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> You can turn a file into a module by putting a module declaration at the top. Module declarations are of the form 
<a id="dx76-112069">
</a>
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb560">
<a id="x76-112071r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  module(ModuleName, 
</span>
<br class="fancyvrb"/>
<a id="x76-112073r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  List_of_Predicates_to_be_Exported). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Such declarations specify the name of the module and the list of public predicates, that is, the list of predicates that you want to export. These will be the only predicates that are accessible from outside the module. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Let’s modularise our movie database programs. We only need to include the following line at the top of the first file: 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb561">
<a id="x76-112075r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  % 
</span>
<span class="cmtt-10">  This 
</span>
<span class="cmtt-10">  is 
</span>
<span class="cmtt-10">  the 
</span>
<span class="cmtt-10">  file: 
</span>
<span class="cmtt-10">  printActors.pl 
</span>
<br class="fancyvrb"/>
<a id="x76-112077r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x76-112079r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  module(printActors,[printActors/1]). 
</span>
<br class="fancyvrb"/>
<a id="x76-112081r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x76-112083r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  printActors(Film):- 
</span>
<br class="fancyvrb"/>
<a id="x76-112085r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  setof(Actor,starring(Actor,Film),List), 
</span>
<br class="fancyvrb"/>
<a id="x76-112087r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  displayList(List). 
</span>
<br class="fancyvrb"/>
<a id="x76-112089r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x76-112091r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  displayList([]):- 
</span>
<span class="cmtt-10">  nl. 
</span>
<br class="fancyvrb"/>
<a id="x76-112093r10">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  displayList([X|L]):- 
</span>
<br class="fancyvrb"/>
<a id="x76-112095r11">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  write(X), 
</span>
<span class="cmtt-10">  tab(1), 
</span>
<br class="fancyvrb"/>
<a id="x76-112097r12">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  displayList(L). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Here we have introduced a module called 
<span class="verb">
<span class="cmtt-10"> printActors 
</span>
</span> , with one public predicate 
<span class="verb">
<span class="cmtt-10"> printActors/1 
</span>
</span> . The predicate 
<span class="verb">
<span class="cmtt-10"> displayList/1 
</span>
</span> is only known in the scope of the module 
<span class="verb">
<span class="cmtt-10"> printActors 
</span>
</span> , so its definition won’t affect any other modules. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Likewise we can turn the second file into a module: 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb562">
<a id="x76-112099r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  % 
</span>
<span class="cmtt-10">  This 
</span>
<span class="cmtt-10">  is 
</span>
<span class="cmtt-10">  the 
</span>
<span class="cmtt-10">  file: 
</span>
<span class="cmtt-10">  printMovies.pl 
</span>
<br class="fancyvrb"/>
<a id="x76-112101r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x76-112103r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  module(printMovies,[printMovies/1]). 
</span>
<br class="fancyvrb"/>
<a id="x76-112105r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x76-112107r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  printMovies(Director):- 
</span>
<br class="fancyvrb"/>
<a id="x76-112109r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  setof(Film,directed(Director,Film),List), 
</span>
<br class="fancyvrb"/>
<a id="x76-112111r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  displayList(List). 
</span>
<br class="fancyvrb"/>
<a id="x76-112113r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x76-112115r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  displayList([]):- 
</span>
<span class="cmtt-10">  nl. 
</span>
<br class="fancyvrb"/>
<a id="x76-112117r10">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  displayList([X|L]):- 
</span>
<br class="fancyvrb"/>
<a id="x76-112119r11">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  write(X), 
</span>
<span class="cmtt-10">  nl, 
</span>
<br class="fancyvrb"/>
<a id="x76-112121r12">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  displayList(L). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Again, the definition of the 
<span class="verb">
<span class="cmtt-10"> displayList/1 
</span>
</span> is only known in the scope of the module 
<span class="verb">
<span class="cmtt-10"> printMovies 
</span>
</span> , so there won’t be any clash when loading both modules at the same time. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Modules can be loaded with the built-in predicates 
<span class="verb">
<span class="cmtt-10"> use_module/1 
</span>
</span> . This will import all predicates that were defined as public by the module. In other words, all public predicates will be 
<a id="dx76-112122">
</a> accessible. To do this we need to change the main file as follows: 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb563">
<a id="x76-112124r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  % 
</span>
<span class="cmtt-10">  This 
</span>
<span class="cmtt-10">  is 
</span>
<span class="cmtt-10">  the 
</span>
<span class="cmtt-10">  file: 
</span>
<span class="cmtt-10">  main.pl 
</span>
<br class="fancyvrb"/>
<a id="x76-112126r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x76-112128r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  use_module(printActors). 
</span>
<br class="fancyvrb"/>
<a id="x76-112130r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  use_module(printMovies). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> If you don’t want to use all public predicates of a module, but only some of them, you can use the two-place version of 
<span class="verb">
<span class="cmtt-10"> use_module 
</span>
</span> , which takes a list of predicates that you actually want to import as its 
<a id="dx76-112131">
</a> second argument. So, by putting 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb564">
<a id="x76-112133r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  % 
</span>
<span class="cmtt-10">  This 
</span>
<span class="cmtt-10">  is 
</span>
<span class="cmtt-10">  the 
</span>
<span class="cmtt-10">  file: 
</span>
<span class="cmtt-10">  main.pl 
</span>
<br class="fancyvrb"/>
<a id="x76-112135r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x76-112137r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  use_module(printActors,[printActors/1]). 
</span>
<br class="fancyvrb"/>
<a id="x76-112139r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  use_module(printMovies,[printMovies/1]). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> at the top of the main file, we have explicitly stated that we can use 
<span class="verb">
<span class="cmtt-10"> printActors/1 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> printMovies/1 
</span>
</span> , and nothing else (in this case, of course, the declaration is unnecessary as there are no other public predicates that we could use). Needless to say, you can only import predicates that are actually exported by the relevant module. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent">
</p>
</div>
<div class="nb-cell html" name="htm1">
<h4 class="likesubsectionHead">
<a id="x76-11300012.1">
</a> Libraries 
</h4>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Many of the most common predicates are provided predefined, in one way or another, by most Prolog implementations. If you have been using SWI Prolog, for example, you will probably have noticed that predicates like 
<span class="verb">
<span class="cmtt-10"> append/3 
</span>
</span> and 
<span class="verb">
<span class="cmtt-10"> member/2 
</span>
</span> come as part of the system. That’s a speciality of SWI, however. Other Prolog implementations, like SICStus for example, don’t have them built-in, but provide them as part of a library. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Libraries are modules defining common predicates, and can be loaded using the normal commands for importing modules. When specifying the name of the library that you want to use, you have to tell Prolog that this module is a library, so that Prolog knows where to look for it (namely, in the place where Prolog keeps its libraries, not in the directory where your other code is). For example, putting the directive 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb565">
<a id="x76-113002r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  :- 
</span>
<span class="cmtt-10">  use_module(library(lists)). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> at the top of your file tells Prolog to load a library called 
<span class="verb">
<span class="cmtt-10"> lists 
</span>
</span> . In SICStus Prolog, this library contains a set of commonly used list processing predicates. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Libraries can be very useful and they can save you a lot of work. Moreover, the code in libraries has typically been written by excellent programmers, and is likely to be highly efficient and problem-free. However the way that libraries are organised and the inventory of predicates provided by libraries are by no means standardised across different Prolog implementations. This means that if you want your program to run with different Prolog implementations, it is probably easier and faster to define your own library modules (using the techniques that we saw in the last section) rather than to try to work around the incompatibilities between the library systems of different Prolog implementations. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse53"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse52"> front 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch12"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent">
<a id="taillpn-htmlse52">
</a>
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse54"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse52"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse52"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=#taillpn-htmlse53"> tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch12"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<h3 class="sectionHead">
<span class="titlemark"> 12.2 
</span>
<a id="x77-11400012.2">
</a> Writing to Files 
</h3>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Many applications require that output be written to a file rather than to the screen. In this section we will explain how to do this in Prolog. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> In order to write to a file we have to create one (or open an existing one) and associate a stream with it. You can think of streams as connections to files. In Prolog, streams are blessed with names in a rather user-unfriendly format, such as 
<span class="verb">
<span class="cmtt-10"> ’\$stream’(183368) 
</span>
</span> . Luckily, you never have to bother about the exact names of streams — although Prolog assigns these names internally, you can use Prolog’s unification to match the name to a variable and make use of the variable rather than the name of the stream itself. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Say you want to print the string ’Hogwarts’ to the file 
<span class="verb">
<span class="cmtt-10"> hogwarts.txt 
</span>
</span> . This is done as follows: 
<a id="dx77-114001">
</a>
<a id="dx77-114002">
</a>
<a id="dx77-114003">
</a>
<a id="dx77-114004">
</a>
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb566">
<a id="x77-114006r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ... 
</span>
<br class="fancyvrb"/>
<a id="x77-114008r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  open(’hogwarts.txt’,write,Stream), 
</span>
<br class="fancyvrb"/>
<a id="x77-114010r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  write(Stream,’Hogwarts’), 
</span>
<span class="cmtt-10">  nl(Stream), 
</span>
<br class="fancyvrb"/>
<a id="x77-114012r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  close(Stream), 
</span>
<br class="fancyvrb"/>
<a id="x77-114014r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ... 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> What’s happening here? Well, first the built-in predicate 
<span class="verb">
<span class="cmtt-10"> open/3 
</span>
</span> is used to create the file 
<span class="verb">
<span class="cmtt-10"> hogwarts.txt 
</span>
</span> . The second argument of 
<span class="verb">
<span class="cmtt-10"> open/3 
</span>
</span> indicates that we want to open a new file (overwriting any existing file with the same name). The third argument of 
<span class="verb">
<span class="cmtt-10"> open/3 
</span>
</span> returns the name of the stream. Secondly, we write ’Hogwarts’ on the stream and issue a newline command as well. After this we are ready, and close the stream, using the built-in 
<span class="verb">
<span class="cmtt-10"> close/1 
</span>
</span> . 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> And that’s more or less all there is to it. As promised, we were not interested in the name of the stream — we used the variable 
<span class="verb">
<span class="cmtt-10"> Stream 
</span>
</span> to pass it around. Also note that the 
<span class="verb">
<span class="cmtt-10"> write/2 
</span>
</span> predicate we used here is basically a more general form of the 
<span class="verb">
<span class="cmtt-10"> write/1 
</span>
</span> predicates we used in Chapter  
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch9"> 9 
<!--tex4ht:ref: CHAPTER9 -->
</a> for writing to the screen. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> What if you don’t want to overwrite an existing file but append to an existing one? This is done by choosing a different mode when opening the file: instead of 
<span class="verb">
<span class="cmtt-10"> write 
</span>
</span> , use 
<span class="verb">
<span class="cmtt-10"> append 
</span>
</span> as value for the second argument of 
<span class="verb">
<span class="cmtt-10"> open/3 
</span>
</span> . If a file of the given name doesn’t exist, it will be created. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse54"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse52"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse52"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse53"> front 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch12"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent">
<a id="taillpn-htmlse53">
</a>
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse55"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse53"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse53"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=#taillpn-htmlse54"> tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch12"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<h3 class="sectionHead">
<span class="titlemark"> 12.3 
</span>
<a id="x78-11500012.3">
</a> Reading from Files 
</h3>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> In this section we show how to read from files. Reading information from files is straightforward in Prolog — or at least, it is if this information is given in the form of Prolog terms followed by full stops. Consider the file 
<span class="verb">
<span class="cmtt-10"> houses.txt 
</span>
</span> : 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb567">
<a id="x78-115002r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  gryffindor. 
</span>
<br class="fancyvrb"/>
<a id="x78-115004r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  hufflepuff. 
</span>
<br class="fancyvrb"/>
<a id="x78-115006r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ravenclaw. 
</span>
<br class="fancyvrb"/>
<a id="x78-115008r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  slytherin. 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Here is a Prolog program that opens this file, reads 
<a id="dx78-115009">
</a>
<a id="dx78-115010">
</a> the information from it, and displays it on the screen: 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb568">
<a id="x78-115012r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  main:- 
</span>
<br class="fancyvrb"/>
<a id="x78-115014r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  open(’houses.txt’,read,Str), 
</span>
<br class="fancyvrb"/>
<a id="x78-115016r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  read(Str,House1), 
</span>
<br class="fancyvrb"/>
<a id="x78-115018r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  read(Str,House2), 
</span>
<br class="fancyvrb"/>
<a id="x78-115020r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  read(Str,House3), 
</span>
<br class="fancyvrb"/>
<a id="x78-115022r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  read(Str,House4), 
</span>
<br class="fancyvrb"/>
<a id="x78-115024r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  close(Str), 
</span>
<br class="fancyvrb"/>
<a id="x78-115026r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  write([House1,House2,House3,House4]), 
</span>
<span class="cmtt-10">  nl. 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> This opens a file in reading mode, then reads four Prolog terms using the built-in predicate 
<span class="verb">
<span class="cmtt-10"> read/2 
</span>
</span> , closes the stream, and prints the information as a list. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> All very straightforward. Nonetheless, the 
<span class="verb">
<span class="cmtt-10"> read/2 
</span>
</span> predicate needs to be handled with care. First of all, it only is able to handle Prolog terms (we’ll say more about this problem shortly). And secondly, it will cause a run-time error if we use it to read from a stream when there is nothing to read. Is there an elegant way to overcome this second problem? 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> There is. The built-in predicate 
<span class="verb">
<span class="cmtt-10"> at_end_of_stream/1 
</span>
</span> checks whether the end of a stream has been reached, and can be used as a safety-net. For a stream 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> , 
<span class="verb">
<span class="cmtt-10"> at_end_of_stream(X) 
</span>
</span> will 
<a id="dx78-115027">
</a> evaluate to true when the end of the stream 
<span class="verb">
<span class="cmtt-10"> X 
</span>
</span> is reached (in other words, when all terms in the corresponding file have been read). 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> The following code is a modified version of our earlier reading-in program, which shows how 
<span class="verb">
<span class="cmtt-10"> at_end_of_stream/1 
</span>
</span> can be incorporated: 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb569">
<a id="x78-115029r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  main:- 
</span>
<br class="fancyvrb"/>
<a id="x78-115031r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  open(’houses.txt’,read,Str), 
</span>
<br class="fancyvrb"/>
<a id="x78-115033r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  read_houses(Str,Houses), 
</span>
<br class="fancyvrb"/>
<a id="x78-115035r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  close(Str), 
</span>
<br class="fancyvrb"/>
<a id="x78-115037r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  write(Houses), 
</span>
<span class="cmtt-10">  nl. 
</span>
<br class="fancyvrb"/>
<a id="x78-115039r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x78-115041r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  read_houses(Stream,[]):- 
</span>
<br class="fancyvrb"/>
<a id="x78-115043r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  at_end_of_stream(Stream). 
</span>
<br class="fancyvrb"/>
<a id="x78-115045r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x78-115047r10">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  read_houses(Stream,[X|L]):- 
</span>
<br class="fancyvrb"/>
<a id="x78-115049r11">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  \+ 
</span>
<span class="cmtt-10">  at_end_of_stream(Stream), 
</span>
<br class="fancyvrb"/>
<a id="x78-115051r12">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  read(Stream,X), 
</span>
<br class="fancyvrb"/>
<a id="x78-115053r13">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  read_houses(Stream,L). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Now for the nastier problem. Recall that 
<span class="verb">
<span class="cmtt-10"> read/2 
</span>
</span> only reads in Prolog terms. If you want to read in arbitrary input, things become rather unpleasant, as Prolog forces you to read information on the level of characters. The predicate that you need in this case is 
<span class="verb">
<span class="cmtt-10"> get_code/2 
</span>
</span> which 
<a id="dx78-115054">
</a> reads the next available character from a stream. Characters are represented in Prolog by their integer codes. For example, 
<span class="verb">
<span class="cmtt-10"> get_code/2 
</span>
</span> will return 
<span class="verb">
<span class="cmtt-10"> 97 
</span>
</span> if the next character on the stream is an 
<span class="verb">
<span class="cmtt-10"> a 
</span>
</span> . 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> Usually we are not interested in these integer codes, but in the characters — or rather, in the atoms that are made up of lists of these characters. How do we get our hands on these (lists of) characters? One way is to use the built-in predicate 
<span class="verb">
<span class="cmtt-10"> atom_codes/2 
</span>
</span> that 
<a id="dx78-115055">
</a> we introduced in Chapter  
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch9"> 9 
<!--tex4ht:ref: CHAPTER9 -->
</a> to convert a list of integers into the corresponding atom. We’ll use this technique in the following example, a predicate that reads in a word from a stream. 
</p>
</div>

<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb570">
<a id="x78-115057r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  readWord(InStream,W):- 
</span>
<br class="fancyvrb"/>
<a id="x78-115059r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  get_code(InStream,Char), 
</span>
<br class="fancyvrb"/>
<a id="x78-115061r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  checkCharAndReadRest(Char,Chars,InStream), 
</span>
<br class="fancyvrb"/>
<a id="x78-115063r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  atom_codes(W,Chars). 
</span>
<br class="fancyvrb"/>
<a id="x78-115065r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x78-115067r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x78-115069r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  checkCharAndReadRest(10,[],_):- 
</span>
<span class="cmtt-10">  !. 
</span>
<br class="fancyvrb"/>
<a id="x78-115071r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x78-115073r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  checkCharAndReadRest(32,[],_):- 
</span>
<span class="cmtt-10">  !. 
</span>
<br class="fancyvrb"/>
<a id="x78-115075r10">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x78-115077r11">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  checkCharAndReadRest(-1,[],_):- 
</span>
<span class="cmtt-10">  !. 
</span>
<br class="fancyvrb"/>
<a id="x78-115079r12">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x78-115081r13">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  checkCharAndReadRest(end_of_file,[],_):- 
</span>
<span class="cmtt-10">  !. 
</span>
<br class="fancyvrb"/>
<a id="x78-115083r14">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x78-115085r15">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  checkCharAndReadRest(Char,[Char|Chars],InStream):- 
</span>
<br class="fancyvrb"/>
<a id="x78-115087r16">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  get_code(InStream,NextChar), 
</span>
<br class="fancyvrb"/>
<a id="x78-115089r17">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  checkCharAndReadRest(NextChar,Chars,InStream). 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> How does this work? It reads in a character and then checks whether this character is a blank (integer code 32), a new line (10) or the end of the stream ( 
<span class="cmsy-10"> − 
</span> 1). In any of these cases a complete word has been read, otherwise the next character is read. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse55"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse53"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse53"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse54"> front 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch12"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent">
<a id="taillpn-htmlse54">
</a>
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse56"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse54"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse54"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=#taillpn-htmlse55"> tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch12"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<h3 class="sectionHead">
<span class="titlemark"> 12.4 
</span>
<a id="x79-11600012.4">
</a> <strong>Exercise</strong>s 
</h3>
</div>
<div class="nb-cell html" name="htm1">
<div class="newtheorem">
<!--l. 482-->
<p class="noindent">
<span class="head">
<span class="cmbx-10"> <strong>Exercise</strong>
</span>
<span class="cmbx-10">  12.1 
</span>
</span>
<a id="x79-1160011">
</a>
<span class="cmti-10"> Write code that creates 
</span>
<span class="verb">
<span class="cmtt-10"> hogwart.houses 
</span>
</span>
<span class="cmti-10"> , a file that that looks like 
</span>
<span class="cmti-10"> this: 
</span>
</p>
<div class="fancyvrb" id="fancyvrb571">
<a id="x79-116003r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  gryffindor 
</span>
<br class="fancyvrb"/>
<a id="x79-116005r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  hufflepuff 
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  ravenclaw 
</span>
<br class="fancyvrb"/>
<a id="x79-116007r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  slytherin 
</span>
</div>
<!--l. 490-->
<p class="noindent">
<span class="cmti-10"> You can use the built-in predicates 
</span>
<span class="verb">
<span class="cmtt-10"> open/3 
</span>
</span>
<span class="cmti-10"> , 
</span>
<span class="verb">
<span class="cmtt-10"> close/1 
</span>
</span>
<span class="cmti-10"> , 
</span>
<span class="verb">
<span class="cmtt-10"> tab/2 
</span>
</span>
<span class="cmti-10"> , 
</span>
<span class="verb">
<span class="cmtt-10"> nl/1 
</span>
</span>
<span class="cmti-10"> , and 
</span>
<span class="verb">
<span class="cmtt-10"> write/2 
</span>
</span>
<span class="cmti-10"> . 
</span>
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<div class="newtheorem">
<!--l. 495-->
<p class="noindent">
<span class="head">
<span class="cmbx-10"> <strong>Exercise</strong>
</span>
<span class="cmbx-10">  12.2 
</span>
</span>
<a id="x79-1160082">
</a>
<span class="cmti-10"> Write a Prolog program that reads in a plain text file word by 
</span>
<span class="cmti-10"> word, and asserts all read words and their frequency into the Prolog database. 
</span>
<span class="cmti-10"> You may use the predicate 
</span>
<span class="verb">
<span class="cmtt-10"> readWord/2 
</span>
</span>
<span class="cmti-10"> to read in words. Use a dynamic 
</span>
<span class="cmti-10"> predicate 
</span>
<span class="verb">
<span class="cmtt-10"> word/2 
</span>
</span>
<span class="cmti-10"> to store the words, where the first argument is a word, and the 
</span>
<span class="cmti-10"> second argument is the frequency of that word. 
</span>
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse56"> next 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse54"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse54"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse55"> front 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch12"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent">
<a id="taillpn-htmlse55">
</a>
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse55"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse55"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=#taillpn-htmlse56"> tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch12"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<h3 class="sectionHead">
<span class="titlemark"> 12.5 
</span>
<a id="x80-11700012.5">
</a> Practical Session 
</h3>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> In this practical session, we want to combine what we have learned about file handling with some topics we met in earlier chapters. The goal is to write a program for running a DCG grammar on a testsuite, so that the performance of the grammar can be checked. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> What is a testsuite? It is a file that contains lots of possible inputs (and expected outputs) for some program. In this case, a testsuite will be a file that has lists representing grammatical and ungrammatical sentences, such as 
<span class="verb">
<span class="cmtt-10"> [the,woman,shoots,the,cow,under,the,shower] 
</span>
</span> or 
<span class="verb">
<span class="cmtt-10"> [him,shoots,woman] 
</span>
</span> . The test program should take this file, run the grammar on each of the sentences, and store the results in another file. We can then look at the output file to check whether the grammar answered everywhere the way it should have. When developing grammars, testsuites like this are extremely useful for making sure that any modifications we make to the grammar don’t have unwanted effects. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent">
</p>
</div>
<div class="nb-cell html" name="htm1">
<h4 class="likesubsectionHead">
<a id="x80-11800012.5">
</a> Step 1 
</h4>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Take the DCG that you built in the practical session of Chapter  
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch8"> 8 
<!--tex4ht:ref: CHAPTER8 -->
</a> and turn it into a module, exporting the predicate 
<span class="verb">
<span class="cmtt-10"> s/3 
</span>
</span> , that is, the predicate that lets you parse sentences and returns the parse tree as its first argument. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent">
</p>
</div>
<div class="nb-cell html" name="htm1">
<h4 class="likesubsectionHead">
<a id="x80-11900012.5">
</a> Step 2 
</h4>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> In the practical session of Chapter  
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch9"> 9 
<!--tex4ht:ref: CHAPTER9 -->
</a> , you had to write a program for pretty printing parse trees onto the screen. Turn that into a module as well. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent">
</p>
</div>
<div class="nb-cell html" name="htm1">
<h4 class="likesubsectionHead">
<a id="x80-12000012.5">
</a> Step 3 
</h4>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Now modify the program so that it prints the tree not to the screen but to a given stream. That means that the predicate 
<span class="verb">
<span class="cmtt-10"> pptree 
</span>
</span> should now be a two-place predicate taking the Prolog representation of a parse tree and a stream as arguments. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent">
</p>
</div>
<div class="nb-cell html" name="htm1">
<h4 class="likesubsectionHead">
<a id="x80-12100012.5">
</a> Step 4 
</h4>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Import both modules into a file and define a two-place predicate 
<span class="verb">
<span class="cmtt-10"> test 
</span>
</span> which takes a list representing a sentence (such as 
<span class="verb">
<span class="cmtt-10"> [a,woman,shoots] 
</span>
</span> ), parses it, and writes the result to the file specified by the second argument of 
<span class="verb">
<span class="cmtt-10"> test 
</span>
</span> . Check that everything is working as it should. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent">
</p>
</div>
<div class="nb-cell html" name="htm1">
<h4 class="likesubsectionHead">
<a id="x80-12200012.5">
</a> Step 5 
</h4>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Finally, modify 
<span class="verb">
<span class="cmtt-10"> test/2 
</span>
</span> , so that it takes a filename instead of a sentence as its first argument, reads in the sentences given in the file one by one, parses them, and writes the sentence as well as the parsing result into the output file. For example, if your input file looked like this: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb572">
<a id="x80-122002r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  [the,cow,under,the,table,shoots]. 
</span>
<br class="fancyvrb"/>
<a id="x80-122004r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x80-122006r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  [a,dead,woman,likes,he]. 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> the output file should look something like this: 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb573">
<a id="x80-122008r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  [the, 
</span>
<span class="cmtt-10">  cow, 
</span>
<span class="cmtt-10">  under, 
</span>
<span class="cmtt-10">  the, 
</span>
<span class="cmtt-10">  table, 
</span>
<span class="cmtt-10">  shoots] 
</span>
<br class="fancyvrb"/>
<a id="x80-122010r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x80-122012r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  s( 
</span>
<br class="fancyvrb"/>
<a id="x80-122014r4">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  np( 
</span>
<br class="fancyvrb"/>
<a id="x80-122016r5">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  det(the) 
</span>
<br class="fancyvrb"/>
<a id="x80-122018r6">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  nbar( 
</span>
<br class="fancyvrb"/>
<a id="x80-122020r7">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  n(cow)) 
</span>
<br class="fancyvrb"/>
<a id="x80-122022r8">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  pp( 
</span>
<br class="fancyvrb"/>
<a id="x80-122024r9">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  prep(under) 
</span>
<br class="fancyvrb"/>
<a id="x80-122026r10">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  np( 
</span>
<br class="fancyvrb"/>
<a id="x80-122028r11">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  det(the) 
</span>
<br class="fancyvrb"/>
<a id="x80-122030r12">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  nbar( 
</span>
<br class="fancyvrb"/>
<a id="x80-122032r13">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  n(table))))) 
</span>
<br class="fancyvrb"/>
<a id="x80-122034r14">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  vp( 
</span>
<br class="fancyvrb"/>
<a id="x80-122036r15">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  v(shoots))) 
</span>
<br class="fancyvrb"/>
<a id="x80-122038r16">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x80-122040r17">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x80-122042r18">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  [a, 
</span>
<span class="cmtt-10">  dead, 
</span>
<span class="cmtt-10">  woman, 
</span>
<span class="cmtt-10">  likes, 
</span>
<span class="cmtt-10">  he] 
</span>
<br class="fancyvrb"/>
<a id="x80-122044r19">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x80-122046r20">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  no 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent">
</p>
</div>
<div class="nb-cell html" name="htm1">
<h4 class="likesubsectionHead">
<a id="x80-12300012.5">
</a> Step 6 
</h4>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Now (if you are in for some real Prolog hacking) try to write a module that reads in sentences terminated by a full stop or a line break from a file, so that you can give your testsuite as 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb574">
<a id="x80-123002r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  the 
</span>
<span class="cmtt-10">  cow 
</span>
<span class="cmtt-10">  under 
</span>
<span class="cmtt-10">  the 
</span>
<span class="cmtt-10">  table 
</span>
<span class="cmtt-10">  shoots 
</span>
<span class="cmtt-10">  . 
</span>
<br class="fancyvrb"/>
<a id="x80-123004r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x80-123006r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  a 
</span>
<span class="cmtt-10">  dead 
</span>
<span class="cmtt-10">  woman 
</span>
<span class="cmtt-10">  likes 
</span>
<span class="cmtt-10">  he 
</span>
<span class="cmtt-10">  . 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent"> instead of 
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="fancyvrb" id="fancyvrb575">
<a id="x80-123008r1">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  [the,cow,under,the,table,shoots]. 
</span>
<br class="fancyvrb"/>
<a id="x80-123010r2">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">   
</span>
<br class="fancyvrb"/>
<a id="x80-123012r3">
</a>
<span class="cmtt-10">   
</span>
<span class="cmtt-10">  [a,dead,woman,likes,he]. 
</span>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent">
</p>
</div>
<div class="nb-cell html" name="htm1">
<h4 class="likesubsectionHead">
<a id="x80-12400012.5">
</a> Step 7 
</h4>
</div>
<div class="nb-cell html" name="htm1">
<p class="noindent"> Make the testsuite environment more sophisticated, by adding information to the input file about the expected output (in this case, whether the sentences has a parse or not). Then modify the program so that it checks whether the expected output matches the obtained output. 
</p>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent">
<a id="Q1-80-125">
</a>
</p>
</div>
<div class="nb-cell html" name="htm1">
<div class="crosslinks">
<p class="noindent"> [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse55"> prev 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse55"> prev-tail 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlse56"> front 
</a> ] [ 
<a href="lpnpage.php?pagetype=html&amp;pageid=lpn-htmlch12"> up 
</a> ] 
</p>
</div>
</div>
<div class="nb-cell html" name="htm1">
<p class="indent">
<a id="taillpn-htmlse56">
</a>
</p>
</div>
</div>
